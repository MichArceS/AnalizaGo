Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    BREAK
    COMILLA
    COMMENT_BLOQUE_DER
    COMMENT_BLOQUE_IZQ
    COMMENT_LINEA
    CONST
    CONTAINS
    CONTINUE
    DEFER
    DOBLE_COMILLA
    ELSE
    ESPACIADO
    FALLTHROUGH
    FALSE
    GO
    IGUAL
    IMPORT
    INTERFACE
    LEN
    PACKAGE
    PIPE
    RANGE
    SELECT
    SPLIT
    STRINGS
    STRUCT
    TRUE
    TYPE
    VACIO

Grammar

Rule 0     S' -> programa
Rule 1     programa -> expression
Rule 2     programa -> impresion
Rule 3     programa -> sentencia
Rule 4     programa -> asignacion
Rule 5     programa -> longvariable
Rule 6     programa -> boolcadena
Rule 7     programa -> companum
Rule 8     programa -> compaid
Rule 9     programa -> sentenciafor
Rule 10    programa -> arreglo
Rule 11    programa -> slice
Rule 12    programa -> capslice
Rule 13    programa -> switch
Rule 14    programa -> map
Rule 15    programa -> asignar_valor_map
Rule 16    programa -> eliminar_valor_map
Rule 17    programa -> obtener_valor_map
Rule 18    programa -> funcion
Rule 19    programa -> cadenabool
Rule 20    programa -> enterocadena
Rule 21    programa -> cadenaentero
Rule 22    programa -> flotantecadena
Rule 23    programa -> cadenaflotante
Rule 24    programa -> seman_operacion
Rule 25    impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER
Rule 26    impresion -> FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER
Rule 27    impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER
Rule 28    impresion -> FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER
Rule 29    longvariable -> ID PARENT_IZQ CADENA PARENT_DER
Rule 30    longvariable -> ID PARENT_IZQ ID PARENT_DER
Rule 31    companum -> NUMERO comparacion NUMERO
Rule 32    compaid -> ID comparacion ID
Rule 33    asignacion -> ID ASIGNACION factor
Rule 34    asignacion -> VAR ID tipo_dato ASIGNACION factor
Rule 35    asignacion -> VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor
Rule 36    sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
Rule 37    incremento -> ID INCREMENTO
Rule 38    incremento -> ID ASIGNACION ID
Rule 39    incremento -> ID DECREMENTO
Rule 40    arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato
Rule 41    arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
Rule 42    cantidad -> NUMERO
Rule 43    cantidad -> ARRPUNTOS
Rule 44    valores -> factor
Rule 45    valores -> factor COMA valores
Rule 46    slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
Rule 47    slice -> ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA NUMERO PARENT_DER
Rule 48    capslice -> ID PARENT_IZQ ID PARENT_DER
Rule 49    expression -> expression MAS term
Rule 50    expression -> expression MENOS term
Rule 51    expression -> term
Rule 52    term -> term MULTIPLICADOR factor
Rule 53    term -> term DIVISOR factor
Rule 54    term -> term MOD_DIVISION factor
Rule 55    term -> factor
Rule 56    sentencia -> IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER
Rule 57    comparacion -> IGUALDAD
Rule 58    comparacion -> MAYOR
Rule 59    comparacion -> MENOR
Rule 60    comparacion -> MAYOR_IGU
Rule 61    comparacion -> MENOR_IGU
Rule 62    comparacion -> DESIGUALDAD
Rule 63    factor -> NUMERO
Rule 64    factor -> ID
Rule 65    factor -> CADENA
Rule 66    factor -> PARENT_IZQ expression PARENT_DER
Rule 67    switch -> SWITCH ID LLAVE_IZQ cases LLAVE_DER
Rule 68    cases -> case
Rule 69    cases -> case default
Rule 70    cases -> case cases
Rule 71    case -> CASE factor DOS_PUNTOS programa
Rule 72    default -> DEFAULT DOS_PUNTOS programa
Rule 73    map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
Rule 74    map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER
Rule 75    map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
Rule 76    tipo_dato -> INT
Rule 77    tipo_dato -> STRING
Rule 78    tipo_dato -> INT64
Rule 79    tipo_dato -> FLOAT32
Rule 80    tipo_dato -> FLOAT64
Rule 81    tipo_dato -> INT32
Rule 82    valores -> clave_valor
Rule 83    valores -> clave_valor COMA valores
Rule 84    clave_valor -> valor DOS_PUNTOS valor
Rule 85    valor -> CADENA
Rule 86    valor -> NUMERO
Rule 87    asignar_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor
Rule 88    eliminar_valor_map -> DELETE PARENT_IZQ ID COMA valor PARENT_DER
Rule 89    obtener_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER
Rule 90    funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
Rule 91    funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
Rule 92    argumentos -> ID tipo_dato
Rule 93    argumentos -> ID tipo_dato COMA argumentos
Rule 94    empty -> <empty>
Rule 95    seman_operacion -> NUMERO MAS NUMERO
Rule 96    seman_operacion -> NUMERO MENOS NUMERO
Rule 97    seman_operacion -> NUMERO MULTIPLICADOR NUMERO
Rule 98    seman_operacion -> NUMERO DIVISOR NUMERO
Rule 99    seman_operacion -> NUMERO MOD_DIVISION NUMERO
Rule 100   seman_operacion -> FLOAT MAS NUMERO
Rule 101   seman_operacion -> FLOAT MENOS NUMERO
Rule 102   seman_operacion -> FLOAT MULTIPLICADOR NUMERO
Rule 103   seman_operacion -> FLOAT DIVISOR NUMERO
Rule 104   seman_operacion -> NUMERO MAS FLOAT
Rule 105   seman_operacion -> NUMERO MENOS FLOAT
Rule 106   seman_operacion -> NUMERO MULTIPLICADOR FLOAT
Rule 107   seman_operacion -> NUMERO DIVISOR FLOAT
Rule 108   seman_operacion -> FLOAT MAS FLOAT
Rule 109   seman_operacion -> FLOAT MENOS FLOAT
Rule 110   seman_operacion -> FLOAT MULTIPLICADOR FLOAT
Rule 111   seman_operacion -> FLOAT DIVISOR FLOAT
Rule 112   boolcadena -> STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER
Rule 113   cadenabool -> STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER
Rule 114   flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER
Rule 115   cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ FLOAT COMA NUMERO PARENT_DER
Rule 116   enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ CADENA COMA NUMERO PARENT_DER
Rule 117   cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER

Terminals, with rules where they appear

AMPERSAND            : 
ARRPUNTOS            : 43
ASIGNACION           : 33 34 35 36 38 40 41 46 47 74 75 87
BOOLEAN              : 112
BREAK                : 
CADENA               : 25 27 29 65 85 113 114 116 117
CASE                 : 71
COMA                 : 25 27 35 35 45 46 47 47 83 88 93 114 114 115 116 117 117
COMILLA              : 
COMMENT_BLOQUE_DER   : 
COMMENT_BLOQUE_IZQ   : 
COMMENT_LINEA        : 
CONST                : 
CONTAINS             : 
CONTINUE             : 
CORCHETE_DER         : 40 41 46 47 73 74 75 87 89
CORCHETE_IZQ         : 40 41 46 47 73 74 75 87 89
DECREMENTO           : 39
DEFAULT              : 72
DEFER                : 
DELETE               : 88
DESIGUALDAD          : 62
DIVISOR              : 53 98 103 107 111
DOBLE_COMILLA        : 
DOS_PUNTOS           : 71 72 84
ELSE                 : 
ESPACIADO            : 
FALLTHROUGH          : 
FALSE                : 
FIN_SENTENCIA        : 36 36
FLOAT                : 100 101 102 103 104 105 106 107 108 108 109 109 110 110 111 111 114 115
FLOAT32              : 79
FLOAT64              : 80
FMT                  : 25 26 27 28
FOR                  : 36
FORMATBOOL           : 112
FORMATFLOAT          : 114
FORMATINT            : 116
FUNC                 : 90 91
GO                   : 
ID                   : 29 30 30 32 32 33 34 35 35 36 36 37 38 38 39 40 41 46 47 47 47 48 48 64 67 73 74 75 87 88 89 90 91 91 92 93
IF                   : 56
IGUAL                : 
IGUALDAD             : 57
IMPORT               : 
INCREMENTO           : 37
INT                  : 76
INT32                : 81
INT64                : 78
INTERFACE            : 
LEN                  : 
LLAVE_DER            : 36 41 56 67 73 75 90 91
LLAVE_IZQ            : 36 41 56 67 73 75 90 91
MAKE                 : 46 74
MAP                  : 73 74 75
MAS                  : 49 95 100 104 108
MAYOR                : 58
MAYOR_IGU            : 60
MENOR                : 59
MENOR_IGU            : 61
MENOS                : 50 96 101 105 109
MOD_DIVISION         : 54 99
MULTIPLICADOR        : 52 97 102 106 110
NUMERO               : 25 27 31 31 42 46 47 47 63 86 95 95 96 96 97 97 98 98 99 99 100 101 102 103 104 105 106 107 114 115 116 117 117
PACKAGE              : 
PARENT_DER           : 25 26 27 28 29 30 46 47 48 66 74 88 90 91 112 113 114 115 116 117
PARENT_IZQ           : 25 26 27 28 29 30 46 47 48 66 74 88 90 91 112 113 114 115 116 117
PARSEBOOL            : 113
PARSEFLOAT           : 115
PARSEINT             : 117
PIPE                 : 
PRINTF               : 25 26
PRINTLN              : 27 28
PUNTO                : 25 26 27 28 112 113 114 115 116 117
RANGE                : 
RETURN               : 91
SELECT               : 
SPLIT                : 
STRCONV              : 112 113 114 115 116 117
STRING               : 77
STRINGS              : 
STRUCT               : 
SWITCH               : 67
TRUE                 : 
TYPE                 : 
VACIO                : 
VAR                  : 34 35 73
error                : 

Nonterminals, with rules where they appear

argumentos           : 90 91 93
arreglo              : 10
asignacion           : 4
asignar_valor_map    : 15
boolcadena           : 6
cadenabool           : 19
cadenaentero         : 21
cadenaflotante       : 23
cantidad             : 40 41
capslice             : 12
case                 : 68 69 70
cases                : 67 70
clave_valor          : 82 83
compaid              : 8
companum             : 7
comparacion          : 31 32 36 56
default              : 69
eliminar_valor_map   : 16
empty                : 26 28
enterocadena         : 20
expression           : 1 49 50 66
factor               : 33 34 35 35 36 36 44 45 52 53 54 55 56 56 71
flotantecadena       : 22
funcion              : 18
impresion            : 2
incremento           : 36
longvariable         : 5
map                  : 14
obtener_valor_map    : 17
programa             : 36 56 71 72 90 91 0
seman_operacion      : 24
sentencia            : 3
sentenciafor         : 9
slice                : 11
switch               : 13
term                 : 49 50 51 52 53 54
tipo_dato            : 34 35 40 41 46 73 73 74 74 75 75 90 91 92 93
valor                : 84 84 87 87 88 89
valores              : 41 45 73 75 83

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . expression
    (2) programa -> . impresion
    (3) programa -> . sentencia
    (4) programa -> . asignacion
    (5) programa -> . longvariable
    (6) programa -> . boolcadena
    (7) programa -> . companum
    (8) programa -> . compaid
    (9) programa -> . sentenciafor
    (10) programa -> . arreglo
    (11) programa -> . slice
    (12) programa -> . capslice
    (13) programa -> . switch
    (14) programa -> . map
    (15) programa -> . asignar_valor_map
    (16) programa -> . eliminar_valor_map
    (17) programa -> . obtener_valor_map
    (18) programa -> . funcion
    (19) programa -> . cadenabool
    (20) programa -> . enterocadena
    (21) programa -> . cadenaentero
    (22) programa -> . flotantecadena
    (23) programa -> . cadenaflotante
    (24) programa -> . seman_operacion
    (49) expression -> . expression MAS term
    (50) expression -> . expression MENOS term
    (51) expression -> . term
    (25) impresion -> . FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (26) impresion -> . FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER
    (27) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (28) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER
    (56) sentencia -> . IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER
    (33) asignacion -> . ID ASIGNACION factor
    (34) asignacion -> . VAR ID tipo_dato ASIGNACION factor
    (35) asignacion -> . VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor
    (29) longvariable -> . ID PARENT_IZQ CADENA PARENT_DER
    (30) longvariable -> . ID PARENT_IZQ ID PARENT_DER
    (112) boolcadena -> . STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER
    (31) companum -> . NUMERO comparacion NUMERO
    (32) compaid -> . ID comparacion ID
    (36) sentenciafor -> . FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
    (40) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato
    (41) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (46) slice -> . ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (47) slice -> . ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA NUMERO PARENT_DER
    (48) capslice -> . ID PARENT_IZQ ID PARENT_DER
    (67) switch -> . SWITCH ID LLAVE_IZQ cases LLAVE_DER
    (73) map -> . VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (74) map -> . ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER
    (75) map -> . ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (87) asignar_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor
    (88) eliminar_valor_map -> . DELETE PARENT_IZQ ID COMA valor PARENT_DER
    (89) obtener_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER
    (90) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (91) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (113) cadenabool -> . STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER
    (116) enterocadena -> . STRCONV PUNTO FORMATINT PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (117) cadenaentero -> . STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER
    (114) flotantecadena -> . STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER
    (115) cadenaflotante -> . STRCONV PUNTO PARSEFLOAT PARENT_IZQ FLOAT COMA NUMERO PARENT_DER
    (95) seman_operacion -> . NUMERO MAS NUMERO
    (96) seman_operacion -> . NUMERO MENOS NUMERO
    (97) seman_operacion -> . NUMERO MULTIPLICADOR NUMERO
    (98) seman_operacion -> . NUMERO DIVISOR NUMERO
    (99) seman_operacion -> . NUMERO MOD_DIVISION NUMERO
    (100) seman_operacion -> . FLOAT MAS NUMERO
    (101) seman_operacion -> . FLOAT MENOS NUMERO
    (102) seman_operacion -> . FLOAT MULTIPLICADOR NUMERO
    (103) seman_operacion -> . FLOAT DIVISOR NUMERO
    (104) seman_operacion -> . NUMERO MAS FLOAT
    (105) seman_operacion -> . NUMERO MENOS FLOAT
    (106) seman_operacion -> . NUMERO MULTIPLICADOR FLOAT
    (107) seman_operacion -> . NUMERO DIVISOR FLOAT
    (108) seman_operacion -> . FLOAT MAS FLOAT
    (109) seman_operacion -> . FLOAT MENOS FLOAT
    (110) seman_operacion -> . FLOAT MULTIPLICADOR FLOAT
    (111) seman_operacion -> . FLOAT DIVISOR FLOAT
    (52) term -> . term MULTIPLICADOR factor
    (53) term -> . term DIVISOR factor
    (54) term -> . term MOD_DIVISION factor
    (55) term -> . factor
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    FMT             shift and go to state 27
    IF              shift and go to state 31
    ID              shift and go to state 33
    VAR             shift and go to state 34
    STRCONV         shift and go to state 35
    NUMERO          shift and go to state 30
    FOR             shift and go to state 36
    SWITCH          shift and go to state 37
    DELETE          shift and go to state 38
    FUNC            shift and go to state 39
    FLOAT           shift and go to state 40
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    programa                       shift and go to state 1
    expression                     shift and go to state 2
    impresion                      shift and go to state 3
    sentencia                      shift and go to state 4
    asignacion                     shift and go to state 5
    longvariable                   shift and go to state 6
    boolcadena                     shift and go to state 7
    companum                       shift and go to state 8
    compaid                        shift and go to state 9
    sentenciafor                   shift and go to state 10
    arreglo                        shift and go to state 11
    slice                          shift and go to state 12
    capslice                       shift and go to state 13
    switch                         shift and go to state 14
    map                            shift and go to state 15
    asignar_valor_map              shift and go to state 16
    eliminar_valor_map             shift and go to state 17
    obtener_valor_map              shift and go to state 18
    funcion                        shift and go to state 19
    cadenabool                     shift and go to state 20
    enterocadena                   shift and go to state 21
    cadenaentero                   shift and go to state 22
    flotantecadena                 shift and go to state 23
    cadenaflotante                 shift and go to state 24
    seman_operacion                shift and go to state 25
    term                           shift and go to state 26
    factor                         shift and go to state 32

state 1

    (0) S' -> programa .



state 2

    (1) programa -> expression .
    (49) expression -> expression . MAS term
    (50) expression -> expression . MENOS term

    $end            reduce using rule 1 (programa -> expression .)
    LLAVE_DER       reduce using rule 1 (programa -> expression .)
    DEFAULT         reduce using rule 1 (programa -> expression .)
    CASE            reduce using rule 1 (programa -> expression .)
    RETURN          reduce using rule 1 (programa -> expression .)
    MAS             shift and go to state 41
    MENOS           shift and go to state 42


state 3

    (2) programa -> impresion .

    $end            reduce using rule 2 (programa -> impresion .)
    LLAVE_DER       reduce using rule 2 (programa -> impresion .)
    DEFAULT         reduce using rule 2 (programa -> impresion .)
    CASE            reduce using rule 2 (programa -> impresion .)
    RETURN          reduce using rule 2 (programa -> impresion .)


state 4

    (3) programa -> sentencia .

    $end            reduce using rule 3 (programa -> sentencia .)
    LLAVE_DER       reduce using rule 3 (programa -> sentencia .)
    DEFAULT         reduce using rule 3 (programa -> sentencia .)
    CASE            reduce using rule 3 (programa -> sentencia .)
    RETURN          reduce using rule 3 (programa -> sentencia .)


state 5

    (4) programa -> asignacion .

    $end            reduce using rule 4 (programa -> asignacion .)
    LLAVE_DER       reduce using rule 4 (programa -> asignacion .)
    DEFAULT         reduce using rule 4 (programa -> asignacion .)
    CASE            reduce using rule 4 (programa -> asignacion .)
    RETURN          reduce using rule 4 (programa -> asignacion .)


state 6

    (5) programa -> longvariable .

    $end            reduce using rule 5 (programa -> longvariable .)
    LLAVE_DER       reduce using rule 5 (programa -> longvariable .)
    DEFAULT         reduce using rule 5 (programa -> longvariable .)
    CASE            reduce using rule 5 (programa -> longvariable .)
    RETURN          reduce using rule 5 (programa -> longvariable .)


state 7

    (6) programa -> boolcadena .

    $end            reduce using rule 6 (programa -> boolcadena .)
    LLAVE_DER       reduce using rule 6 (programa -> boolcadena .)
    DEFAULT         reduce using rule 6 (programa -> boolcadena .)
    CASE            reduce using rule 6 (programa -> boolcadena .)
    RETURN          reduce using rule 6 (programa -> boolcadena .)


state 8

    (7) programa -> companum .

    $end            reduce using rule 7 (programa -> companum .)
    LLAVE_DER       reduce using rule 7 (programa -> companum .)
    DEFAULT         reduce using rule 7 (programa -> companum .)
    CASE            reduce using rule 7 (programa -> companum .)
    RETURN          reduce using rule 7 (programa -> companum .)


state 9

    (8) programa -> compaid .

    $end            reduce using rule 8 (programa -> compaid .)
    LLAVE_DER       reduce using rule 8 (programa -> compaid .)
    DEFAULT         reduce using rule 8 (programa -> compaid .)
    CASE            reduce using rule 8 (programa -> compaid .)
    RETURN          reduce using rule 8 (programa -> compaid .)


state 10

    (9) programa -> sentenciafor .

    $end            reduce using rule 9 (programa -> sentenciafor .)
    LLAVE_DER       reduce using rule 9 (programa -> sentenciafor .)
    DEFAULT         reduce using rule 9 (programa -> sentenciafor .)
    CASE            reduce using rule 9 (programa -> sentenciafor .)
    RETURN          reduce using rule 9 (programa -> sentenciafor .)


state 11

    (10) programa -> arreglo .

    $end            reduce using rule 10 (programa -> arreglo .)
    LLAVE_DER       reduce using rule 10 (programa -> arreglo .)
    DEFAULT         reduce using rule 10 (programa -> arreglo .)
    CASE            reduce using rule 10 (programa -> arreglo .)
    RETURN          reduce using rule 10 (programa -> arreglo .)


state 12

    (11) programa -> slice .

    $end            reduce using rule 11 (programa -> slice .)
    LLAVE_DER       reduce using rule 11 (programa -> slice .)
    DEFAULT         reduce using rule 11 (programa -> slice .)
    CASE            reduce using rule 11 (programa -> slice .)
    RETURN          reduce using rule 11 (programa -> slice .)


state 13

    (12) programa -> capslice .

    $end            reduce using rule 12 (programa -> capslice .)
    LLAVE_DER       reduce using rule 12 (programa -> capslice .)
    DEFAULT         reduce using rule 12 (programa -> capslice .)
    CASE            reduce using rule 12 (programa -> capslice .)
    RETURN          reduce using rule 12 (programa -> capslice .)


state 14

    (13) programa -> switch .

    $end            reduce using rule 13 (programa -> switch .)
    LLAVE_DER       reduce using rule 13 (programa -> switch .)
    DEFAULT         reduce using rule 13 (programa -> switch .)
    CASE            reduce using rule 13 (programa -> switch .)
    RETURN          reduce using rule 13 (programa -> switch .)


state 15

    (14) programa -> map .

    $end            reduce using rule 14 (programa -> map .)
    LLAVE_DER       reduce using rule 14 (programa -> map .)
    DEFAULT         reduce using rule 14 (programa -> map .)
    CASE            reduce using rule 14 (programa -> map .)
    RETURN          reduce using rule 14 (programa -> map .)


state 16

    (15) programa -> asignar_valor_map .

    $end            reduce using rule 15 (programa -> asignar_valor_map .)
    LLAVE_DER       reduce using rule 15 (programa -> asignar_valor_map .)
    DEFAULT         reduce using rule 15 (programa -> asignar_valor_map .)
    CASE            reduce using rule 15 (programa -> asignar_valor_map .)
    RETURN          reduce using rule 15 (programa -> asignar_valor_map .)


state 17

    (16) programa -> eliminar_valor_map .

    $end            reduce using rule 16 (programa -> eliminar_valor_map .)
    LLAVE_DER       reduce using rule 16 (programa -> eliminar_valor_map .)
    DEFAULT         reduce using rule 16 (programa -> eliminar_valor_map .)
    CASE            reduce using rule 16 (programa -> eliminar_valor_map .)
    RETURN          reduce using rule 16 (programa -> eliminar_valor_map .)


state 18

    (17) programa -> obtener_valor_map .

    $end            reduce using rule 17 (programa -> obtener_valor_map .)
    LLAVE_DER       reduce using rule 17 (programa -> obtener_valor_map .)
    DEFAULT         reduce using rule 17 (programa -> obtener_valor_map .)
    CASE            reduce using rule 17 (programa -> obtener_valor_map .)
    RETURN          reduce using rule 17 (programa -> obtener_valor_map .)


state 19

    (18) programa -> funcion .

    $end            reduce using rule 18 (programa -> funcion .)
    LLAVE_DER       reduce using rule 18 (programa -> funcion .)
    DEFAULT         reduce using rule 18 (programa -> funcion .)
    CASE            reduce using rule 18 (programa -> funcion .)
    RETURN          reduce using rule 18 (programa -> funcion .)


state 20

    (19) programa -> cadenabool .

    $end            reduce using rule 19 (programa -> cadenabool .)
    LLAVE_DER       reduce using rule 19 (programa -> cadenabool .)
    DEFAULT         reduce using rule 19 (programa -> cadenabool .)
    CASE            reduce using rule 19 (programa -> cadenabool .)
    RETURN          reduce using rule 19 (programa -> cadenabool .)


state 21

    (20) programa -> enterocadena .

    $end            reduce using rule 20 (programa -> enterocadena .)
    LLAVE_DER       reduce using rule 20 (programa -> enterocadena .)
    DEFAULT         reduce using rule 20 (programa -> enterocadena .)
    CASE            reduce using rule 20 (programa -> enterocadena .)
    RETURN          reduce using rule 20 (programa -> enterocadena .)


state 22

    (21) programa -> cadenaentero .

    $end            reduce using rule 21 (programa -> cadenaentero .)
    LLAVE_DER       reduce using rule 21 (programa -> cadenaentero .)
    DEFAULT         reduce using rule 21 (programa -> cadenaentero .)
    CASE            reduce using rule 21 (programa -> cadenaentero .)
    RETURN          reduce using rule 21 (programa -> cadenaentero .)


state 23

    (22) programa -> flotantecadena .

    $end            reduce using rule 22 (programa -> flotantecadena .)
    LLAVE_DER       reduce using rule 22 (programa -> flotantecadena .)
    DEFAULT         reduce using rule 22 (programa -> flotantecadena .)
    CASE            reduce using rule 22 (programa -> flotantecadena .)
    RETURN          reduce using rule 22 (programa -> flotantecadena .)


state 24

    (23) programa -> cadenaflotante .

    $end            reduce using rule 23 (programa -> cadenaflotante .)
    LLAVE_DER       reduce using rule 23 (programa -> cadenaflotante .)
    DEFAULT         reduce using rule 23 (programa -> cadenaflotante .)
    CASE            reduce using rule 23 (programa -> cadenaflotante .)
    RETURN          reduce using rule 23 (programa -> cadenaflotante .)


state 25

    (24) programa -> seman_operacion .

    $end            reduce using rule 24 (programa -> seman_operacion .)
    LLAVE_DER       reduce using rule 24 (programa -> seman_operacion .)
    DEFAULT         reduce using rule 24 (programa -> seman_operacion .)
    CASE            reduce using rule 24 (programa -> seman_operacion .)
    RETURN          reduce using rule 24 (programa -> seman_operacion .)


state 26

    (51) expression -> term .
    (52) term -> term . MULTIPLICADOR factor
    (53) term -> term . DIVISOR factor
    (54) term -> term . MOD_DIVISION factor

    MAS             reduce using rule 51 (expression -> term .)
    MENOS           reduce using rule 51 (expression -> term .)
    $end            reduce using rule 51 (expression -> term .)
    PARENT_DER      reduce using rule 51 (expression -> term .)
    LLAVE_DER       reduce using rule 51 (expression -> term .)
    DEFAULT         reduce using rule 51 (expression -> term .)
    CASE            reduce using rule 51 (expression -> term .)
    RETURN          reduce using rule 51 (expression -> term .)
    MULTIPLICADOR   shift and go to state 43
    DIVISOR         shift and go to state 44
    MOD_DIVISION    shift and go to state 45


state 27

    (25) impresion -> FMT . PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (26) impresion -> FMT . PUNTO PRINTF PARENT_IZQ empty PARENT_DER
    (27) impresion -> FMT . PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (28) impresion -> FMT . PUNTO PRINTLN PARENT_IZQ empty PARENT_DER

    PUNTO           shift and go to state 46


state 28

    (66) factor -> PARENT_IZQ . expression PARENT_DER
    (49) expression -> . expression MAS term
    (50) expression -> . expression MENOS term
    (51) expression -> . term
    (52) term -> . term MULTIPLICADOR factor
    (53) term -> . term DIVISOR factor
    (54) term -> . term MOD_DIVISION factor
    (55) term -> . factor
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 48
    ID              shift and go to state 49
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    expression                     shift and go to state 47
    term                           shift and go to state 26
    factor                         shift and go to state 32

state 29

    (65) factor -> CADENA .

    MULTIPLICADOR   reduce using rule 65 (factor -> CADENA .)
    DIVISOR         reduce using rule 65 (factor -> CADENA .)
    MOD_DIVISION    reduce using rule 65 (factor -> CADENA .)
    MAS             reduce using rule 65 (factor -> CADENA .)
    MENOS           reduce using rule 65 (factor -> CADENA .)
    $end            reduce using rule 65 (factor -> CADENA .)
    PARENT_DER      reduce using rule 65 (factor -> CADENA .)
    IGUALDAD        reduce using rule 65 (factor -> CADENA .)
    MAYOR           reduce using rule 65 (factor -> CADENA .)
    MENOR           reduce using rule 65 (factor -> CADENA .)
    MAYOR_IGU       reduce using rule 65 (factor -> CADENA .)
    MENOR_IGU       reduce using rule 65 (factor -> CADENA .)
    DESIGUALDAD     reduce using rule 65 (factor -> CADENA .)
    LLAVE_DER       reduce using rule 65 (factor -> CADENA .)
    DEFAULT         reduce using rule 65 (factor -> CADENA .)
    CASE            reduce using rule 65 (factor -> CADENA .)
    RETURN          reduce using rule 65 (factor -> CADENA .)
    LLAVE_IZQ       reduce using rule 65 (factor -> CADENA .)
    FIN_SENTENCIA   reduce using rule 65 (factor -> CADENA .)
    DOS_PUNTOS      reduce using rule 65 (factor -> CADENA .)
    COMA            reduce using rule 65 (factor -> CADENA .)


state 30

    (31) companum -> NUMERO . comparacion NUMERO
    (95) seman_operacion -> NUMERO . MAS NUMERO
    (96) seman_operacion -> NUMERO . MENOS NUMERO
    (97) seman_operacion -> NUMERO . MULTIPLICADOR NUMERO
    (98) seman_operacion -> NUMERO . DIVISOR NUMERO
    (99) seman_operacion -> NUMERO . MOD_DIVISION NUMERO
    (104) seman_operacion -> NUMERO . MAS FLOAT
    (105) seman_operacion -> NUMERO . MENOS FLOAT
    (106) seman_operacion -> NUMERO . MULTIPLICADOR FLOAT
    (107) seman_operacion -> NUMERO . DIVISOR FLOAT
    (63) factor -> NUMERO .
    (57) comparacion -> . IGUALDAD
    (58) comparacion -> . MAYOR
    (59) comparacion -> . MENOR
    (60) comparacion -> . MAYOR_IGU
    (61) comparacion -> . MENOR_IGU
    (62) comparacion -> . DESIGUALDAD

  ! shift/reduce conflict for MULTIPLICADOR resolved as shift
  ! shift/reduce conflict for DIVISOR resolved as shift
  ! shift/reduce conflict for MOD_DIVISION resolved as shift
  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    MAS             shift and go to state 51
    MENOS           shift and go to state 52
    MULTIPLICADOR   shift and go to state 53
    DIVISOR         shift and go to state 54
    MOD_DIVISION    shift and go to state 55
    $end            reduce using rule 63 (factor -> NUMERO .)
    LLAVE_DER       reduce using rule 63 (factor -> NUMERO .)
    DEFAULT         reduce using rule 63 (factor -> NUMERO .)
    CASE            reduce using rule 63 (factor -> NUMERO .)
    RETURN          reduce using rule 63 (factor -> NUMERO .)
    IGUALDAD        shift and go to state 56
    MAYOR           shift and go to state 57
    MENOR           shift and go to state 58
    MAYOR_IGU       shift and go to state 59
    MENOR_IGU       shift and go to state 60
    DESIGUALDAD     shift and go to state 61

  ! MULTIPLICADOR   [ reduce using rule 63 (factor -> NUMERO .) ]
  ! DIVISOR         [ reduce using rule 63 (factor -> NUMERO .) ]
  ! MOD_DIVISION    [ reduce using rule 63 (factor -> NUMERO .) ]
  ! MAS             [ reduce using rule 63 (factor -> NUMERO .) ]
  ! MENOS           [ reduce using rule 63 (factor -> NUMERO .) ]

    comparacion                    shift and go to state 50

state 31

    (56) sentencia -> IF . factor comparacion factor LLAVE_IZQ programa LLAVE_DER
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 48
    ID              shift and go to state 49
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    factor                         shift and go to state 62

state 32

    (55) term -> factor .

    MULTIPLICADOR   reduce using rule 55 (term -> factor .)
    DIVISOR         reduce using rule 55 (term -> factor .)
    MOD_DIVISION    reduce using rule 55 (term -> factor .)
    MAS             reduce using rule 55 (term -> factor .)
    MENOS           reduce using rule 55 (term -> factor .)
    $end            reduce using rule 55 (term -> factor .)
    PARENT_DER      reduce using rule 55 (term -> factor .)
    LLAVE_DER       reduce using rule 55 (term -> factor .)
    DEFAULT         reduce using rule 55 (term -> factor .)
    CASE            reduce using rule 55 (term -> factor .)
    RETURN          reduce using rule 55 (term -> factor .)


state 33

    (33) asignacion -> ID . ASIGNACION factor
    (29) longvariable -> ID . PARENT_IZQ CADENA PARENT_DER
    (30) longvariable -> ID . PARENT_IZQ ID PARENT_DER
    (32) compaid -> ID . comparacion ID
    (40) arreglo -> ID . ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato
    (41) arreglo -> ID . ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (46) slice -> ID . ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (47) slice -> ID . ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA NUMERO PARENT_DER
    (48) capslice -> ID . PARENT_IZQ ID PARENT_DER
    (74) map -> ID . ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER
    (75) map -> ID . ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (87) asignar_valor_map -> ID . CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor
    (89) obtener_valor_map -> ID . CORCHETE_IZQ valor CORCHETE_DER
    (64) factor -> ID .
    (57) comparacion -> . IGUALDAD
    (58) comparacion -> . MAYOR
    (59) comparacion -> . MENOR
    (60) comparacion -> . MAYOR_IGU
    (61) comparacion -> . MENOR_IGU
    (62) comparacion -> . DESIGUALDAD

    ASIGNACION      shift and go to state 63
    PARENT_IZQ      shift and go to state 64
    CORCHETE_IZQ    shift and go to state 66
    MULTIPLICADOR   reduce using rule 64 (factor -> ID .)
    DIVISOR         reduce using rule 64 (factor -> ID .)
    MOD_DIVISION    reduce using rule 64 (factor -> ID .)
    MAS             reduce using rule 64 (factor -> ID .)
    MENOS           reduce using rule 64 (factor -> ID .)
    $end            reduce using rule 64 (factor -> ID .)
    LLAVE_DER       reduce using rule 64 (factor -> ID .)
    DEFAULT         reduce using rule 64 (factor -> ID .)
    CASE            reduce using rule 64 (factor -> ID .)
    RETURN          reduce using rule 64 (factor -> ID .)
    IGUALDAD        shift and go to state 56
    MAYOR           shift and go to state 57
    MENOR           shift and go to state 58
    MAYOR_IGU       shift and go to state 59
    MENOR_IGU       shift and go to state 60
    DESIGUALDAD     shift and go to state 61

    comparacion                    shift and go to state 65

state 34

    (34) asignacion -> VAR . ID tipo_dato ASIGNACION factor
    (35) asignacion -> VAR . ID COMA ID tipo_dato ASIGNACION factor COMA factor
    (73) map -> VAR . ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER

    ID              shift and go to state 67


state 35

    (112) boolcadena -> STRCONV . PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER
    (113) cadenabool -> STRCONV . PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER
    (116) enterocadena -> STRCONV . PUNTO FORMATINT PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (117) cadenaentero -> STRCONV . PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER
    (114) flotantecadena -> STRCONV . PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER
    (115) cadenaflotante -> STRCONV . PUNTO PARSEFLOAT PARENT_IZQ FLOAT COMA NUMERO PARENT_DER

    PUNTO           shift and go to state 68


state 36

    (36) sentenciafor -> FOR . ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER

    ID              shift and go to state 69


state 37

    (67) switch -> SWITCH . ID LLAVE_IZQ cases LLAVE_DER

    ID              shift and go to state 70


state 38

    (88) eliminar_valor_map -> DELETE . PARENT_IZQ ID COMA valor PARENT_DER

    PARENT_IZQ      shift and go to state 71


state 39

    (90) funcion -> FUNC . ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (91) funcion -> FUNC . ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER

    ID              shift and go to state 72


state 40

    (100) seman_operacion -> FLOAT . MAS NUMERO
    (101) seman_operacion -> FLOAT . MENOS NUMERO
    (102) seman_operacion -> FLOAT . MULTIPLICADOR NUMERO
    (103) seman_operacion -> FLOAT . DIVISOR NUMERO
    (108) seman_operacion -> FLOAT . MAS FLOAT
    (109) seman_operacion -> FLOAT . MENOS FLOAT
    (110) seman_operacion -> FLOAT . MULTIPLICADOR FLOAT
    (111) seman_operacion -> FLOAT . DIVISOR FLOAT

    MAS             shift and go to state 73
    MENOS           shift and go to state 74
    MULTIPLICADOR   shift and go to state 75
    DIVISOR         shift and go to state 76


state 41

    (49) expression -> expression MAS . term
    (52) term -> . term MULTIPLICADOR factor
    (53) term -> . term DIVISOR factor
    (54) term -> . term MOD_DIVISION factor
    (55) term -> . factor
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 48
    ID              shift and go to state 49
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    term                           shift and go to state 77
    factor                         shift and go to state 32

state 42

    (50) expression -> expression MENOS . term
    (52) term -> . term MULTIPLICADOR factor
    (53) term -> . term DIVISOR factor
    (54) term -> . term MOD_DIVISION factor
    (55) term -> . factor
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 48
    ID              shift and go to state 49
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    term                           shift and go to state 78
    factor                         shift and go to state 32

state 43

    (52) term -> term MULTIPLICADOR . factor
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 48
    ID              shift and go to state 49
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    factor                         shift and go to state 79

state 44

    (53) term -> term DIVISOR . factor
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 48
    ID              shift and go to state 49
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    factor                         shift and go to state 80

state 45

    (54) term -> term MOD_DIVISION . factor
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 48
    ID              shift and go to state 49
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    factor                         shift and go to state 81

state 46

    (25) impresion -> FMT PUNTO . PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (26) impresion -> FMT PUNTO . PRINTF PARENT_IZQ empty PARENT_DER
    (27) impresion -> FMT PUNTO . PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (28) impresion -> FMT PUNTO . PRINTLN PARENT_IZQ empty PARENT_DER

    PRINTF          shift and go to state 82
    PRINTLN         shift and go to state 83


state 47

    (66) factor -> PARENT_IZQ expression . PARENT_DER
    (49) expression -> expression . MAS term
    (50) expression -> expression . MENOS term

    PARENT_DER      shift and go to state 84
    MAS             shift and go to state 41
    MENOS           shift and go to state 42


state 48

    (63) factor -> NUMERO .

    MULTIPLICADOR   reduce using rule 63 (factor -> NUMERO .)
    DIVISOR         reduce using rule 63 (factor -> NUMERO .)
    MOD_DIVISION    reduce using rule 63 (factor -> NUMERO .)
    PARENT_DER      reduce using rule 63 (factor -> NUMERO .)
    MAS             reduce using rule 63 (factor -> NUMERO .)
    MENOS           reduce using rule 63 (factor -> NUMERO .)
    IGUALDAD        reduce using rule 63 (factor -> NUMERO .)
    MAYOR           reduce using rule 63 (factor -> NUMERO .)
    MENOR           reduce using rule 63 (factor -> NUMERO .)
    MAYOR_IGU       reduce using rule 63 (factor -> NUMERO .)
    MENOR_IGU       reduce using rule 63 (factor -> NUMERO .)
    DESIGUALDAD     reduce using rule 63 (factor -> NUMERO .)
    $end            reduce using rule 63 (factor -> NUMERO .)
    LLAVE_DER       reduce using rule 63 (factor -> NUMERO .)
    DEFAULT         reduce using rule 63 (factor -> NUMERO .)
    CASE            reduce using rule 63 (factor -> NUMERO .)
    RETURN          reduce using rule 63 (factor -> NUMERO .)
    LLAVE_IZQ       reduce using rule 63 (factor -> NUMERO .)
    FIN_SENTENCIA   reduce using rule 63 (factor -> NUMERO .)
    DOS_PUNTOS      reduce using rule 63 (factor -> NUMERO .)
    COMA            reduce using rule 63 (factor -> NUMERO .)


state 49

    (64) factor -> ID .

    MULTIPLICADOR   reduce using rule 64 (factor -> ID .)
    DIVISOR         reduce using rule 64 (factor -> ID .)
    MOD_DIVISION    reduce using rule 64 (factor -> ID .)
    PARENT_DER      reduce using rule 64 (factor -> ID .)
    MAS             reduce using rule 64 (factor -> ID .)
    MENOS           reduce using rule 64 (factor -> ID .)
    IGUALDAD        reduce using rule 64 (factor -> ID .)
    MAYOR           reduce using rule 64 (factor -> ID .)
    MENOR           reduce using rule 64 (factor -> ID .)
    MAYOR_IGU       reduce using rule 64 (factor -> ID .)
    MENOR_IGU       reduce using rule 64 (factor -> ID .)
    DESIGUALDAD     reduce using rule 64 (factor -> ID .)
    $end            reduce using rule 64 (factor -> ID .)
    LLAVE_DER       reduce using rule 64 (factor -> ID .)
    DEFAULT         reduce using rule 64 (factor -> ID .)
    CASE            reduce using rule 64 (factor -> ID .)
    RETURN          reduce using rule 64 (factor -> ID .)
    LLAVE_IZQ       reduce using rule 64 (factor -> ID .)
    FIN_SENTENCIA   reduce using rule 64 (factor -> ID .)
    DOS_PUNTOS      reduce using rule 64 (factor -> ID .)
    COMA            reduce using rule 64 (factor -> ID .)


state 50

    (31) companum -> NUMERO comparacion . NUMERO

    NUMERO          shift and go to state 85


state 51

    (95) seman_operacion -> NUMERO MAS . NUMERO
    (104) seman_operacion -> NUMERO MAS . FLOAT

    NUMERO          shift and go to state 86
    FLOAT           shift and go to state 87


state 52

    (96) seman_operacion -> NUMERO MENOS . NUMERO
    (105) seman_operacion -> NUMERO MENOS . FLOAT

    NUMERO          shift and go to state 88
    FLOAT           shift and go to state 89


state 53

    (97) seman_operacion -> NUMERO MULTIPLICADOR . NUMERO
    (106) seman_operacion -> NUMERO MULTIPLICADOR . FLOAT

    NUMERO          shift and go to state 90
    FLOAT           shift and go to state 91


state 54

    (98) seman_operacion -> NUMERO DIVISOR . NUMERO
    (107) seman_operacion -> NUMERO DIVISOR . FLOAT

    NUMERO          shift and go to state 92
    FLOAT           shift and go to state 93


state 55

    (99) seman_operacion -> NUMERO MOD_DIVISION . NUMERO

    NUMERO          shift and go to state 94


state 56

    (57) comparacion -> IGUALDAD .

    NUMERO          reduce using rule 57 (comparacion -> IGUALDAD .)
    ID              reduce using rule 57 (comparacion -> IGUALDAD .)
    CADENA          reduce using rule 57 (comparacion -> IGUALDAD .)
    PARENT_IZQ      reduce using rule 57 (comparacion -> IGUALDAD .)


state 57

    (58) comparacion -> MAYOR .

    NUMERO          reduce using rule 58 (comparacion -> MAYOR .)
    ID              reduce using rule 58 (comparacion -> MAYOR .)
    CADENA          reduce using rule 58 (comparacion -> MAYOR .)
    PARENT_IZQ      reduce using rule 58 (comparacion -> MAYOR .)


state 58

    (59) comparacion -> MENOR .

    NUMERO          reduce using rule 59 (comparacion -> MENOR .)
    ID              reduce using rule 59 (comparacion -> MENOR .)
    CADENA          reduce using rule 59 (comparacion -> MENOR .)
    PARENT_IZQ      reduce using rule 59 (comparacion -> MENOR .)


state 59

    (60) comparacion -> MAYOR_IGU .

    NUMERO          reduce using rule 60 (comparacion -> MAYOR_IGU .)
    ID              reduce using rule 60 (comparacion -> MAYOR_IGU .)
    CADENA          reduce using rule 60 (comparacion -> MAYOR_IGU .)
    PARENT_IZQ      reduce using rule 60 (comparacion -> MAYOR_IGU .)


state 60

    (61) comparacion -> MENOR_IGU .

    NUMERO          reduce using rule 61 (comparacion -> MENOR_IGU .)
    ID              reduce using rule 61 (comparacion -> MENOR_IGU .)
    CADENA          reduce using rule 61 (comparacion -> MENOR_IGU .)
    PARENT_IZQ      reduce using rule 61 (comparacion -> MENOR_IGU .)


state 61

    (62) comparacion -> DESIGUALDAD .

    NUMERO          reduce using rule 62 (comparacion -> DESIGUALDAD .)
    ID              reduce using rule 62 (comparacion -> DESIGUALDAD .)
    CADENA          reduce using rule 62 (comparacion -> DESIGUALDAD .)
    PARENT_IZQ      reduce using rule 62 (comparacion -> DESIGUALDAD .)


state 62

    (56) sentencia -> IF factor . comparacion factor LLAVE_IZQ programa LLAVE_DER
    (57) comparacion -> . IGUALDAD
    (58) comparacion -> . MAYOR
    (59) comparacion -> . MENOR
    (60) comparacion -> . MAYOR_IGU
    (61) comparacion -> . MENOR_IGU
    (62) comparacion -> . DESIGUALDAD

    IGUALDAD        shift and go to state 56
    MAYOR           shift and go to state 57
    MENOR           shift and go to state 58
    MAYOR_IGU       shift and go to state 59
    MENOR_IGU       shift and go to state 60
    DESIGUALDAD     shift and go to state 61

    comparacion                    shift and go to state 95

state 63

    (33) asignacion -> ID ASIGNACION . factor
    (40) arreglo -> ID ASIGNACION . CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato
    (41) arreglo -> ID ASIGNACION . CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (46) slice -> ID ASIGNACION . MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (47) slice -> ID ASIGNACION . ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA NUMERO PARENT_DER
    (74) map -> ID ASIGNACION . MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER
    (75) map -> ID ASIGNACION . MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    CORCHETE_IZQ    shift and go to state 98
    MAKE            shift and go to state 99
    ID              shift and go to state 96
    MAP             shift and go to state 100
    NUMERO          shift and go to state 48
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    factor                         shift and go to state 97

state 64

    (29) longvariable -> ID PARENT_IZQ . CADENA PARENT_DER
    (30) longvariable -> ID PARENT_IZQ . ID PARENT_DER
    (48) capslice -> ID PARENT_IZQ . ID PARENT_DER

    CADENA          shift and go to state 102
    ID              shift and go to state 101


state 65

    (32) compaid -> ID comparacion . ID

    ID              shift and go to state 103


state 66

    (87) asignar_valor_map -> ID CORCHETE_IZQ . valor CORCHETE_DER ASIGNACION valor
    (89) obtener_valor_map -> ID CORCHETE_IZQ . valor CORCHETE_DER
    (85) valor -> . CADENA
    (86) valor -> . NUMERO

    CADENA          shift and go to state 105
    NUMERO          shift and go to state 106

    valor                          shift and go to state 104

state 67

    (34) asignacion -> VAR ID . tipo_dato ASIGNACION factor
    (35) asignacion -> VAR ID . COMA ID tipo_dato ASIGNACION factor COMA factor
    (73) map -> VAR ID . MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (76) tipo_dato -> . INT
    (77) tipo_dato -> . STRING
    (78) tipo_dato -> . INT64
    (79) tipo_dato -> . FLOAT32
    (80) tipo_dato -> . FLOAT64
    (81) tipo_dato -> . INT32

    COMA            shift and go to state 108
    MAP             shift and go to state 109
    INT             shift and go to state 110
    STRING          shift and go to state 111
    INT64           shift and go to state 112
    FLOAT32         shift and go to state 113
    FLOAT64         shift and go to state 114
    INT32           shift and go to state 115

    tipo_dato                      shift and go to state 107

state 68

    (112) boolcadena -> STRCONV PUNTO . FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER
    (113) cadenabool -> STRCONV PUNTO . PARSEBOOL PARENT_IZQ CADENA PARENT_DER
    (116) enterocadena -> STRCONV PUNTO . FORMATINT PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (117) cadenaentero -> STRCONV PUNTO . PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER
    (114) flotantecadena -> STRCONV PUNTO . FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER
    (115) cadenaflotante -> STRCONV PUNTO . PARSEFLOAT PARENT_IZQ FLOAT COMA NUMERO PARENT_DER

    FORMATBOOL      shift and go to state 116
    PARSEBOOL       shift and go to state 117
    FORMATINT       shift and go to state 118
    PARSEINT        shift and go to state 119
    FORMATFLOAT     shift and go to state 120
    PARSEFLOAT      shift and go to state 121


state 69

    (36) sentenciafor -> FOR ID . ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER

    ASIGNACION      shift and go to state 122


state 70

    (67) switch -> SWITCH ID . LLAVE_IZQ cases LLAVE_DER

    LLAVE_IZQ       shift and go to state 123


state 71

    (88) eliminar_valor_map -> DELETE PARENT_IZQ . ID COMA valor PARENT_DER

    ID              shift and go to state 124


state 72

    (90) funcion -> FUNC ID . PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (91) funcion -> FUNC ID . PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER

    PARENT_IZQ      shift and go to state 125


state 73

    (100) seman_operacion -> FLOAT MAS . NUMERO
    (108) seman_operacion -> FLOAT MAS . FLOAT

    NUMERO          shift and go to state 127
    FLOAT           shift and go to state 126


state 74

    (101) seman_operacion -> FLOAT MENOS . NUMERO
    (109) seman_operacion -> FLOAT MENOS . FLOAT

    NUMERO          shift and go to state 129
    FLOAT           shift and go to state 128


state 75

    (102) seman_operacion -> FLOAT MULTIPLICADOR . NUMERO
    (110) seman_operacion -> FLOAT MULTIPLICADOR . FLOAT

    NUMERO          shift and go to state 131
    FLOAT           shift and go to state 130


state 76

    (103) seman_operacion -> FLOAT DIVISOR . NUMERO
    (111) seman_operacion -> FLOAT DIVISOR . FLOAT

    NUMERO          shift and go to state 133
    FLOAT           shift and go to state 132


state 77

    (49) expression -> expression MAS term .
    (52) term -> term . MULTIPLICADOR factor
    (53) term -> term . DIVISOR factor
    (54) term -> term . MOD_DIVISION factor

    MAS             reduce using rule 49 (expression -> expression MAS term .)
    MENOS           reduce using rule 49 (expression -> expression MAS term .)
    $end            reduce using rule 49 (expression -> expression MAS term .)
    PARENT_DER      reduce using rule 49 (expression -> expression MAS term .)
    LLAVE_DER       reduce using rule 49 (expression -> expression MAS term .)
    DEFAULT         reduce using rule 49 (expression -> expression MAS term .)
    CASE            reduce using rule 49 (expression -> expression MAS term .)
    RETURN          reduce using rule 49 (expression -> expression MAS term .)
    MULTIPLICADOR   shift and go to state 43
    DIVISOR         shift and go to state 44
    MOD_DIVISION    shift and go to state 45


state 78

    (50) expression -> expression MENOS term .
    (52) term -> term . MULTIPLICADOR factor
    (53) term -> term . DIVISOR factor
    (54) term -> term . MOD_DIVISION factor

    MAS             reduce using rule 50 (expression -> expression MENOS term .)
    MENOS           reduce using rule 50 (expression -> expression MENOS term .)
    $end            reduce using rule 50 (expression -> expression MENOS term .)
    PARENT_DER      reduce using rule 50 (expression -> expression MENOS term .)
    LLAVE_DER       reduce using rule 50 (expression -> expression MENOS term .)
    DEFAULT         reduce using rule 50 (expression -> expression MENOS term .)
    CASE            reduce using rule 50 (expression -> expression MENOS term .)
    RETURN          reduce using rule 50 (expression -> expression MENOS term .)
    MULTIPLICADOR   shift and go to state 43
    DIVISOR         shift and go to state 44
    MOD_DIVISION    shift and go to state 45


state 79

    (52) term -> term MULTIPLICADOR factor .

    MULTIPLICADOR   reduce using rule 52 (term -> term MULTIPLICADOR factor .)
    DIVISOR         reduce using rule 52 (term -> term MULTIPLICADOR factor .)
    MOD_DIVISION    reduce using rule 52 (term -> term MULTIPLICADOR factor .)
    MAS             reduce using rule 52 (term -> term MULTIPLICADOR factor .)
    MENOS           reduce using rule 52 (term -> term MULTIPLICADOR factor .)
    $end            reduce using rule 52 (term -> term MULTIPLICADOR factor .)
    PARENT_DER      reduce using rule 52 (term -> term MULTIPLICADOR factor .)
    LLAVE_DER       reduce using rule 52 (term -> term MULTIPLICADOR factor .)
    DEFAULT         reduce using rule 52 (term -> term MULTIPLICADOR factor .)
    CASE            reduce using rule 52 (term -> term MULTIPLICADOR factor .)
    RETURN          reduce using rule 52 (term -> term MULTIPLICADOR factor .)


state 80

    (53) term -> term DIVISOR factor .

    MULTIPLICADOR   reduce using rule 53 (term -> term DIVISOR factor .)
    DIVISOR         reduce using rule 53 (term -> term DIVISOR factor .)
    MOD_DIVISION    reduce using rule 53 (term -> term DIVISOR factor .)
    MAS             reduce using rule 53 (term -> term DIVISOR factor .)
    MENOS           reduce using rule 53 (term -> term DIVISOR factor .)
    $end            reduce using rule 53 (term -> term DIVISOR factor .)
    PARENT_DER      reduce using rule 53 (term -> term DIVISOR factor .)
    LLAVE_DER       reduce using rule 53 (term -> term DIVISOR factor .)
    DEFAULT         reduce using rule 53 (term -> term DIVISOR factor .)
    CASE            reduce using rule 53 (term -> term DIVISOR factor .)
    RETURN          reduce using rule 53 (term -> term DIVISOR factor .)


state 81

    (54) term -> term MOD_DIVISION factor .

    MULTIPLICADOR   reduce using rule 54 (term -> term MOD_DIVISION factor .)
    DIVISOR         reduce using rule 54 (term -> term MOD_DIVISION factor .)
    MOD_DIVISION    reduce using rule 54 (term -> term MOD_DIVISION factor .)
    MAS             reduce using rule 54 (term -> term MOD_DIVISION factor .)
    MENOS           reduce using rule 54 (term -> term MOD_DIVISION factor .)
    $end            reduce using rule 54 (term -> term MOD_DIVISION factor .)
    PARENT_DER      reduce using rule 54 (term -> term MOD_DIVISION factor .)
    LLAVE_DER       reduce using rule 54 (term -> term MOD_DIVISION factor .)
    DEFAULT         reduce using rule 54 (term -> term MOD_DIVISION factor .)
    CASE            reduce using rule 54 (term -> term MOD_DIVISION factor .)
    RETURN          reduce using rule 54 (term -> term MOD_DIVISION factor .)


state 82

    (25) impresion -> FMT PUNTO PRINTF . PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (26) impresion -> FMT PUNTO PRINTF . PARENT_IZQ empty PARENT_DER

    PARENT_IZQ      shift and go to state 134


state 83

    (27) impresion -> FMT PUNTO PRINTLN . PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (28) impresion -> FMT PUNTO PRINTLN . PARENT_IZQ empty PARENT_DER

    PARENT_IZQ      shift and go to state 135


state 84

    (66) factor -> PARENT_IZQ expression PARENT_DER .

    MULTIPLICADOR   reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    DIVISOR         reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    MOD_DIVISION    reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    MAS             reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    MENOS           reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    $end            reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    PARENT_DER      reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    IGUALDAD        reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    MAYOR           reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    MENOR           reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    MAYOR_IGU       reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    MENOR_IGU       reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    DESIGUALDAD     reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    LLAVE_DER       reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    DEFAULT         reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    CASE            reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    RETURN          reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    LLAVE_IZQ       reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    FIN_SENTENCIA   reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    DOS_PUNTOS      reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)
    COMA            reduce using rule 66 (factor -> PARENT_IZQ expression PARENT_DER .)


state 85

    (31) companum -> NUMERO comparacion NUMERO .

    $end            reduce using rule 31 (companum -> NUMERO comparacion NUMERO .)
    LLAVE_DER       reduce using rule 31 (companum -> NUMERO comparacion NUMERO .)
    DEFAULT         reduce using rule 31 (companum -> NUMERO comparacion NUMERO .)
    CASE            reduce using rule 31 (companum -> NUMERO comparacion NUMERO .)
    RETURN          reduce using rule 31 (companum -> NUMERO comparacion NUMERO .)


state 86

    (95) seman_operacion -> NUMERO MAS NUMERO .

    $end            reduce using rule 95 (seman_operacion -> NUMERO MAS NUMERO .)
    LLAVE_DER       reduce using rule 95 (seman_operacion -> NUMERO MAS NUMERO .)
    DEFAULT         reduce using rule 95 (seman_operacion -> NUMERO MAS NUMERO .)
    CASE            reduce using rule 95 (seman_operacion -> NUMERO MAS NUMERO .)
    RETURN          reduce using rule 95 (seman_operacion -> NUMERO MAS NUMERO .)


state 87

    (104) seman_operacion -> NUMERO MAS FLOAT .

    $end            reduce using rule 104 (seman_operacion -> NUMERO MAS FLOAT .)
    LLAVE_DER       reduce using rule 104 (seman_operacion -> NUMERO MAS FLOAT .)
    DEFAULT         reduce using rule 104 (seman_operacion -> NUMERO MAS FLOAT .)
    CASE            reduce using rule 104 (seman_operacion -> NUMERO MAS FLOAT .)
    RETURN          reduce using rule 104 (seman_operacion -> NUMERO MAS FLOAT .)


state 88

    (96) seman_operacion -> NUMERO MENOS NUMERO .

    $end            reduce using rule 96 (seman_operacion -> NUMERO MENOS NUMERO .)
    LLAVE_DER       reduce using rule 96 (seman_operacion -> NUMERO MENOS NUMERO .)
    DEFAULT         reduce using rule 96 (seman_operacion -> NUMERO MENOS NUMERO .)
    CASE            reduce using rule 96 (seman_operacion -> NUMERO MENOS NUMERO .)
    RETURN          reduce using rule 96 (seman_operacion -> NUMERO MENOS NUMERO .)


state 89

    (105) seman_operacion -> NUMERO MENOS FLOAT .

    $end            reduce using rule 105 (seman_operacion -> NUMERO MENOS FLOAT .)
    LLAVE_DER       reduce using rule 105 (seman_operacion -> NUMERO MENOS FLOAT .)
    DEFAULT         reduce using rule 105 (seman_operacion -> NUMERO MENOS FLOAT .)
    CASE            reduce using rule 105 (seman_operacion -> NUMERO MENOS FLOAT .)
    RETURN          reduce using rule 105 (seman_operacion -> NUMERO MENOS FLOAT .)


state 90

    (97) seman_operacion -> NUMERO MULTIPLICADOR NUMERO .

    $end            reduce using rule 97 (seman_operacion -> NUMERO MULTIPLICADOR NUMERO .)
    LLAVE_DER       reduce using rule 97 (seman_operacion -> NUMERO MULTIPLICADOR NUMERO .)
    DEFAULT         reduce using rule 97 (seman_operacion -> NUMERO MULTIPLICADOR NUMERO .)
    CASE            reduce using rule 97 (seman_operacion -> NUMERO MULTIPLICADOR NUMERO .)
    RETURN          reduce using rule 97 (seman_operacion -> NUMERO MULTIPLICADOR NUMERO .)


state 91

    (106) seman_operacion -> NUMERO MULTIPLICADOR FLOAT .

    $end            reduce using rule 106 (seman_operacion -> NUMERO MULTIPLICADOR FLOAT .)
    LLAVE_DER       reduce using rule 106 (seman_operacion -> NUMERO MULTIPLICADOR FLOAT .)
    DEFAULT         reduce using rule 106 (seman_operacion -> NUMERO MULTIPLICADOR FLOAT .)
    CASE            reduce using rule 106 (seman_operacion -> NUMERO MULTIPLICADOR FLOAT .)
    RETURN          reduce using rule 106 (seman_operacion -> NUMERO MULTIPLICADOR FLOAT .)


state 92

    (98) seman_operacion -> NUMERO DIVISOR NUMERO .

    $end            reduce using rule 98 (seman_operacion -> NUMERO DIVISOR NUMERO .)
    LLAVE_DER       reduce using rule 98 (seman_operacion -> NUMERO DIVISOR NUMERO .)
    DEFAULT         reduce using rule 98 (seman_operacion -> NUMERO DIVISOR NUMERO .)
    CASE            reduce using rule 98 (seman_operacion -> NUMERO DIVISOR NUMERO .)
    RETURN          reduce using rule 98 (seman_operacion -> NUMERO DIVISOR NUMERO .)


state 93

    (107) seman_operacion -> NUMERO DIVISOR FLOAT .

    $end            reduce using rule 107 (seman_operacion -> NUMERO DIVISOR FLOAT .)
    LLAVE_DER       reduce using rule 107 (seman_operacion -> NUMERO DIVISOR FLOAT .)
    DEFAULT         reduce using rule 107 (seman_operacion -> NUMERO DIVISOR FLOAT .)
    CASE            reduce using rule 107 (seman_operacion -> NUMERO DIVISOR FLOAT .)
    RETURN          reduce using rule 107 (seman_operacion -> NUMERO DIVISOR FLOAT .)


state 94

    (99) seman_operacion -> NUMERO MOD_DIVISION NUMERO .

    $end            reduce using rule 99 (seman_operacion -> NUMERO MOD_DIVISION NUMERO .)
    LLAVE_DER       reduce using rule 99 (seman_operacion -> NUMERO MOD_DIVISION NUMERO .)
    DEFAULT         reduce using rule 99 (seman_operacion -> NUMERO MOD_DIVISION NUMERO .)
    CASE            reduce using rule 99 (seman_operacion -> NUMERO MOD_DIVISION NUMERO .)
    RETURN          reduce using rule 99 (seman_operacion -> NUMERO MOD_DIVISION NUMERO .)


state 95

    (56) sentencia -> IF factor comparacion . factor LLAVE_IZQ programa LLAVE_DER
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 48
    ID              shift and go to state 49
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    factor                         shift and go to state 136

state 96

    (47) slice -> ID ASIGNACION ID . PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA NUMERO PARENT_DER
    (64) factor -> ID .

    PARENT_IZQ      shift and go to state 137
    $end            reduce using rule 64 (factor -> ID .)
    LLAVE_DER       reduce using rule 64 (factor -> ID .)
    DEFAULT         reduce using rule 64 (factor -> ID .)
    CASE            reduce using rule 64 (factor -> ID .)
    RETURN          reduce using rule 64 (factor -> ID .)


state 97

    (33) asignacion -> ID ASIGNACION factor .

    $end            reduce using rule 33 (asignacion -> ID ASIGNACION factor .)
    LLAVE_DER       reduce using rule 33 (asignacion -> ID ASIGNACION factor .)
    DEFAULT         reduce using rule 33 (asignacion -> ID ASIGNACION factor .)
    CASE            reduce using rule 33 (asignacion -> ID ASIGNACION factor .)
    RETURN          reduce using rule 33 (asignacion -> ID ASIGNACION factor .)


state 98

    (40) arreglo -> ID ASIGNACION CORCHETE_IZQ . cantidad CORCHETE_DER tipo_dato
    (41) arreglo -> ID ASIGNACION CORCHETE_IZQ . cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (42) cantidad -> . NUMERO
    (43) cantidad -> . ARRPUNTOS

    NUMERO          shift and go to state 139
    ARRPUNTOS       shift and go to state 140

    cantidad                       shift and go to state 138

state 99

    (46) slice -> ID ASIGNACION MAKE . PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (74) map -> ID ASIGNACION MAKE . PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER

    PARENT_IZQ      shift and go to state 141


state 100

    (75) map -> ID ASIGNACION MAP . CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER

    CORCHETE_IZQ    shift and go to state 142


state 101

    (30) longvariable -> ID PARENT_IZQ ID . PARENT_DER
    (48) capslice -> ID PARENT_IZQ ID . PARENT_DER

    PARENT_DER      shift and go to state 143


state 102

    (29) longvariable -> ID PARENT_IZQ CADENA . PARENT_DER

    PARENT_DER      shift and go to state 144


state 103

    (32) compaid -> ID comparacion ID .

    $end            reduce using rule 32 (compaid -> ID comparacion ID .)
    LLAVE_DER       reduce using rule 32 (compaid -> ID comparacion ID .)
    DEFAULT         reduce using rule 32 (compaid -> ID comparacion ID .)
    CASE            reduce using rule 32 (compaid -> ID comparacion ID .)
    RETURN          reduce using rule 32 (compaid -> ID comparacion ID .)


state 104

    (87) asignar_valor_map -> ID CORCHETE_IZQ valor . CORCHETE_DER ASIGNACION valor
    (89) obtener_valor_map -> ID CORCHETE_IZQ valor . CORCHETE_DER

    CORCHETE_DER    shift and go to state 145


state 105

    (85) valor -> CADENA .

    CORCHETE_DER    reduce using rule 85 (valor -> CADENA .)
    PARENT_DER      reduce using rule 85 (valor -> CADENA .)
    $end            reduce using rule 85 (valor -> CADENA .)
    LLAVE_DER       reduce using rule 85 (valor -> CADENA .)
    DEFAULT         reduce using rule 85 (valor -> CADENA .)
    CASE            reduce using rule 85 (valor -> CADENA .)
    RETURN          reduce using rule 85 (valor -> CADENA .)
    COMA            reduce using rule 85 (valor -> CADENA .)


state 106

    (86) valor -> NUMERO .

    CORCHETE_DER    reduce using rule 86 (valor -> NUMERO .)
    PARENT_DER      reduce using rule 86 (valor -> NUMERO .)
    $end            reduce using rule 86 (valor -> NUMERO .)
    LLAVE_DER       reduce using rule 86 (valor -> NUMERO .)
    DEFAULT         reduce using rule 86 (valor -> NUMERO .)
    CASE            reduce using rule 86 (valor -> NUMERO .)
    RETURN          reduce using rule 86 (valor -> NUMERO .)
    COMA            reduce using rule 86 (valor -> NUMERO .)


state 107

    (34) asignacion -> VAR ID tipo_dato . ASIGNACION factor

    ASIGNACION      shift and go to state 146


state 108

    (35) asignacion -> VAR ID COMA . ID tipo_dato ASIGNACION factor COMA factor

    ID              shift and go to state 147


state 109

    (73) map -> VAR ID MAP . CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER

    CORCHETE_IZQ    shift and go to state 148


state 110

    (76) tipo_dato -> INT .

    ASIGNACION      reduce using rule 76 (tipo_dato -> INT .)
    CORCHETE_DER    reduce using rule 76 (tipo_dato -> INT .)
    COMA            reduce using rule 76 (tipo_dato -> INT .)
    PARENT_DER      reduce using rule 76 (tipo_dato -> INT .)
    LLAVE_IZQ       reduce using rule 76 (tipo_dato -> INT .)
    $end            reduce using rule 76 (tipo_dato -> INT .)
    LLAVE_DER       reduce using rule 76 (tipo_dato -> INT .)
    DEFAULT         reduce using rule 76 (tipo_dato -> INT .)
    CASE            reduce using rule 76 (tipo_dato -> INT .)
    RETURN          reduce using rule 76 (tipo_dato -> INT .)


state 111

    (77) tipo_dato -> STRING .

    ASIGNACION      reduce using rule 77 (tipo_dato -> STRING .)
    CORCHETE_DER    reduce using rule 77 (tipo_dato -> STRING .)
    COMA            reduce using rule 77 (tipo_dato -> STRING .)
    PARENT_DER      reduce using rule 77 (tipo_dato -> STRING .)
    LLAVE_IZQ       reduce using rule 77 (tipo_dato -> STRING .)
    $end            reduce using rule 77 (tipo_dato -> STRING .)
    LLAVE_DER       reduce using rule 77 (tipo_dato -> STRING .)
    DEFAULT         reduce using rule 77 (tipo_dato -> STRING .)
    CASE            reduce using rule 77 (tipo_dato -> STRING .)
    RETURN          reduce using rule 77 (tipo_dato -> STRING .)


state 112

    (78) tipo_dato -> INT64 .

    ASIGNACION      reduce using rule 78 (tipo_dato -> INT64 .)
    CORCHETE_DER    reduce using rule 78 (tipo_dato -> INT64 .)
    COMA            reduce using rule 78 (tipo_dato -> INT64 .)
    PARENT_DER      reduce using rule 78 (tipo_dato -> INT64 .)
    LLAVE_IZQ       reduce using rule 78 (tipo_dato -> INT64 .)
    $end            reduce using rule 78 (tipo_dato -> INT64 .)
    LLAVE_DER       reduce using rule 78 (tipo_dato -> INT64 .)
    DEFAULT         reduce using rule 78 (tipo_dato -> INT64 .)
    CASE            reduce using rule 78 (tipo_dato -> INT64 .)
    RETURN          reduce using rule 78 (tipo_dato -> INT64 .)


state 113

    (79) tipo_dato -> FLOAT32 .

    ASIGNACION      reduce using rule 79 (tipo_dato -> FLOAT32 .)
    CORCHETE_DER    reduce using rule 79 (tipo_dato -> FLOAT32 .)
    COMA            reduce using rule 79 (tipo_dato -> FLOAT32 .)
    PARENT_DER      reduce using rule 79 (tipo_dato -> FLOAT32 .)
    LLAVE_IZQ       reduce using rule 79 (tipo_dato -> FLOAT32 .)
    $end            reduce using rule 79 (tipo_dato -> FLOAT32 .)
    LLAVE_DER       reduce using rule 79 (tipo_dato -> FLOAT32 .)
    DEFAULT         reduce using rule 79 (tipo_dato -> FLOAT32 .)
    CASE            reduce using rule 79 (tipo_dato -> FLOAT32 .)
    RETURN          reduce using rule 79 (tipo_dato -> FLOAT32 .)


state 114

    (80) tipo_dato -> FLOAT64 .

    ASIGNACION      reduce using rule 80 (tipo_dato -> FLOAT64 .)
    CORCHETE_DER    reduce using rule 80 (tipo_dato -> FLOAT64 .)
    COMA            reduce using rule 80 (tipo_dato -> FLOAT64 .)
    PARENT_DER      reduce using rule 80 (tipo_dato -> FLOAT64 .)
    LLAVE_IZQ       reduce using rule 80 (tipo_dato -> FLOAT64 .)
    $end            reduce using rule 80 (tipo_dato -> FLOAT64 .)
    LLAVE_DER       reduce using rule 80 (tipo_dato -> FLOAT64 .)
    DEFAULT         reduce using rule 80 (tipo_dato -> FLOAT64 .)
    CASE            reduce using rule 80 (tipo_dato -> FLOAT64 .)
    RETURN          reduce using rule 80 (tipo_dato -> FLOAT64 .)


state 115

    (81) tipo_dato -> INT32 .

    ASIGNACION      reduce using rule 81 (tipo_dato -> INT32 .)
    CORCHETE_DER    reduce using rule 81 (tipo_dato -> INT32 .)
    COMA            reduce using rule 81 (tipo_dato -> INT32 .)
    PARENT_DER      reduce using rule 81 (tipo_dato -> INT32 .)
    LLAVE_IZQ       reduce using rule 81 (tipo_dato -> INT32 .)
    $end            reduce using rule 81 (tipo_dato -> INT32 .)
    LLAVE_DER       reduce using rule 81 (tipo_dato -> INT32 .)
    DEFAULT         reduce using rule 81 (tipo_dato -> INT32 .)
    CASE            reduce using rule 81 (tipo_dato -> INT32 .)
    RETURN          reduce using rule 81 (tipo_dato -> INT32 .)


state 116

    (112) boolcadena -> STRCONV PUNTO FORMATBOOL . PARENT_IZQ BOOLEAN PARENT_DER

    PARENT_IZQ      shift and go to state 149


state 117

    (113) cadenabool -> STRCONV PUNTO PARSEBOOL . PARENT_IZQ CADENA PARENT_DER

    PARENT_IZQ      shift and go to state 150


state 118

    (116) enterocadena -> STRCONV PUNTO FORMATINT . PARENT_IZQ CADENA COMA NUMERO PARENT_DER

    PARENT_IZQ      shift and go to state 151


state 119

    (117) cadenaentero -> STRCONV PUNTO PARSEINT . PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER

    PARENT_IZQ      shift and go to state 152


state 120

    (114) flotantecadena -> STRCONV PUNTO FORMATFLOAT . PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER

    PARENT_IZQ      shift and go to state 153


state 121

    (115) cadenaflotante -> STRCONV PUNTO PARSEFLOAT . PARENT_IZQ FLOAT COMA NUMERO PARENT_DER

    PARENT_IZQ      shift and go to state 154


state 122

    (36) sentenciafor -> FOR ID ASIGNACION . factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 48
    ID              shift and go to state 49
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    factor                         shift and go to state 155

state 123

    (67) switch -> SWITCH ID LLAVE_IZQ . cases LLAVE_DER
    (68) cases -> . case
    (69) cases -> . case default
    (70) cases -> . case cases
    (71) case -> . CASE factor DOS_PUNTOS programa

    CASE            shift and go to state 158

    cases                          shift and go to state 156
    case                           shift and go to state 157

state 124

    (88) eliminar_valor_map -> DELETE PARENT_IZQ ID . COMA valor PARENT_DER

    COMA            shift and go to state 159


state 125

    (90) funcion -> FUNC ID PARENT_IZQ . argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (91) funcion -> FUNC ID PARENT_IZQ . argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (92) argumentos -> . ID tipo_dato
    (93) argumentos -> . ID tipo_dato COMA argumentos

    ID              shift and go to state 160

    argumentos                     shift and go to state 161

state 126

    (108) seman_operacion -> FLOAT MAS FLOAT .

    $end            reduce using rule 108 (seman_operacion -> FLOAT MAS FLOAT .)
    LLAVE_DER       reduce using rule 108 (seman_operacion -> FLOAT MAS FLOAT .)
    DEFAULT         reduce using rule 108 (seman_operacion -> FLOAT MAS FLOAT .)
    CASE            reduce using rule 108 (seman_operacion -> FLOAT MAS FLOAT .)
    RETURN          reduce using rule 108 (seman_operacion -> FLOAT MAS FLOAT .)


state 127

    (100) seman_operacion -> FLOAT MAS NUMERO .

    $end            reduce using rule 100 (seman_operacion -> FLOAT MAS NUMERO .)
    LLAVE_DER       reduce using rule 100 (seman_operacion -> FLOAT MAS NUMERO .)
    DEFAULT         reduce using rule 100 (seman_operacion -> FLOAT MAS NUMERO .)
    CASE            reduce using rule 100 (seman_operacion -> FLOAT MAS NUMERO .)
    RETURN          reduce using rule 100 (seman_operacion -> FLOAT MAS NUMERO .)


state 128

    (109) seman_operacion -> FLOAT MENOS FLOAT .

    $end            reduce using rule 109 (seman_operacion -> FLOAT MENOS FLOAT .)
    LLAVE_DER       reduce using rule 109 (seman_operacion -> FLOAT MENOS FLOAT .)
    DEFAULT         reduce using rule 109 (seman_operacion -> FLOAT MENOS FLOAT .)
    CASE            reduce using rule 109 (seman_operacion -> FLOAT MENOS FLOAT .)
    RETURN          reduce using rule 109 (seman_operacion -> FLOAT MENOS FLOAT .)


state 129

    (101) seman_operacion -> FLOAT MENOS NUMERO .

    $end            reduce using rule 101 (seman_operacion -> FLOAT MENOS NUMERO .)
    LLAVE_DER       reduce using rule 101 (seman_operacion -> FLOAT MENOS NUMERO .)
    DEFAULT         reduce using rule 101 (seman_operacion -> FLOAT MENOS NUMERO .)
    CASE            reduce using rule 101 (seman_operacion -> FLOAT MENOS NUMERO .)
    RETURN          reduce using rule 101 (seman_operacion -> FLOAT MENOS NUMERO .)


state 130

    (110) seman_operacion -> FLOAT MULTIPLICADOR FLOAT .

    $end            reduce using rule 110 (seman_operacion -> FLOAT MULTIPLICADOR FLOAT .)
    LLAVE_DER       reduce using rule 110 (seman_operacion -> FLOAT MULTIPLICADOR FLOAT .)
    DEFAULT         reduce using rule 110 (seman_operacion -> FLOAT MULTIPLICADOR FLOAT .)
    CASE            reduce using rule 110 (seman_operacion -> FLOAT MULTIPLICADOR FLOAT .)
    RETURN          reduce using rule 110 (seman_operacion -> FLOAT MULTIPLICADOR FLOAT .)


state 131

    (102) seman_operacion -> FLOAT MULTIPLICADOR NUMERO .

    $end            reduce using rule 102 (seman_operacion -> FLOAT MULTIPLICADOR NUMERO .)
    LLAVE_DER       reduce using rule 102 (seman_operacion -> FLOAT MULTIPLICADOR NUMERO .)
    DEFAULT         reduce using rule 102 (seman_operacion -> FLOAT MULTIPLICADOR NUMERO .)
    CASE            reduce using rule 102 (seman_operacion -> FLOAT MULTIPLICADOR NUMERO .)
    RETURN          reduce using rule 102 (seman_operacion -> FLOAT MULTIPLICADOR NUMERO .)


state 132

    (111) seman_operacion -> FLOAT DIVISOR FLOAT .

    $end            reduce using rule 111 (seman_operacion -> FLOAT DIVISOR FLOAT .)
    LLAVE_DER       reduce using rule 111 (seman_operacion -> FLOAT DIVISOR FLOAT .)
    DEFAULT         reduce using rule 111 (seman_operacion -> FLOAT DIVISOR FLOAT .)
    CASE            reduce using rule 111 (seman_operacion -> FLOAT DIVISOR FLOAT .)
    RETURN          reduce using rule 111 (seman_operacion -> FLOAT DIVISOR FLOAT .)


state 133

    (103) seman_operacion -> FLOAT DIVISOR NUMERO .

    $end            reduce using rule 103 (seman_operacion -> FLOAT DIVISOR NUMERO .)
    LLAVE_DER       reduce using rule 103 (seman_operacion -> FLOAT DIVISOR NUMERO .)
    DEFAULT         reduce using rule 103 (seman_operacion -> FLOAT DIVISOR NUMERO .)
    CASE            reduce using rule 103 (seman_operacion -> FLOAT DIVISOR NUMERO .)
    RETURN          reduce using rule 103 (seman_operacion -> FLOAT DIVISOR NUMERO .)


state 134

    (25) impresion -> FMT PUNTO PRINTF PARENT_IZQ . CADENA COMA NUMERO PARENT_DER
    (26) impresion -> FMT PUNTO PRINTF PARENT_IZQ . empty PARENT_DER
    (94) empty -> .

    CADENA          shift and go to state 162
    PARENT_DER      reduce using rule 94 (empty -> .)

    empty                          shift and go to state 163

state 135

    (27) impresion -> FMT PUNTO PRINTLN PARENT_IZQ . CADENA COMA NUMERO PARENT_DER
    (28) impresion -> FMT PUNTO PRINTLN PARENT_IZQ . empty PARENT_DER
    (94) empty -> .

    CADENA          shift and go to state 164
    PARENT_DER      reduce using rule 94 (empty -> .)

    empty                          shift and go to state 165

state 136

    (56) sentencia -> IF factor comparacion factor . LLAVE_IZQ programa LLAVE_DER

    LLAVE_IZQ       shift and go to state 166


state 137

    (47) slice -> ID ASIGNACION ID PARENT_IZQ . CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA NUMERO PARENT_DER

    CORCHETE_IZQ    shift and go to state 167


state 138

    (40) arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad . CORCHETE_DER tipo_dato
    (41) arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad . CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER

    CORCHETE_DER    shift and go to state 168


state 139

    (42) cantidad -> NUMERO .

    CORCHETE_DER    reduce using rule 42 (cantidad -> NUMERO .)


state 140

    (43) cantidad -> ARRPUNTOS .

    CORCHETE_DER    reduce using rule 43 (cantidad -> ARRPUNTOS .)


state 141

    (46) slice -> ID ASIGNACION MAKE PARENT_IZQ . CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (74) map -> ID ASIGNACION MAKE PARENT_IZQ . MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER

    CORCHETE_IZQ    shift and go to state 169
    MAP             shift and go to state 170


state 142

    (75) map -> ID ASIGNACION MAP CORCHETE_IZQ . tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (76) tipo_dato -> . INT
    (77) tipo_dato -> . STRING
    (78) tipo_dato -> . INT64
    (79) tipo_dato -> . FLOAT32
    (80) tipo_dato -> . FLOAT64
    (81) tipo_dato -> . INT32

    INT             shift and go to state 110
    STRING          shift and go to state 111
    INT64           shift and go to state 112
    FLOAT32         shift and go to state 113
    FLOAT64         shift and go to state 114
    INT32           shift and go to state 115

    tipo_dato                      shift and go to state 171

state 143

    (30) longvariable -> ID PARENT_IZQ ID PARENT_DER .
    (48) capslice -> ID PARENT_IZQ ID PARENT_DER .

  ! reduce/reduce conflict for $end resolved using rule 30 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 30 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 30 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)
  ! reduce/reduce conflict for CASE resolved using rule 30 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)
  ! reduce/reduce conflict for RETURN resolved using rule 30 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)
    $end            reduce using rule 30 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)
    LLAVE_DER       reduce using rule 30 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)
    DEFAULT         reduce using rule 30 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)
    CASE            reduce using rule 30 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)
    RETURN          reduce using rule 30 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)

  ! $end            [ reduce using rule 48 (capslice -> ID PARENT_IZQ ID PARENT_DER .) ]
  ! LLAVE_DER       [ reduce using rule 48 (capslice -> ID PARENT_IZQ ID PARENT_DER .) ]
  ! DEFAULT         [ reduce using rule 48 (capslice -> ID PARENT_IZQ ID PARENT_DER .) ]
  ! CASE            [ reduce using rule 48 (capslice -> ID PARENT_IZQ ID PARENT_DER .) ]
  ! RETURN          [ reduce using rule 48 (capslice -> ID PARENT_IZQ ID PARENT_DER .) ]


state 144

    (29) longvariable -> ID PARENT_IZQ CADENA PARENT_DER .

    $end            reduce using rule 29 (longvariable -> ID PARENT_IZQ CADENA PARENT_DER .)
    LLAVE_DER       reduce using rule 29 (longvariable -> ID PARENT_IZQ CADENA PARENT_DER .)
    DEFAULT         reduce using rule 29 (longvariable -> ID PARENT_IZQ CADENA PARENT_DER .)
    CASE            reduce using rule 29 (longvariable -> ID PARENT_IZQ CADENA PARENT_DER .)
    RETURN          reduce using rule 29 (longvariable -> ID PARENT_IZQ CADENA PARENT_DER .)


state 145

    (87) asignar_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER . ASIGNACION valor
    (89) obtener_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER .

    ASIGNACION      shift and go to state 172
    $end            reduce using rule 89 (obtener_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER .)
    LLAVE_DER       reduce using rule 89 (obtener_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER .)
    DEFAULT         reduce using rule 89 (obtener_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER .)
    CASE            reduce using rule 89 (obtener_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER .)
    RETURN          reduce using rule 89 (obtener_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER .)


state 146

    (34) asignacion -> VAR ID tipo_dato ASIGNACION . factor
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 48
    ID              shift and go to state 49
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    factor                         shift and go to state 173

state 147

    (35) asignacion -> VAR ID COMA ID . tipo_dato ASIGNACION factor COMA factor
    (76) tipo_dato -> . INT
    (77) tipo_dato -> . STRING
    (78) tipo_dato -> . INT64
    (79) tipo_dato -> . FLOAT32
    (80) tipo_dato -> . FLOAT64
    (81) tipo_dato -> . INT32

    INT             shift and go to state 110
    STRING          shift and go to state 111
    INT64           shift and go to state 112
    FLOAT32         shift and go to state 113
    FLOAT64         shift and go to state 114
    INT32           shift and go to state 115

    tipo_dato                      shift and go to state 174

state 148

    (73) map -> VAR ID MAP CORCHETE_IZQ . tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (76) tipo_dato -> . INT
    (77) tipo_dato -> . STRING
    (78) tipo_dato -> . INT64
    (79) tipo_dato -> . FLOAT32
    (80) tipo_dato -> . FLOAT64
    (81) tipo_dato -> . INT32

    INT             shift and go to state 110
    STRING          shift and go to state 111
    INT64           shift and go to state 112
    FLOAT32         shift and go to state 113
    FLOAT64         shift and go to state 114
    INT32           shift and go to state 115

    tipo_dato                      shift and go to state 175

state 149

    (112) boolcadena -> STRCONV PUNTO FORMATBOOL PARENT_IZQ . BOOLEAN PARENT_DER

    BOOLEAN         shift and go to state 176


state 150

    (113) cadenabool -> STRCONV PUNTO PARSEBOOL PARENT_IZQ . CADENA PARENT_DER

    CADENA          shift and go to state 177


state 151

    (116) enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ . CADENA COMA NUMERO PARENT_DER

    CADENA          shift and go to state 178


state 152

    (117) cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ . CADENA COMA NUMERO COMA NUMERO PARENT_DER

    CADENA          shift and go to state 179


state 153

    (114) flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ . FLOAT COMA CADENA COMA NUMERO PARENT_DER

    FLOAT           shift and go to state 180


state 154

    (115) cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ . FLOAT COMA NUMERO PARENT_DER

    FLOAT           shift and go to state 181


state 155

    (36) sentenciafor -> FOR ID ASIGNACION factor . FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER

    FIN_SENTENCIA   shift and go to state 182


state 156

    (67) switch -> SWITCH ID LLAVE_IZQ cases . LLAVE_DER

    LLAVE_DER       shift and go to state 183


state 157

    (68) cases -> case .
    (69) cases -> case . default
    (70) cases -> case . cases
    (72) default -> . DEFAULT DOS_PUNTOS programa
    (68) cases -> . case
    (69) cases -> . case default
    (70) cases -> . case cases
    (71) case -> . CASE factor DOS_PUNTOS programa

    LLAVE_DER       reduce using rule 68 (cases -> case .)
    DEFAULT         shift and go to state 186
    CASE            shift and go to state 158

    case                           shift and go to state 157
    default                        shift and go to state 184
    cases                          shift and go to state 185

state 158

    (71) case -> CASE . factor DOS_PUNTOS programa
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 48
    ID              shift and go to state 49
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    factor                         shift and go to state 187

state 159

    (88) eliminar_valor_map -> DELETE PARENT_IZQ ID COMA . valor PARENT_DER
    (85) valor -> . CADENA
    (86) valor -> . NUMERO

    CADENA          shift and go to state 105
    NUMERO          shift and go to state 106

    valor                          shift and go to state 188

state 160

    (92) argumentos -> ID . tipo_dato
    (93) argumentos -> ID . tipo_dato COMA argumentos
    (76) tipo_dato -> . INT
    (77) tipo_dato -> . STRING
    (78) tipo_dato -> . INT64
    (79) tipo_dato -> . FLOAT32
    (80) tipo_dato -> . FLOAT64
    (81) tipo_dato -> . INT32

    INT             shift and go to state 110
    STRING          shift and go to state 111
    INT64           shift and go to state 112
    FLOAT32         shift and go to state 113
    FLOAT64         shift and go to state 114
    INT32           shift and go to state 115

    tipo_dato                      shift and go to state 189

state 161

    (90) funcion -> FUNC ID PARENT_IZQ argumentos . PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (91) funcion -> FUNC ID PARENT_IZQ argumentos . PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER

    PARENT_DER      shift and go to state 190


state 162

    (25) impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA . COMA NUMERO PARENT_DER

    COMA            shift and go to state 191


state 163

    (26) impresion -> FMT PUNTO PRINTF PARENT_IZQ empty . PARENT_DER

    PARENT_DER      shift and go to state 192


state 164

    (27) impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA . COMA NUMERO PARENT_DER

    COMA            shift and go to state 193


state 165

    (28) impresion -> FMT PUNTO PRINTLN PARENT_IZQ empty . PARENT_DER

    PARENT_DER      shift and go to state 194


state 166

    (56) sentencia -> IF factor comparacion factor LLAVE_IZQ . programa LLAVE_DER
    (1) programa -> . expression
    (2) programa -> . impresion
    (3) programa -> . sentencia
    (4) programa -> . asignacion
    (5) programa -> . longvariable
    (6) programa -> . boolcadena
    (7) programa -> . companum
    (8) programa -> . compaid
    (9) programa -> . sentenciafor
    (10) programa -> . arreglo
    (11) programa -> . slice
    (12) programa -> . capslice
    (13) programa -> . switch
    (14) programa -> . map
    (15) programa -> . asignar_valor_map
    (16) programa -> . eliminar_valor_map
    (17) programa -> . obtener_valor_map
    (18) programa -> . funcion
    (19) programa -> . cadenabool
    (20) programa -> . enterocadena
    (21) programa -> . cadenaentero
    (22) programa -> . flotantecadena
    (23) programa -> . cadenaflotante
    (24) programa -> . seman_operacion
    (49) expression -> . expression MAS term
    (50) expression -> . expression MENOS term
    (51) expression -> . term
    (25) impresion -> . FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (26) impresion -> . FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER
    (27) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (28) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER
    (56) sentencia -> . IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER
    (33) asignacion -> . ID ASIGNACION factor
    (34) asignacion -> . VAR ID tipo_dato ASIGNACION factor
    (35) asignacion -> . VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor
    (29) longvariable -> . ID PARENT_IZQ CADENA PARENT_DER
    (30) longvariable -> . ID PARENT_IZQ ID PARENT_DER
    (112) boolcadena -> . STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER
    (31) companum -> . NUMERO comparacion NUMERO
    (32) compaid -> . ID comparacion ID
    (36) sentenciafor -> . FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
    (40) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato
    (41) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (46) slice -> . ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (47) slice -> . ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA NUMERO PARENT_DER
    (48) capslice -> . ID PARENT_IZQ ID PARENT_DER
    (67) switch -> . SWITCH ID LLAVE_IZQ cases LLAVE_DER
    (73) map -> . VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (74) map -> . ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER
    (75) map -> . ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (87) asignar_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor
    (88) eliminar_valor_map -> . DELETE PARENT_IZQ ID COMA valor PARENT_DER
    (89) obtener_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER
    (90) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (91) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (113) cadenabool -> . STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER
    (116) enterocadena -> . STRCONV PUNTO FORMATINT PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (117) cadenaentero -> . STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER
    (114) flotantecadena -> . STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER
    (115) cadenaflotante -> . STRCONV PUNTO PARSEFLOAT PARENT_IZQ FLOAT COMA NUMERO PARENT_DER
    (95) seman_operacion -> . NUMERO MAS NUMERO
    (96) seman_operacion -> . NUMERO MENOS NUMERO
    (97) seman_operacion -> . NUMERO MULTIPLICADOR NUMERO
    (98) seman_operacion -> . NUMERO DIVISOR NUMERO
    (99) seman_operacion -> . NUMERO MOD_DIVISION NUMERO
    (100) seman_operacion -> . FLOAT MAS NUMERO
    (101) seman_operacion -> . FLOAT MENOS NUMERO
    (102) seman_operacion -> . FLOAT MULTIPLICADOR NUMERO
    (103) seman_operacion -> . FLOAT DIVISOR NUMERO
    (104) seman_operacion -> . NUMERO MAS FLOAT
    (105) seman_operacion -> . NUMERO MENOS FLOAT
    (106) seman_operacion -> . NUMERO MULTIPLICADOR FLOAT
    (107) seman_operacion -> . NUMERO DIVISOR FLOAT
    (108) seman_operacion -> . FLOAT MAS FLOAT
    (109) seman_operacion -> . FLOAT MENOS FLOAT
    (110) seman_operacion -> . FLOAT MULTIPLICADOR FLOAT
    (111) seman_operacion -> . FLOAT DIVISOR FLOAT
    (52) term -> . term MULTIPLICADOR factor
    (53) term -> . term DIVISOR factor
    (54) term -> . term MOD_DIVISION factor
    (55) term -> . factor
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    FMT             shift and go to state 27
    IF              shift and go to state 31
    ID              shift and go to state 33
    VAR             shift and go to state 34
    STRCONV         shift and go to state 35
    NUMERO          shift and go to state 30
    FOR             shift and go to state 36
    SWITCH          shift and go to state 37
    DELETE          shift and go to state 38
    FUNC            shift and go to state 39
    FLOAT           shift and go to state 40
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    factor                         shift and go to state 32
    programa                       shift and go to state 195
    expression                     shift and go to state 2
    impresion                      shift and go to state 3
    sentencia                      shift and go to state 4
    asignacion                     shift and go to state 5
    longvariable                   shift and go to state 6
    boolcadena                     shift and go to state 7
    companum                       shift and go to state 8
    compaid                        shift and go to state 9
    sentenciafor                   shift and go to state 10
    arreglo                        shift and go to state 11
    slice                          shift and go to state 12
    capslice                       shift and go to state 13
    switch                         shift and go to state 14
    map                            shift and go to state 15
    asignar_valor_map              shift and go to state 16
    eliminar_valor_map             shift and go to state 17
    obtener_valor_map              shift and go to state 18
    funcion                        shift and go to state 19
    cadenabool                     shift and go to state 20
    enterocadena                   shift and go to state 21
    cadenaentero                   shift and go to state 22
    flotantecadena                 shift and go to state 23
    cadenaflotante                 shift and go to state 24
    seman_operacion                shift and go to state 25
    term                           shift and go to state 26

state 167

    (47) slice -> ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ . CORCHETE_DER ID COMA NUMERO COMA NUMERO PARENT_DER

    CORCHETE_DER    shift and go to state 196


state 168

    (40) arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER . tipo_dato
    (41) arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER . tipo_dato LLAVE_IZQ valores LLAVE_DER
    (76) tipo_dato -> . INT
    (77) tipo_dato -> . STRING
    (78) tipo_dato -> . INT64
    (79) tipo_dato -> . FLOAT32
    (80) tipo_dato -> . FLOAT64
    (81) tipo_dato -> . INT32

    INT             shift and go to state 110
    STRING          shift and go to state 111
    INT64           shift and go to state 112
    FLOAT32         shift and go to state 113
    FLOAT64         shift and go to state 114
    INT32           shift and go to state 115

    tipo_dato                      shift and go to state 197

state 169

    (46) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ . CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER

    CORCHETE_DER    shift and go to state 198


state 170

    (74) map -> ID ASIGNACION MAKE PARENT_IZQ MAP . CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER

    CORCHETE_IZQ    shift and go to state 199


state 171

    (75) map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato . CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER

    CORCHETE_DER    shift and go to state 200


state 172

    (87) asignar_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION . valor
    (85) valor -> . CADENA
    (86) valor -> . NUMERO

    CADENA          shift and go to state 105
    NUMERO          shift and go to state 106

    valor                          shift and go to state 201

state 173

    (34) asignacion -> VAR ID tipo_dato ASIGNACION factor .

    $end            reduce using rule 34 (asignacion -> VAR ID tipo_dato ASIGNACION factor .)
    LLAVE_DER       reduce using rule 34 (asignacion -> VAR ID tipo_dato ASIGNACION factor .)
    DEFAULT         reduce using rule 34 (asignacion -> VAR ID tipo_dato ASIGNACION factor .)
    CASE            reduce using rule 34 (asignacion -> VAR ID tipo_dato ASIGNACION factor .)
    RETURN          reduce using rule 34 (asignacion -> VAR ID tipo_dato ASIGNACION factor .)


state 174

    (35) asignacion -> VAR ID COMA ID tipo_dato . ASIGNACION factor COMA factor

    ASIGNACION      shift and go to state 202


state 175

    (73) map -> VAR ID MAP CORCHETE_IZQ tipo_dato . CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER

    CORCHETE_DER    shift and go to state 203


state 176

    (112) boolcadena -> STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN . PARENT_DER

    PARENT_DER      shift and go to state 204


state 177

    (113) cadenabool -> STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA . PARENT_DER

    PARENT_DER      shift and go to state 205


state 178

    (116) enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ CADENA . COMA NUMERO PARENT_DER

    COMA            shift and go to state 206


state 179

    (117) cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA . COMA NUMERO COMA NUMERO PARENT_DER

    COMA            shift and go to state 207


state 180

    (114) flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT . COMA CADENA COMA NUMERO PARENT_DER

    COMA            shift and go to state 208


state 181

    (115) cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ FLOAT . COMA NUMERO PARENT_DER

    COMA            shift and go to state 209


state 182

    (36) sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA . ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER

    ID              shift and go to state 210


state 183

    (67) switch -> SWITCH ID LLAVE_IZQ cases LLAVE_DER .

    $end            reduce using rule 67 (switch -> SWITCH ID LLAVE_IZQ cases LLAVE_DER .)
    LLAVE_DER       reduce using rule 67 (switch -> SWITCH ID LLAVE_IZQ cases LLAVE_DER .)
    DEFAULT         reduce using rule 67 (switch -> SWITCH ID LLAVE_IZQ cases LLAVE_DER .)
    CASE            reduce using rule 67 (switch -> SWITCH ID LLAVE_IZQ cases LLAVE_DER .)
    RETURN          reduce using rule 67 (switch -> SWITCH ID LLAVE_IZQ cases LLAVE_DER .)


state 184

    (69) cases -> case default .

    LLAVE_DER       reduce using rule 69 (cases -> case default .)


state 185

    (70) cases -> case cases .

    LLAVE_DER       reduce using rule 70 (cases -> case cases .)


state 186

    (72) default -> DEFAULT . DOS_PUNTOS programa

    DOS_PUNTOS      shift and go to state 211


state 187

    (71) case -> CASE factor . DOS_PUNTOS programa

    DOS_PUNTOS      shift and go to state 212


state 188

    (88) eliminar_valor_map -> DELETE PARENT_IZQ ID COMA valor . PARENT_DER

    PARENT_DER      shift and go to state 213


state 189

    (92) argumentos -> ID tipo_dato .
    (93) argumentos -> ID tipo_dato . COMA argumentos

    PARENT_DER      reduce using rule 92 (argumentos -> ID tipo_dato .)
    COMA            shift and go to state 214


state 190

    (90) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER . tipo_dato LLAVE_IZQ programa LLAVE_DER
    (91) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER . tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (76) tipo_dato -> . INT
    (77) tipo_dato -> . STRING
    (78) tipo_dato -> . INT64
    (79) tipo_dato -> . FLOAT32
    (80) tipo_dato -> . FLOAT64
    (81) tipo_dato -> . INT32

    INT             shift and go to state 110
    STRING          shift and go to state 111
    INT64           shift and go to state 112
    FLOAT32         shift and go to state 113
    FLOAT64         shift and go to state 114
    INT32           shift and go to state 115

    tipo_dato                      shift and go to state 215

state 191

    (25) impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA COMA . NUMERO PARENT_DER

    NUMERO          shift and go to state 216


state 192

    (26) impresion -> FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER .

    $end            reduce using rule 26 (impresion -> FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER .)
    LLAVE_DER       reduce using rule 26 (impresion -> FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER .)
    DEFAULT         reduce using rule 26 (impresion -> FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER .)
    CASE            reduce using rule 26 (impresion -> FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER .)
    RETURN          reduce using rule 26 (impresion -> FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER .)


state 193

    (27) impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA . NUMERO PARENT_DER

    NUMERO          shift and go to state 217


state 194

    (28) impresion -> FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER .

    $end            reduce using rule 28 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER .)
    LLAVE_DER       reduce using rule 28 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER .)
    DEFAULT         reduce using rule 28 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER .)
    CASE            reduce using rule 28 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER .)
    RETURN          reduce using rule 28 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER .)


state 195

    (56) sentencia -> IF factor comparacion factor LLAVE_IZQ programa . LLAVE_DER

    LLAVE_DER       shift and go to state 218


state 196

    (47) slice -> ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER . ID COMA NUMERO COMA NUMERO PARENT_DER

    ID              shift and go to state 219


state 197

    (40) arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato .
    (41) arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato . LLAVE_IZQ valores LLAVE_DER

    $end            reduce using rule 40 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato .)
    LLAVE_DER       reduce using rule 40 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato .)
    DEFAULT         reduce using rule 40 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato .)
    CASE            reduce using rule 40 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato .)
    RETURN          reduce using rule 40 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato .)
    LLAVE_IZQ       shift and go to state 220


state 198

    (46) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER . tipo_dato COMA NUMERO PARENT_DER
    (76) tipo_dato -> . INT
    (77) tipo_dato -> . STRING
    (78) tipo_dato -> . INT64
    (79) tipo_dato -> . FLOAT32
    (80) tipo_dato -> . FLOAT64
    (81) tipo_dato -> . INT32

    INT             shift and go to state 110
    STRING          shift and go to state 111
    INT64           shift and go to state 112
    FLOAT32         shift and go to state 113
    FLOAT64         shift and go to state 114
    INT32           shift and go to state 115

    tipo_dato                      shift and go to state 221

state 199

    (74) map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ . tipo_dato CORCHETE_DER tipo_dato PARENT_DER
    (76) tipo_dato -> . INT
    (77) tipo_dato -> . STRING
    (78) tipo_dato -> . INT64
    (79) tipo_dato -> . FLOAT32
    (80) tipo_dato -> . FLOAT64
    (81) tipo_dato -> . INT32

    INT             shift and go to state 110
    STRING          shift and go to state 111
    INT64           shift and go to state 112
    FLOAT32         shift and go to state 113
    FLOAT64         shift and go to state 114
    INT32           shift and go to state 115

    tipo_dato                      shift and go to state 222

state 200

    (75) map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER . tipo_dato LLAVE_IZQ valores LLAVE_DER
    (76) tipo_dato -> . INT
    (77) tipo_dato -> . STRING
    (78) tipo_dato -> . INT64
    (79) tipo_dato -> . FLOAT32
    (80) tipo_dato -> . FLOAT64
    (81) tipo_dato -> . INT32

    INT             shift and go to state 110
    STRING          shift and go to state 111
    INT64           shift and go to state 112
    FLOAT32         shift and go to state 113
    FLOAT64         shift and go to state 114
    INT32           shift and go to state 115

    tipo_dato                      shift and go to state 223

state 201

    (87) asignar_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor .

    $end            reduce using rule 87 (asignar_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor .)
    LLAVE_DER       reduce using rule 87 (asignar_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor .)
    DEFAULT         reduce using rule 87 (asignar_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor .)
    CASE            reduce using rule 87 (asignar_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor .)
    RETURN          reduce using rule 87 (asignar_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor .)


state 202

    (35) asignacion -> VAR ID COMA ID tipo_dato ASIGNACION . factor COMA factor
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 48
    ID              shift and go to state 49
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    factor                         shift and go to state 224

state 203

    (73) map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER . tipo_dato LLAVE_IZQ valores LLAVE_DER
    (76) tipo_dato -> . INT
    (77) tipo_dato -> . STRING
    (78) tipo_dato -> . INT64
    (79) tipo_dato -> . FLOAT32
    (80) tipo_dato -> . FLOAT64
    (81) tipo_dato -> . INT32

    INT             shift and go to state 110
    STRING          shift and go to state 111
    INT64           shift and go to state 112
    FLOAT32         shift and go to state 113
    FLOAT64         shift and go to state 114
    INT32           shift and go to state 115

    tipo_dato                      shift and go to state 225

state 204

    (112) boolcadena -> STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER .

    $end            reduce using rule 112 (boolcadena -> STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER .)
    LLAVE_DER       reduce using rule 112 (boolcadena -> STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER .)
    DEFAULT         reduce using rule 112 (boolcadena -> STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER .)
    CASE            reduce using rule 112 (boolcadena -> STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER .)
    RETURN          reduce using rule 112 (boolcadena -> STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER .)


state 205

    (113) cadenabool -> STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER .

    $end            reduce using rule 113 (cadenabool -> STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER .)
    LLAVE_DER       reduce using rule 113 (cadenabool -> STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER .)
    DEFAULT         reduce using rule 113 (cadenabool -> STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER .)
    CASE            reduce using rule 113 (cadenabool -> STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER .)
    RETURN          reduce using rule 113 (cadenabool -> STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER .)


state 206

    (116) enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ CADENA COMA . NUMERO PARENT_DER

    NUMERO          shift and go to state 226


state 207

    (117) cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA . NUMERO COMA NUMERO PARENT_DER

    NUMERO          shift and go to state 227


state 208

    (114) flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA . CADENA COMA NUMERO PARENT_DER

    CADENA          shift and go to state 228


state 209

    (115) cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ FLOAT COMA . NUMERO PARENT_DER

    NUMERO          shift and go to state 229


state 210

    (36) sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID . comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
    (57) comparacion -> . IGUALDAD
    (58) comparacion -> . MAYOR
    (59) comparacion -> . MENOR
    (60) comparacion -> . MAYOR_IGU
    (61) comparacion -> . MENOR_IGU
    (62) comparacion -> . DESIGUALDAD

    IGUALDAD        shift and go to state 56
    MAYOR           shift and go to state 57
    MENOR           shift and go to state 58
    MAYOR_IGU       shift and go to state 59
    MENOR_IGU       shift and go to state 60
    DESIGUALDAD     shift and go to state 61

    comparacion                    shift and go to state 230

state 211

    (72) default -> DEFAULT DOS_PUNTOS . programa
    (1) programa -> . expression
    (2) programa -> . impresion
    (3) programa -> . sentencia
    (4) programa -> . asignacion
    (5) programa -> . longvariable
    (6) programa -> . boolcadena
    (7) programa -> . companum
    (8) programa -> . compaid
    (9) programa -> . sentenciafor
    (10) programa -> . arreglo
    (11) programa -> . slice
    (12) programa -> . capslice
    (13) programa -> . switch
    (14) programa -> . map
    (15) programa -> . asignar_valor_map
    (16) programa -> . eliminar_valor_map
    (17) programa -> . obtener_valor_map
    (18) programa -> . funcion
    (19) programa -> . cadenabool
    (20) programa -> . enterocadena
    (21) programa -> . cadenaentero
    (22) programa -> . flotantecadena
    (23) programa -> . cadenaflotante
    (24) programa -> . seman_operacion
    (49) expression -> . expression MAS term
    (50) expression -> . expression MENOS term
    (51) expression -> . term
    (25) impresion -> . FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (26) impresion -> . FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER
    (27) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (28) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER
    (56) sentencia -> . IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER
    (33) asignacion -> . ID ASIGNACION factor
    (34) asignacion -> . VAR ID tipo_dato ASIGNACION factor
    (35) asignacion -> . VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor
    (29) longvariable -> . ID PARENT_IZQ CADENA PARENT_DER
    (30) longvariable -> . ID PARENT_IZQ ID PARENT_DER
    (112) boolcadena -> . STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER
    (31) companum -> . NUMERO comparacion NUMERO
    (32) compaid -> . ID comparacion ID
    (36) sentenciafor -> . FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
    (40) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato
    (41) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (46) slice -> . ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (47) slice -> . ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA NUMERO PARENT_DER
    (48) capslice -> . ID PARENT_IZQ ID PARENT_DER
    (67) switch -> . SWITCH ID LLAVE_IZQ cases LLAVE_DER
    (73) map -> . VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (74) map -> . ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER
    (75) map -> . ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (87) asignar_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor
    (88) eliminar_valor_map -> . DELETE PARENT_IZQ ID COMA valor PARENT_DER
    (89) obtener_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER
    (90) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (91) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (113) cadenabool -> . STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER
    (116) enterocadena -> . STRCONV PUNTO FORMATINT PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (117) cadenaentero -> . STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER
    (114) flotantecadena -> . STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER
    (115) cadenaflotante -> . STRCONV PUNTO PARSEFLOAT PARENT_IZQ FLOAT COMA NUMERO PARENT_DER
    (95) seman_operacion -> . NUMERO MAS NUMERO
    (96) seman_operacion -> . NUMERO MENOS NUMERO
    (97) seman_operacion -> . NUMERO MULTIPLICADOR NUMERO
    (98) seman_operacion -> . NUMERO DIVISOR NUMERO
    (99) seman_operacion -> . NUMERO MOD_DIVISION NUMERO
    (100) seman_operacion -> . FLOAT MAS NUMERO
    (101) seman_operacion -> . FLOAT MENOS NUMERO
    (102) seman_operacion -> . FLOAT MULTIPLICADOR NUMERO
    (103) seman_operacion -> . FLOAT DIVISOR NUMERO
    (104) seman_operacion -> . NUMERO MAS FLOAT
    (105) seman_operacion -> . NUMERO MENOS FLOAT
    (106) seman_operacion -> . NUMERO MULTIPLICADOR FLOAT
    (107) seman_operacion -> . NUMERO DIVISOR FLOAT
    (108) seman_operacion -> . FLOAT MAS FLOAT
    (109) seman_operacion -> . FLOAT MENOS FLOAT
    (110) seman_operacion -> . FLOAT MULTIPLICADOR FLOAT
    (111) seman_operacion -> . FLOAT DIVISOR FLOAT
    (52) term -> . term MULTIPLICADOR factor
    (53) term -> . term DIVISOR factor
    (54) term -> . term MOD_DIVISION factor
    (55) term -> . factor
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    FMT             shift and go to state 27
    IF              shift and go to state 31
    ID              shift and go to state 33
    VAR             shift and go to state 34
    STRCONV         shift and go to state 35
    NUMERO          shift and go to state 30
    FOR             shift and go to state 36
    SWITCH          shift and go to state 37
    DELETE          shift and go to state 38
    FUNC            shift and go to state 39
    FLOAT           shift and go to state 40
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    programa                       shift and go to state 231
    expression                     shift and go to state 2
    impresion                      shift and go to state 3
    sentencia                      shift and go to state 4
    asignacion                     shift and go to state 5
    longvariable                   shift and go to state 6
    boolcadena                     shift and go to state 7
    companum                       shift and go to state 8
    compaid                        shift and go to state 9
    sentenciafor                   shift and go to state 10
    arreglo                        shift and go to state 11
    slice                          shift and go to state 12
    capslice                       shift and go to state 13
    switch                         shift and go to state 14
    map                            shift and go to state 15
    asignar_valor_map              shift and go to state 16
    eliminar_valor_map             shift and go to state 17
    obtener_valor_map              shift and go to state 18
    funcion                        shift and go to state 19
    cadenabool                     shift and go to state 20
    enterocadena                   shift and go to state 21
    cadenaentero                   shift and go to state 22
    flotantecadena                 shift and go to state 23
    cadenaflotante                 shift and go to state 24
    seman_operacion                shift and go to state 25
    term                           shift and go to state 26
    factor                         shift and go to state 32

state 212

    (71) case -> CASE factor DOS_PUNTOS . programa
    (1) programa -> . expression
    (2) programa -> . impresion
    (3) programa -> . sentencia
    (4) programa -> . asignacion
    (5) programa -> . longvariable
    (6) programa -> . boolcadena
    (7) programa -> . companum
    (8) programa -> . compaid
    (9) programa -> . sentenciafor
    (10) programa -> . arreglo
    (11) programa -> . slice
    (12) programa -> . capslice
    (13) programa -> . switch
    (14) programa -> . map
    (15) programa -> . asignar_valor_map
    (16) programa -> . eliminar_valor_map
    (17) programa -> . obtener_valor_map
    (18) programa -> . funcion
    (19) programa -> . cadenabool
    (20) programa -> . enterocadena
    (21) programa -> . cadenaentero
    (22) programa -> . flotantecadena
    (23) programa -> . cadenaflotante
    (24) programa -> . seman_operacion
    (49) expression -> . expression MAS term
    (50) expression -> . expression MENOS term
    (51) expression -> . term
    (25) impresion -> . FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (26) impresion -> . FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER
    (27) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (28) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER
    (56) sentencia -> . IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER
    (33) asignacion -> . ID ASIGNACION factor
    (34) asignacion -> . VAR ID tipo_dato ASIGNACION factor
    (35) asignacion -> . VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor
    (29) longvariable -> . ID PARENT_IZQ CADENA PARENT_DER
    (30) longvariable -> . ID PARENT_IZQ ID PARENT_DER
    (112) boolcadena -> . STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER
    (31) companum -> . NUMERO comparacion NUMERO
    (32) compaid -> . ID comparacion ID
    (36) sentenciafor -> . FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
    (40) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato
    (41) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (46) slice -> . ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (47) slice -> . ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA NUMERO PARENT_DER
    (48) capslice -> . ID PARENT_IZQ ID PARENT_DER
    (67) switch -> . SWITCH ID LLAVE_IZQ cases LLAVE_DER
    (73) map -> . VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (74) map -> . ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER
    (75) map -> . ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (87) asignar_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor
    (88) eliminar_valor_map -> . DELETE PARENT_IZQ ID COMA valor PARENT_DER
    (89) obtener_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER
    (90) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (91) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (113) cadenabool -> . STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER
    (116) enterocadena -> . STRCONV PUNTO FORMATINT PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (117) cadenaentero -> . STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER
    (114) flotantecadena -> . STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER
    (115) cadenaflotante -> . STRCONV PUNTO PARSEFLOAT PARENT_IZQ FLOAT COMA NUMERO PARENT_DER
    (95) seman_operacion -> . NUMERO MAS NUMERO
    (96) seman_operacion -> . NUMERO MENOS NUMERO
    (97) seman_operacion -> . NUMERO MULTIPLICADOR NUMERO
    (98) seman_operacion -> . NUMERO DIVISOR NUMERO
    (99) seman_operacion -> . NUMERO MOD_DIVISION NUMERO
    (100) seman_operacion -> . FLOAT MAS NUMERO
    (101) seman_operacion -> . FLOAT MENOS NUMERO
    (102) seman_operacion -> . FLOAT MULTIPLICADOR NUMERO
    (103) seman_operacion -> . FLOAT DIVISOR NUMERO
    (104) seman_operacion -> . NUMERO MAS FLOAT
    (105) seman_operacion -> . NUMERO MENOS FLOAT
    (106) seman_operacion -> . NUMERO MULTIPLICADOR FLOAT
    (107) seman_operacion -> . NUMERO DIVISOR FLOAT
    (108) seman_operacion -> . FLOAT MAS FLOAT
    (109) seman_operacion -> . FLOAT MENOS FLOAT
    (110) seman_operacion -> . FLOAT MULTIPLICADOR FLOAT
    (111) seman_operacion -> . FLOAT DIVISOR FLOAT
    (52) term -> . term MULTIPLICADOR factor
    (53) term -> . term DIVISOR factor
    (54) term -> . term MOD_DIVISION factor
    (55) term -> . factor
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    FMT             shift and go to state 27
    IF              shift and go to state 31
    ID              shift and go to state 33
    VAR             shift and go to state 34
    STRCONV         shift and go to state 35
    NUMERO          shift and go to state 30
    FOR             shift and go to state 36
    SWITCH          shift and go to state 37
    DELETE          shift and go to state 38
    FUNC            shift and go to state 39
    FLOAT           shift and go to state 40
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    factor                         shift and go to state 32
    programa                       shift and go to state 232
    expression                     shift and go to state 2
    impresion                      shift and go to state 3
    sentencia                      shift and go to state 4
    asignacion                     shift and go to state 5
    longvariable                   shift and go to state 6
    boolcadena                     shift and go to state 7
    companum                       shift and go to state 8
    compaid                        shift and go to state 9
    sentenciafor                   shift and go to state 10
    arreglo                        shift and go to state 11
    slice                          shift and go to state 12
    capslice                       shift and go to state 13
    switch                         shift and go to state 14
    map                            shift and go to state 15
    asignar_valor_map              shift and go to state 16
    eliminar_valor_map             shift and go to state 17
    obtener_valor_map              shift and go to state 18
    funcion                        shift and go to state 19
    cadenabool                     shift and go to state 20
    enterocadena                   shift and go to state 21
    cadenaentero                   shift and go to state 22
    flotantecadena                 shift and go to state 23
    cadenaflotante                 shift and go to state 24
    seman_operacion                shift and go to state 25
    term                           shift and go to state 26

state 213

    (88) eliminar_valor_map -> DELETE PARENT_IZQ ID COMA valor PARENT_DER .

    $end            reduce using rule 88 (eliminar_valor_map -> DELETE PARENT_IZQ ID COMA valor PARENT_DER .)
    LLAVE_DER       reduce using rule 88 (eliminar_valor_map -> DELETE PARENT_IZQ ID COMA valor PARENT_DER .)
    DEFAULT         reduce using rule 88 (eliminar_valor_map -> DELETE PARENT_IZQ ID COMA valor PARENT_DER .)
    CASE            reduce using rule 88 (eliminar_valor_map -> DELETE PARENT_IZQ ID COMA valor PARENT_DER .)
    RETURN          reduce using rule 88 (eliminar_valor_map -> DELETE PARENT_IZQ ID COMA valor PARENT_DER .)


state 214

    (93) argumentos -> ID tipo_dato COMA . argumentos
    (92) argumentos -> . ID tipo_dato
    (93) argumentos -> . ID tipo_dato COMA argumentos

    ID              shift and go to state 160

    argumentos                     shift and go to state 233

state 215

    (90) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato . LLAVE_IZQ programa LLAVE_DER
    (91) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato . LLAVE_IZQ programa RETURN ID LLAVE_DER

    LLAVE_IZQ       shift and go to state 234


state 216

    (25) impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO . PARENT_DER

    PARENT_DER      shift and go to state 235


state 217

    (27) impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO . PARENT_DER

    PARENT_DER      shift and go to state 236


state 218

    (56) sentencia -> IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER .

    $end            reduce using rule 56 (sentencia -> IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER .)
    LLAVE_DER       reduce using rule 56 (sentencia -> IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER .)
    DEFAULT         reduce using rule 56 (sentencia -> IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER .)
    CASE            reduce using rule 56 (sentencia -> IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER .)
    RETURN          reduce using rule 56 (sentencia -> IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER .)


state 219

    (47) slice -> ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID . COMA NUMERO COMA NUMERO PARENT_DER

    COMA            shift and go to state 237


state 220

    (41) arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ . valores LLAVE_DER
    (44) valores -> . factor
    (45) valores -> . factor COMA valores
    (82) valores -> . clave_valor
    (83) valores -> . clave_valor COMA valores
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER
    (84) clave_valor -> . valor DOS_PUNTOS valor
    (85) valor -> . CADENA
    (86) valor -> . NUMERO

    NUMERO          shift and go to state 241
    ID              shift and go to state 49
    CADENA          shift and go to state 242
    PARENT_IZQ      shift and go to state 28

    valores                        shift and go to state 238
    factor                         shift and go to state 239
    clave_valor                    shift and go to state 240
    valor                          shift and go to state 243

state 221

    (46) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato . COMA NUMERO PARENT_DER

    COMA            shift and go to state 244


state 222

    (74) map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato . CORCHETE_DER tipo_dato PARENT_DER

    CORCHETE_DER    shift and go to state 245


state 223

    (75) map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato . LLAVE_IZQ valores LLAVE_DER

    LLAVE_IZQ       shift and go to state 246


state 224

    (35) asignacion -> VAR ID COMA ID tipo_dato ASIGNACION factor . COMA factor

    COMA            shift and go to state 247


state 225

    (73) map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato . LLAVE_IZQ valores LLAVE_DER

    LLAVE_IZQ       shift and go to state 248


state 226

    (116) enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ CADENA COMA NUMERO . PARENT_DER

    PARENT_DER      shift and go to state 249


state 227

    (117) cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO . COMA NUMERO PARENT_DER

    COMA            shift and go to state 250


state 228

    (114) flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA . COMA NUMERO PARENT_DER

    COMA            shift and go to state 251


state 229

    (115) cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ FLOAT COMA NUMERO . PARENT_DER

    PARENT_DER      shift and go to state 252


state 230

    (36) sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion . factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 48
    ID              shift and go to state 49
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    factor                         shift and go to state 253

state 231

    (72) default -> DEFAULT DOS_PUNTOS programa .

    LLAVE_DER       reduce using rule 72 (default -> DEFAULT DOS_PUNTOS programa .)


state 232

    (71) case -> CASE factor DOS_PUNTOS programa .

    DEFAULT         reduce using rule 71 (case -> CASE factor DOS_PUNTOS programa .)
    CASE            reduce using rule 71 (case -> CASE factor DOS_PUNTOS programa .)
    LLAVE_DER       reduce using rule 71 (case -> CASE factor DOS_PUNTOS programa .)


state 233

    (93) argumentos -> ID tipo_dato COMA argumentos .

    PARENT_DER      reduce using rule 93 (argumentos -> ID tipo_dato COMA argumentos .)


state 234

    (90) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ . programa LLAVE_DER
    (91) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ . programa RETURN ID LLAVE_DER
    (1) programa -> . expression
    (2) programa -> . impresion
    (3) programa -> . sentencia
    (4) programa -> . asignacion
    (5) programa -> . longvariable
    (6) programa -> . boolcadena
    (7) programa -> . companum
    (8) programa -> . compaid
    (9) programa -> . sentenciafor
    (10) programa -> . arreglo
    (11) programa -> . slice
    (12) programa -> . capslice
    (13) programa -> . switch
    (14) programa -> . map
    (15) programa -> . asignar_valor_map
    (16) programa -> . eliminar_valor_map
    (17) programa -> . obtener_valor_map
    (18) programa -> . funcion
    (19) programa -> . cadenabool
    (20) programa -> . enterocadena
    (21) programa -> . cadenaentero
    (22) programa -> . flotantecadena
    (23) programa -> . cadenaflotante
    (24) programa -> . seman_operacion
    (49) expression -> . expression MAS term
    (50) expression -> . expression MENOS term
    (51) expression -> . term
    (25) impresion -> . FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (26) impresion -> . FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER
    (27) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (28) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER
    (56) sentencia -> . IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER
    (33) asignacion -> . ID ASIGNACION factor
    (34) asignacion -> . VAR ID tipo_dato ASIGNACION factor
    (35) asignacion -> . VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor
    (29) longvariable -> . ID PARENT_IZQ CADENA PARENT_DER
    (30) longvariable -> . ID PARENT_IZQ ID PARENT_DER
    (112) boolcadena -> . STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER
    (31) companum -> . NUMERO comparacion NUMERO
    (32) compaid -> . ID comparacion ID
    (36) sentenciafor -> . FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
    (40) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato
    (41) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (46) slice -> . ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (47) slice -> . ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA NUMERO PARENT_DER
    (48) capslice -> . ID PARENT_IZQ ID PARENT_DER
    (67) switch -> . SWITCH ID LLAVE_IZQ cases LLAVE_DER
    (73) map -> . VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (74) map -> . ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER
    (75) map -> . ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (87) asignar_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor
    (88) eliminar_valor_map -> . DELETE PARENT_IZQ ID COMA valor PARENT_DER
    (89) obtener_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER
    (90) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (91) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (113) cadenabool -> . STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER
    (116) enterocadena -> . STRCONV PUNTO FORMATINT PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (117) cadenaentero -> . STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER
    (114) flotantecadena -> . STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER
    (115) cadenaflotante -> . STRCONV PUNTO PARSEFLOAT PARENT_IZQ FLOAT COMA NUMERO PARENT_DER
    (95) seman_operacion -> . NUMERO MAS NUMERO
    (96) seman_operacion -> . NUMERO MENOS NUMERO
    (97) seman_operacion -> . NUMERO MULTIPLICADOR NUMERO
    (98) seman_operacion -> . NUMERO DIVISOR NUMERO
    (99) seman_operacion -> . NUMERO MOD_DIVISION NUMERO
    (100) seman_operacion -> . FLOAT MAS NUMERO
    (101) seman_operacion -> . FLOAT MENOS NUMERO
    (102) seman_operacion -> . FLOAT MULTIPLICADOR NUMERO
    (103) seman_operacion -> . FLOAT DIVISOR NUMERO
    (104) seman_operacion -> . NUMERO MAS FLOAT
    (105) seman_operacion -> . NUMERO MENOS FLOAT
    (106) seman_operacion -> . NUMERO MULTIPLICADOR FLOAT
    (107) seman_operacion -> . NUMERO DIVISOR FLOAT
    (108) seman_operacion -> . FLOAT MAS FLOAT
    (109) seman_operacion -> . FLOAT MENOS FLOAT
    (110) seman_operacion -> . FLOAT MULTIPLICADOR FLOAT
    (111) seman_operacion -> . FLOAT DIVISOR FLOAT
    (52) term -> . term MULTIPLICADOR factor
    (53) term -> . term DIVISOR factor
    (54) term -> . term MOD_DIVISION factor
    (55) term -> . factor
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    FMT             shift and go to state 27
    IF              shift and go to state 31
    ID              shift and go to state 33
    VAR             shift and go to state 34
    STRCONV         shift and go to state 35
    NUMERO          shift and go to state 30
    FOR             shift and go to state 36
    SWITCH          shift and go to state 37
    DELETE          shift and go to state 38
    FUNC            shift and go to state 39
    FLOAT           shift and go to state 40
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    programa                       shift and go to state 254
    expression                     shift and go to state 2
    impresion                      shift and go to state 3
    sentencia                      shift and go to state 4
    asignacion                     shift and go to state 5
    longvariable                   shift and go to state 6
    boolcadena                     shift and go to state 7
    companum                       shift and go to state 8
    compaid                        shift and go to state 9
    sentenciafor                   shift and go to state 10
    arreglo                        shift and go to state 11
    slice                          shift and go to state 12
    capslice                       shift and go to state 13
    switch                         shift and go to state 14
    map                            shift and go to state 15
    asignar_valor_map              shift and go to state 16
    eliminar_valor_map             shift and go to state 17
    obtener_valor_map              shift and go to state 18
    funcion                        shift and go to state 19
    cadenabool                     shift and go to state 20
    enterocadena                   shift and go to state 21
    cadenaentero                   shift and go to state 22
    flotantecadena                 shift and go to state 23
    cadenaflotante                 shift and go to state 24
    seman_operacion                shift and go to state 25
    term                           shift and go to state 26
    factor                         shift and go to state 32

state 235

    (25) impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER .

    $end            reduce using rule 25 (impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    LLAVE_DER       reduce using rule 25 (impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    DEFAULT         reduce using rule 25 (impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    CASE            reduce using rule 25 (impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    RETURN          reduce using rule 25 (impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)


state 236

    (27) impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER .

    $end            reduce using rule 27 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    LLAVE_DER       reduce using rule 27 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    DEFAULT         reduce using rule 27 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    CASE            reduce using rule 27 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    RETURN          reduce using rule 27 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)


state 237

    (47) slice -> ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA . NUMERO COMA NUMERO PARENT_DER

    NUMERO          shift and go to state 255


state 238

    (41) arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores . LLAVE_DER

    LLAVE_DER       shift and go to state 256


state 239

    (44) valores -> factor .
    (45) valores -> factor . COMA valores

    LLAVE_DER       reduce using rule 44 (valores -> factor .)
    COMA            shift and go to state 257


state 240

    (82) valores -> clave_valor .
    (83) valores -> clave_valor . COMA valores

    LLAVE_DER       reduce using rule 82 (valores -> clave_valor .)
    COMA            shift and go to state 258


state 241

    (63) factor -> NUMERO .
    (86) valor -> NUMERO .

    COMA            reduce using rule 63 (factor -> NUMERO .)
    LLAVE_DER       reduce using rule 63 (factor -> NUMERO .)
    DOS_PUNTOS      reduce using rule 86 (valor -> NUMERO .)


state 242

    (65) factor -> CADENA .
    (85) valor -> CADENA .

    COMA            reduce using rule 65 (factor -> CADENA .)
    LLAVE_DER       reduce using rule 65 (factor -> CADENA .)
    DOS_PUNTOS      reduce using rule 85 (valor -> CADENA .)


state 243

    (84) clave_valor -> valor . DOS_PUNTOS valor

    DOS_PUNTOS      shift and go to state 259


state 244

    (46) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA . NUMERO PARENT_DER

    NUMERO          shift and go to state 260


state 245

    (74) map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER . tipo_dato PARENT_DER
    (76) tipo_dato -> . INT
    (77) tipo_dato -> . STRING
    (78) tipo_dato -> . INT64
    (79) tipo_dato -> . FLOAT32
    (80) tipo_dato -> . FLOAT64
    (81) tipo_dato -> . INT32

    INT             shift and go to state 110
    STRING          shift and go to state 111
    INT64           shift and go to state 112
    FLOAT32         shift and go to state 113
    FLOAT64         shift and go to state 114
    INT32           shift and go to state 115

    tipo_dato                      shift and go to state 261

state 246

    (75) map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ . valores LLAVE_DER
    (44) valores -> . factor
    (45) valores -> . factor COMA valores
    (82) valores -> . clave_valor
    (83) valores -> . clave_valor COMA valores
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER
    (84) clave_valor -> . valor DOS_PUNTOS valor
    (85) valor -> . CADENA
    (86) valor -> . NUMERO

    NUMERO          shift and go to state 241
    ID              shift and go to state 49
    CADENA          shift and go to state 242
    PARENT_IZQ      shift and go to state 28

    valores                        shift and go to state 262
    factor                         shift and go to state 239
    clave_valor                    shift and go to state 240
    valor                          shift and go to state 243

state 247

    (35) asignacion -> VAR ID COMA ID tipo_dato ASIGNACION factor COMA . factor
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 48
    ID              shift and go to state 49
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    factor                         shift and go to state 263

state 248

    (73) map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ . valores LLAVE_DER
    (44) valores -> . factor
    (45) valores -> . factor COMA valores
    (82) valores -> . clave_valor
    (83) valores -> . clave_valor COMA valores
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER
    (84) clave_valor -> . valor DOS_PUNTOS valor
    (85) valor -> . CADENA
    (86) valor -> . NUMERO

    NUMERO          shift and go to state 241
    ID              shift and go to state 49
    CADENA          shift and go to state 242
    PARENT_IZQ      shift and go to state 28

    valores                        shift and go to state 264
    factor                         shift and go to state 239
    clave_valor                    shift and go to state 240
    valor                          shift and go to state 243

state 249

    (116) enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ CADENA COMA NUMERO PARENT_DER .

    $end            reduce using rule 116 (enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    LLAVE_DER       reduce using rule 116 (enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    DEFAULT         reduce using rule 116 (enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    CASE            reduce using rule 116 (enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    RETURN          reduce using rule 116 (enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)


state 250

    (117) cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA . NUMERO PARENT_DER

    NUMERO          shift and go to state 265


state 251

    (114) flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA . NUMERO PARENT_DER

    NUMERO          shift and go to state 266


state 252

    (115) cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ FLOAT COMA NUMERO PARENT_DER .

    $end            reduce using rule 115 (cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ FLOAT COMA NUMERO PARENT_DER .)
    LLAVE_DER       reduce using rule 115 (cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ FLOAT COMA NUMERO PARENT_DER .)
    DEFAULT         reduce using rule 115 (cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ FLOAT COMA NUMERO PARENT_DER .)
    CASE            reduce using rule 115 (cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ FLOAT COMA NUMERO PARENT_DER .)
    RETURN          reduce using rule 115 (cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ FLOAT COMA NUMERO PARENT_DER .)


state 253

    (36) sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor . FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER

    FIN_SENTENCIA   shift and go to state 267


state 254

    (90) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa . LLAVE_DER
    (91) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa . RETURN ID LLAVE_DER

    LLAVE_DER       shift and go to state 268
    RETURN          shift and go to state 269


state 255

    (47) slice -> ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO . COMA NUMERO PARENT_DER

    COMA            shift and go to state 270


state 256

    (41) arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .

    $end            reduce using rule 41 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    LLAVE_DER       reduce using rule 41 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    DEFAULT         reduce using rule 41 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    CASE            reduce using rule 41 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    RETURN          reduce using rule 41 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)


state 257

    (45) valores -> factor COMA . valores
    (44) valores -> . factor
    (45) valores -> . factor COMA valores
    (82) valores -> . clave_valor
    (83) valores -> . clave_valor COMA valores
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER
    (84) clave_valor -> . valor DOS_PUNTOS valor
    (85) valor -> . CADENA
    (86) valor -> . NUMERO

    NUMERO          shift and go to state 241
    ID              shift and go to state 49
    CADENA          shift and go to state 242
    PARENT_IZQ      shift and go to state 28

    factor                         shift and go to state 239
    valores                        shift and go to state 271
    clave_valor                    shift and go to state 240
    valor                          shift and go to state 243

state 258

    (83) valores -> clave_valor COMA . valores
    (44) valores -> . factor
    (45) valores -> . factor COMA valores
    (82) valores -> . clave_valor
    (83) valores -> . clave_valor COMA valores
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER
    (84) clave_valor -> . valor DOS_PUNTOS valor
    (85) valor -> . CADENA
    (86) valor -> . NUMERO

    NUMERO          shift and go to state 241
    ID              shift and go to state 49
    CADENA          shift and go to state 242
    PARENT_IZQ      shift and go to state 28

    clave_valor                    shift and go to state 240
    valores                        shift and go to state 272
    factor                         shift and go to state 239
    valor                          shift and go to state 243

state 259

    (84) clave_valor -> valor DOS_PUNTOS . valor
    (85) valor -> . CADENA
    (86) valor -> . NUMERO

    CADENA          shift and go to state 105
    NUMERO          shift and go to state 106

    valor                          shift and go to state 273

state 260

    (46) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO . PARENT_DER

    PARENT_DER      shift and go to state 274


state 261

    (74) map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato . PARENT_DER

    PARENT_DER      shift and go to state 275


state 262

    (75) map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores . LLAVE_DER

    LLAVE_DER       shift and go to state 276


state 263

    (35) asignacion -> VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor .

    $end            reduce using rule 35 (asignacion -> VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor .)
    LLAVE_DER       reduce using rule 35 (asignacion -> VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor .)
    DEFAULT         reduce using rule 35 (asignacion -> VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor .)
    CASE            reduce using rule 35 (asignacion -> VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor .)
    RETURN          reduce using rule 35 (asignacion -> VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor .)


state 264

    (73) map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores . LLAVE_DER

    LLAVE_DER       shift and go to state 277


state 265

    (117) cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO . PARENT_DER

    PARENT_DER      shift and go to state 278


state 266

    (114) flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO . PARENT_DER

    PARENT_DER      shift and go to state 279


state 267

    (36) sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA . incremento LLAVE_IZQ programa LLAVE_DER
    (37) incremento -> . ID INCREMENTO
    (38) incremento -> . ID ASIGNACION ID
    (39) incremento -> . ID DECREMENTO

    ID              shift and go to state 280

    incremento                     shift and go to state 281

state 268

    (90) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER .

    $end            reduce using rule 90 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER .)
    LLAVE_DER       reduce using rule 90 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER .)
    DEFAULT         reduce using rule 90 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER .)
    CASE            reduce using rule 90 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER .)
    RETURN          reduce using rule 90 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER .)


state 269

    (91) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN . ID LLAVE_DER

    ID              shift and go to state 282


state 270

    (47) slice -> ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA . NUMERO PARENT_DER

    NUMERO          shift and go to state 283


state 271

    (45) valores -> factor COMA valores .

    LLAVE_DER       reduce using rule 45 (valores -> factor COMA valores .)


state 272

    (83) valores -> clave_valor COMA valores .

    LLAVE_DER       reduce using rule 83 (valores -> clave_valor COMA valores .)


state 273

    (84) clave_valor -> valor DOS_PUNTOS valor .

    COMA            reduce using rule 84 (clave_valor -> valor DOS_PUNTOS valor .)
    LLAVE_DER       reduce using rule 84 (clave_valor -> valor DOS_PUNTOS valor .)


state 274

    (46) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER .

    $end            reduce using rule 46 (slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER .)
    LLAVE_DER       reduce using rule 46 (slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER .)
    DEFAULT         reduce using rule 46 (slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER .)
    CASE            reduce using rule 46 (slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER .)
    RETURN          reduce using rule 46 (slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER .)


state 275

    (74) map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER .

    $end            reduce using rule 74 (map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER .)
    LLAVE_DER       reduce using rule 74 (map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER .)
    DEFAULT         reduce using rule 74 (map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER .)
    CASE            reduce using rule 74 (map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER .)
    RETURN          reduce using rule 74 (map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER .)


state 276

    (75) map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .

    $end            reduce using rule 75 (map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    LLAVE_DER       reduce using rule 75 (map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    DEFAULT         reduce using rule 75 (map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    CASE            reduce using rule 75 (map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    RETURN          reduce using rule 75 (map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)


state 277

    (73) map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .

    $end            reduce using rule 73 (map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    LLAVE_DER       reduce using rule 73 (map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    DEFAULT         reduce using rule 73 (map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    CASE            reduce using rule 73 (map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    RETURN          reduce using rule 73 (map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)


state 278

    (117) cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER .

    $end            reduce using rule 117 (cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER .)
    LLAVE_DER       reduce using rule 117 (cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER .)
    DEFAULT         reduce using rule 117 (cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER .)
    CASE            reduce using rule 117 (cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER .)
    RETURN          reduce using rule 117 (cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER .)


state 279

    (114) flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER .

    $end            reduce using rule 114 (flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER .)
    LLAVE_DER       reduce using rule 114 (flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER .)
    DEFAULT         reduce using rule 114 (flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER .)
    CASE            reduce using rule 114 (flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER .)
    RETURN          reduce using rule 114 (flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER .)


state 280

    (37) incremento -> ID . INCREMENTO
    (38) incremento -> ID . ASIGNACION ID
    (39) incremento -> ID . DECREMENTO

    INCREMENTO      shift and go to state 284
    ASIGNACION      shift and go to state 285
    DECREMENTO      shift and go to state 286


state 281

    (36) sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento . LLAVE_IZQ programa LLAVE_DER

    LLAVE_IZQ       shift and go to state 287


state 282

    (91) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID . LLAVE_DER

    LLAVE_DER       shift and go to state 288


state 283

    (47) slice -> ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA NUMERO . PARENT_DER

    PARENT_DER      shift and go to state 289


state 284

    (37) incremento -> ID INCREMENTO .

    LLAVE_IZQ       reduce using rule 37 (incremento -> ID INCREMENTO .)


state 285

    (38) incremento -> ID ASIGNACION . ID

    ID              shift and go to state 290


state 286

    (39) incremento -> ID DECREMENTO .

    LLAVE_IZQ       reduce using rule 39 (incremento -> ID DECREMENTO .)


state 287

    (36) sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ . programa LLAVE_DER
    (1) programa -> . expression
    (2) programa -> . impresion
    (3) programa -> . sentencia
    (4) programa -> . asignacion
    (5) programa -> . longvariable
    (6) programa -> . boolcadena
    (7) programa -> . companum
    (8) programa -> . compaid
    (9) programa -> . sentenciafor
    (10) programa -> . arreglo
    (11) programa -> . slice
    (12) programa -> . capslice
    (13) programa -> . switch
    (14) programa -> . map
    (15) programa -> . asignar_valor_map
    (16) programa -> . eliminar_valor_map
    (17) programa -> . obtener_valor_map
    (18) programa -> . funcion
    (19) programa -> . cadenabool
    (20) programa -> . enterocadena
    (21) programa -> . cadenaentero
    (22) programa -> . flotantecadena
    (23) programa -> . cadenaflotante
    (24) programa -> . seman_operacion
    (49) expression -> . expression MAS term
    (50) expression -> . expression MENOS term
    (51) expression -> . term
    (25) impresion -> . FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (26) impresion -> . FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER
    (27) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (28) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER
    (56) sentencia -> . IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER
    (33) asignacion -> . ID ASIGNACION factor
    (34) asignacion -> . VAR ID tipo_dato ASIGNACION factor
    (35) asignacion -> . VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor
    (29) longvariable -> . ID PARENT_IZQ CADENA PARENT_DER
    (30) longvariable -> . ID PARENT_IZQ ID PARENT_DER
    (112) boolcadena -> . STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER
    (31) companum -> . NUMERO comparacion NUMERO
    (32) compaid -> . ID comparacion ID
    (36) sentenciafor -> . FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
    (40) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato
    (41) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (46) slice -> . ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (47) slice -> . ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA NUMERO PARENT_DER
    (48) capslice -> . ID PARENT_IZQ ID PARENT_DER
    (67) switch -> . SWITCH ID LLAVE_IZQ cases LLAVE_DER
    (73) map -> . VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (74) map -> . ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER
    (75) map -> . ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (87) asignar_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor
    (88) eliminar_valor_map -> . DELETE PARENT_IZQ ID COMA valor PARENT_DER
    (89) obtener_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER
    (90) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (91) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (113) cadenabool -> . STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER
    (116) enterocadena -> . STRCONV PUNTO FORMATINT PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (117) cadenaentero -> . STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER
    (114) flotantecadena -> . STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER
    (115) cadenaflotante -> . STRCONV PUNTO PARSEFLOAT PARENT_IZQ FLOAT COMA NUMERO PARENT_DER
    (95) seman_operacion -> . NUMERO MAS NUMERO
    (96) seman_operacion -> . NUMERO MENOS NUMERO
    (97) seman_operacion -> . NUMERO MULTIPLICADOR NUMERO
    (98) seman_operacion -> . NUMERO DIVISOR NUMERO
    (99) seman_operacion -> . NUMERO MOD_DIVISION NUMERO
    (100) seman_operacion -> . FLOAT MAS NUMERO
    (101) seman_operacion -> . FLOAT MENOS NUMERO
    (102) seman_operacion -> . FLOAT MULTIPLICADOR NUMERO
    (103) seman_operacion -> . FLOAT DIVISOR NUMERO
    (104) seman_operacion -> . NUMERO MAS FLOAT
    (105) seman_operacion -> . NUMERO MENOS FLOAT
    (106) seman_operacion -> . NUMERO MULTIPLICADOR FLOAT
    (107) seman_operacion -> . NUMERO DIVISOR FLOAT
    (108) seman_operacion -> . FLOAT MAS FLOAT
    (109) seman_operacion -> . FLOAT MENOS FLOAT
    (110) seman_operacion -> . FLOAT MULTIPLICADOR FLOAT
    (111) seman_operacion -> . FLOAT DIVISOR FLOAT
    (52) term -> . term MULTIPLICADOR factor
    (53) term -> . term DIVISOR factor
    (54) term -> . term MOD_DIVISION factor
    (55) term -> . factor
    (63) factor -> . NUMERO
    (64) factor -> . ID
    (65) factor -> . CADENA
    (66) factor -> . PARENT_IZQ expression PARENT_DER

    FMT             shift and go to state 27
    IF              shift and go to state 31
    ID              shift and go to state 33
    VAR             shift and go to state 34
    STRCONV         shift and go to state 35
    NUMERO          shift and go to state 30
    FOR             shift and go to state 36
    SWITCH          shift and go to state 37
    DELETE          shift and go to state 38
    FUNC            shift and go to state 39
    FLOAT           shift and go to state 40
    CADENA          shift and go to state 29
    PARENT_IZQ      shift and go to state 28

    factor                         shift and go to state 32
    programa                       shift and go to state 291
    expression                     shift and go to state 2
    impresion                      shift and go to state 3
    sentencia                      shift and go to state 4
    asignacion                     shift and go to state 5
    longvariable                   shift and go to state 6
    boolcadena                     shift and go to state 7
    companum                       shift and go to state 8
    compaid                        shift and go to state 9
    sentenciafor                   shift and go to state 10
    arreglo                        shift and go to state 11
    slice                          shift and go to state 12
    capslice                       shift and go to state 13
    switch                         shift and go to state 14
    map                            shift and go to state 15
    asignar_valor_map              shift and go to state 16
    eliminar_valor_map             shift and go to state 17
    obtener_valor_map              shift and go to state 18
    funcion                        shift and go to state 19
    cadenabool                     shift and go to state 20
    enterocadena                   shift and go to state 21
    cadenaentero                   shift and go to state 22
    flotantecadena                 shift and go to state 23
    cadenaflotante                 shift and go to state 24
    seman_operacion                shift and go to state 25
    term                           shift and go to state 26

state 288

    (91) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER .

    $end            reduce using rule 91 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER .)
    LLAVE_DER       reduce using rule 91 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER .)
    DEFAULT         reduce using rule 91 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER .)
    CASE            reduce using rule 91 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER .)
    RETURN          reduce using rule 91 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER .)


state 289

    (47) slice -> ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA NUMERO PARENT_DER .

    $end            reduce using rule 47 (slice -> ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA NUMERO PARENT_DER .)
    LLAVE_DER       reduce using rule 47 (slice -> ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA NUMERO PARENT_DER .)
    DEFAULT         reduce using rule 47 (slice -> ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA NUMERO PARENT_DER .)
    CASE            reduce using rule 47 (slice -> ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA NUMERO PARENT_DER .)
    RETURN          reduce using rule 47 (slice -> ID ASIGNACION ID PARENT_IZQ CORCHETE_IZQ CORCHETE_DER ID COMA NUMERO COMA NUMERO PARENT_DER .)


state 290

    (38) incremento -> ID ASIGNACION ID .

    LLAVE_IZQ       reduce using rule 38 (incremento -> ID ASIGNACION ID .)


state 291

    (36) sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa . LLAVE_DER

    LLAVE_DER       shift and go to state 292


state 292

    (36) sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER .

    $end            reduce using rule 36 (sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER .)
    LLAVE_DER       reduce using rule 36 (sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER .)
    DEFAULT         reduce using rule 36 (sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER .)
    CASE            reduce using rule 36 (sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER .)
    RETURN          reduce using rule 36 (sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MULTIPLICADOR in state 30 resolved as shift
WARNING: shift/reduce conflict for DIVISOR in state 30 resolved as shift
WARNING: shift/reduce conflict for MOD_DIVISION in state 30 resolved as shift
WARNING: shift/reduce conflict for MAS in state 30 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 30 resolved as shift
WARNING: reduce/reduce conflict in state 143 resolved using rule (longvariable -> ID PARENT_IZQ ID PARENT_DER)
WARNING: rejected rule (capslice -> ID PARENT_IZQ ID PARENT_DER) in state 143
WARNING: Rule (capslice -> ID PARENT_IZQ ID PARENT_DER) is never reduced
