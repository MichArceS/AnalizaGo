Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    BREAK
    COMILLA
    COMMENT_BLOQUE_DER
    COMMENT_BLOQUE_IZQ
    COMMENT_LINEA
    CONST
    CONTAINS
    CONTINUE
    DEFER
    DOBLE_COMILLA
    ELSE
    ESPACIADO
    FALLTHROUGH
    FALSE
    GO
    IGUAL
    IMPORT
    INTERFACE
    LEN
    PACKAGE
    PIPE
    RANGE
    SELECT
    SPLIT
    STRINGS
    STRUCT
    TRUE
    TYPE
    VACIO

Grammar

Rule 0     S' -> programa
Rule 1     programa -> expression
Rule 2     programa -> impresion
Rule 3     programa -> sentencia
Rule 4     programa -> asignacion
Rule 5     programa -> longvariable
Rule 6     programa -> boolcadena
Rule 7     programa -> companum
Rule 8     programa -> compaid
Rule 9     programa -> sentenciafor
Rule 10    programa -> arreglo
Rule 11    programa -> slice
Rule 12    programa -> capslice
Rule 13    programa -> switch
Rule 14    programa -> map
Rule 15    programa -> asignar_valor_map
Rule 16    programa -> eliminar_valor_map
Rule 17    programa -> obtener_valor_map
Rule 18    programa -> funcion
Rule 19    programa -> cadenabool
Rule 20    programa -> enterocadena
Rule 21    programa -> cadenaentero
Rule 22    programa -> flotantecadena
Rule 23    programa -> cadenaflotante
Rule 24    programa -> seman_operacion
Rule 25    programa -> incremento
Rule 26    impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER
Rule 27    impresion -> FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER
Rule 28    impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER
Rule 29    impresion -> FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER
Rule 30    impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA PARENT_DER
Rule 31    longvariable -> ID PARENT_IZQ CADENA PARENT_DER
Rule 32    longvariable -> ID PARENT_IZQ ID PARENT_DER
Rule 33    companum -> NUMERO comparacion NUMERO
Rule 34    compaid -> ID comparacion ID
Rule 35    asignacion -> ID ASIGNACION factor
Rule 36    asignacion -> VAR ID tipo_dato ASIGNACION factor
Rule 37    asignacion -> VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor
Rule 38    sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
Rule 39    incremento -> ID INCREMENTO
Rule 40    incremento -> ID ASIGNACION ID
Rule 41    incremento -> ID DECREMENTO
Rule 42    arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato
Rule 43    arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
Rule 44    cantidad -> NUMERO
Rule 45    cantidad -> ARRPUNTOS
Rule 46    valores -> factor
Rule 47    valores -> factor COMA valores
Rule 48    slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
Rule 49    slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO PARENT_DER
Rule 50    capslice -> ID PARENT_IZQ ID PARENT_DER
Rule 51    expression -> expression MAS term
Rule 52    expression -> expression MENOS term
Rule 53    expression -> term
Rule 54    term -> term MULTIPLICADOR factor
Rule 55    term -> term DIVISOR factor
Rule 56    term -> term MOD_DIVISION factor
Rule 57    term -> factor
Rule 58    sentencia -> IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER
Rule 59    comparacion -> IGUALDAD
Rule 60    comparacion -> MAYOR
Rule 61    comparacion -> MENOR
Rule 62    comparacion -> MAYOR_IGU
Rule 63    comparacion -> MENOR_IGU
Rule 64    comparacion -> DESIGUALDAD
Rule 65    factor -> NUMERO
Rule 66    factor -> ID
Rule 67    factor -> CADENA
Rule 68    factor -> FLOAT
Rule 69    factor -> PARENT_IZQ expression PARENT_DER
Rule 70    switch -> SWITCH ID LLAVE_IZQ cases LLAVE_DER
Rule 71    cases -> case
Rule 72    cases -> case default
Rule 73    cases -> case cases
Rule 74    case -> CASE factor DOS_PUNTOS programa
Rule 75    default -> DEFAULT DOS_PUNTOS programa
Rule 76    map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
Rule 77    map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER
Rule 78    map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
Rule 79    tipo_dato -> INT
Rule 80    tipo_dato -> STRING
Rule 81    tipo_dato -> INT64
Rule 82    tipo_dato -> FLOAT32
Rule 83    tipo_dato -> FLOAT64
Rule 84    tipo_dato -> INT32
Rule 85    valores -> clave_valor
Rule 86    valores -> clave_valor COMA valores
Rule 87    clave_valor -> valor DOS_PUNTOS valor
Rule 88    valor -> CADENA
Rule 89    valor -> NUMERO
Rule 90    asignar_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor
Rule 91    eliminar_valor_map -> DELETE PARENT_IZQ ID COMA valor PARENT_DER
Rule 92    obtener_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER
Rule 93    funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
Rule 94    funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
Rule 95    funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ RETURN ID LLAVE_DER
Rule 96    argumentos -> ID tipo_dato
Rule 97    argumentos -> ID tipo_dato COMA argumentos
Rule 98    empty -> <empty>
Rule 99    seman_operacion -> NUMERO MAS NUMERO
Rule 100   seman_operacion -> NUMERO MENOS NUMERO
Rule 101   seman_operacion -> NUMERO MULTIPLICADOR NUMERO
Rule 102   seman_operacion -> NUMERO DIVISOR NUMERO
Rule 103   seman_operacion -> NUMERO MOD_DIVISION NUMERO
Rule 104   seman_operacion -> FLOAT MAS NUMERO
Rule 105   seman_operacion -> FLOAT MENOS NUMERO
Rule 106   seman_operacion -> FLOAT MULTIPLICADOR NUMERO
Rule 107   seman_operacion -> FLOAT DIVISOR NUMERO
Rule 108   seman_operacion -> NUMERO MAS FLOAT
Rule 109   seman_operacion -> NUMERO MENOS FLOAT
Rule 110   seman_operacion -> NUMERO MULTIPLICADOR FLOAT
Rule 111   seman_operacion -> NUMERO DIVISOR FLOAT
Rule 112   seman_operacion -> FLOAT MAS FLOAT
Rule 113   seman_operacion -> FLOAT MENOS FLOAT
Rule 114   seman_operacion -> FLOAT MULTIPLICADOR FLOAT
Rule 115   seman_operacion -> FLOAT DIVISOR FLOAT
Rule 116   boolcadena -> STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER
Rule 117   cadenabool -> STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER
Rule 118   flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER
Rule 119   cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ CADENA COMA NUMERO PARENT_DER
Rule 120   enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ NUMERO COMA NUMERO PARENT_DER
Rule 121   cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER

Terminals, with rules where they appear

AMPERSAND            : 
ARRPUNTOS            : 45
ASIGNACION           : 35 36 37 38 40 42 43 48 49 77 78 90
BOOLEAN              : 116
BREAK                : 
CADENA               : 26 28 30 31 67 88 117 118 119 121
CASE                 : 74
COMA                 : 26 28 37 37 47 48 49 49 86 91 97 118 118 119 120 121 121
COMILLA              : 
COMMENT_BLOQUE_DER   : 
COMMENT_BLOQUE_IZQ   : 
COMMENT_LINEA        : 
CONST                : 
CONTAINS             : 
CONTINUE             : 
CORCHETE_DER         : 42 43 48 49 76 77 78 90 92
CORCHETE_IZQ         : 42 43 48 49 76 77 78 90 92
DECREMENTO           : 41
DEFAULT              : 75
DEFER                : 
DELETE               : 91
DESIGUALDAD          : 64
DIVISOR              : 55 102 107 111 115
DOBLE_COMILLA        : 
DOS_PUNTOS           : 74 75 87
ELSE                 : 
ESPACIADO            : 
FALLTHROUGH          : 
FALSE                : 
FIN_SENTENCIA        : 38 38
FLOAT                : 68 104 105 106 107 108 109 110 111 112 112 113 113 114 114 115 115 118
FLOAT32              : 82
FLOAT64              : 83
FMT                  : 26 27 28 29 30
FOR                  : 38
FORMATBOOL           : 116
FORMATFLOAT          : 118
FORMATINT            : 120
FUNC                 : 93 94 95
GO                   : 
ID                   : 31 32 32 34 34 35 36 37 37 38 38 39 40 40 41 42 43 48 49 50 50 66 70 76 77 78 90 91 92 93 94 94 95 95 96 97
IF                   : 58
IGUAL                : 
IGUALDAD             : 59
IMPORT               : 
INCREMENTO           : 39
INT                  : 79
INT32                : 84
INT64                : 81
INTERFACE            : 
LEN                  : 
LLAVE_DER            : 38 43 58 70 76 78 93 94 95
LLAVE_IZQ            : 38 43 58 70 76 78 93 94 95
MAKE                 : 48 49 77
MAP                  : 76 77 78
MAS                  : 51 99 104 108 112
MAYOR                : 60
MAYOR_IGU            : 62
MENOR                : 61
MENOR_IGU            : 63
MENOS                : 52 100 105 109 113
MOD_DIVISION         : 56 103
MULTIPLICADOR        : 54 101 106 110 114
NUMERO               : 26 28 33 33 44 48 49 49 65 89 99 99 100 100 101 101 102 102 103 103 104 105 106 107 108 109 110 111 118 119 120 120 121 121
PACKAGE              : 
PARENT_DER           : 26 27 28 29 30 31 32 48 49 50 69 77 91 93 94 95 116 117 118 119 120 121
PARENT_IZQ           : 26 27 28 29 30 31 32 48 49 50 69 77 91 93 94 95 116 117 118 119 120 121
PARSEBOOL            : 117
PARSEFLOAT           : 119
PARSEINT             : 121
PIPE                 : 
PRINTF               : 26 27
PRINTLN              : 28 29 30
PUNTO                : 26 27 28 29 30 116 117 118 119 120 121
RANGE                : 
RETURN               : 94 95
SELECT               : 
SPLIT                : 
STRCONV              : 116 117 118 119 120 121
STRING               : 80
STRINGS              : 
STRUCT               : 
SWITCH               : 70
TRUE                 : 
TYPE                 : 
VACIO                : 
VAR                  : 36 37 76
error                : 

Nonterminals, with rules where they appear

argumentos           : 93 94 95 97
arreglo              : 10
asignacion           : 4
asignar_valor_map    : 15
boolcadena           : 6
cadenabool           : 19
cadenaentero         : 21
cadenaflotante       : 23
cantidad             : 42 43
capslice             : 12
case                 : 71 72 73
cases                : 70 73
clave_valor          : 85 86
compaid              : 8
companum             : 7
comparacion          : 33 34 38 58
default              : 72
eliminar_valor_map   : 16
empty                : 27 29
enterocadena         : 20
expression           : 1 51 52 69
factor               : 35 36 37 37 38 38 46 47 54 55 56 57 58 58 74
flotantecadena       : 22
funcion              : 18
impresion            : 2
incremento           : 25 38
longvariable         : 5
map                  : 14
obtener_valor_map    : 17
programa             : 38 58 74 75 93 94 0
seman_operacion      : 24
sentencia            : 3
sentenciafor         : 9
slice                : 11
switch               : 13
term                 : 51 52 53 54 55 56
tipo_dato            : 36 37 42 43 48 49 76 76 77 77 78 78 93 94 95 96 97
valor                : 87 87 90 90 91 92
valores              : 43 47 76 78 86

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . expression
    (2) programa -> . impresion
    (3) programa -> . sentencia
    (4) programa -> . asignacion
    (5) programa -> . longvariable
    (6) programa -> . boolcadena
    (7) programa -> . companum
    (8) programa -> . compaid
    (9) programa -> . sentenciafor
    (10) programa -> . arreglo
    (11) programa -> . slice
    (12) programa -> . capslice
    (13) programa -> . switch
    (14) programa -> . map
    (15) programa -> . asignar_valor_map
    (16) programa -> . eliminar_valor_map
    (17) programa -> . obtener_valor_map
    (18) programa -> . funcion
    (19) programa -> . cadenabool
    (20) programa -> . enterocadena
    (21) programa -> . cadenaentero
    (22) programa -> . flotantecadena
    (23) programa -> . cadenaflotante
    (24) programa -> . seman_operacion
    (25) programa -> . incremento
    (51) expression -> . expression MAS term
    (52) expression -> . expression MENOS term
    (53) expression -> . term
    (26) impresion -> . FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (27) impresion -> . FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER
    (28) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (29) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER
    (30) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ CADENA PARENT_DER
    (58) sentencia -> . IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER
    (35) asignacion -> . ID ASIGNACION factor
    (36) asignacion -> . VAR ID tipo_dato ASIGNACION factor
    (37) asignacion -> . VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor
    (31) longvariable -> . ID PARENT_IZQ CADENA PARENT_DER
    (32) longvariable -> . ID PARENT_IZQ ID PARENT_DER
    (116) boolcadena -> . STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER
    (33) companum -> . NUMERO comparacion NUMERO
    (34) compaid -> . ID comparacion ID
    (38) sentenciafor -> . FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
    (42) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato
    (43) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (48) slice -> . ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (49) slice -> . ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO PARENT_DER
    (50) capslice -> . ID PARENT_IZQ ID PARENT_DER
    (70) switch -> . SWITCH ID LLAVE_IZQ cases LLAVE_DER
    (76) map -> . VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (77) map -> . ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER
    (78) map -> . ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (90) asignar_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor
    (91) eliminar_valor_map -> . DELETE PARENT_IZQ ID COMA valor PARENT_DER
    (92) obtener_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER
    (93) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (94) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (95) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ RETURN ID LLAVE_DER
    (117) cadenabool -> . STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER
    (120) enterocadena -> . STRCONV PUNTO FORMATINT PARENT_IZQ NUMERO COMA NUMERO PARENT_DER
    (121) cadenaentero -> . STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER
    (118) flotantecadena -> . STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER
    (119) cadenaflotante -> . STRCONV PUNTO PARSEFLOAT PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (99) seman_operacion -> . NUMERO MAS NUMERO
    (100) seman_operacion -> . NUMERO MENOS NUMERO
    (101) seman_operacion -> . NUMERO MULTIPLICADOR NUMERO
    (102) seman_operacion -> . NUMERO DIVISOR NUMERO
    (103) seman_operacion -> . NUMERO MOD_DIVISION NUMERO
    (104) seman_operacion -> . FLOAT MAS NUMERO
    (105) seman_operacion -> . FLOAT MENOS NUMERO
    (106) seman_operacion -> . FLOAT MULTIPLICADOR NUMERO
    (107) seman_operacion -> . FLOAT DIVISOR NUMERO
    (108) seman_operacion -> . NUMERO MAS FLOAT
    (109) seman_operacion -> . NUMERO MENOS FLOAT
    (110) seman_operacion -> . NUMERO MULTIPLICADOR FLOAT
    (111) seman_operacion -> . NUMERO DIVISOR FLOAT
    (112) seman_operacion -> . FLOAT MAS FLOAT
    (113) seman_operacion -> . FLOAT MENOS FLOAT
    (114) seman_operacion -> . FLOAT MULTIPLICADOR FLOAT
    (115) seman_operacion -> . FLOAT DIVISOR FLOAT
    (39) incremento -> . ID INCREMENTO
    (40) incremento -> . ID ASIGNACION ID
    (41) incremento -> . ID DECREMENTO
    (54) term -> . term MULTIPLICADOR factor
    (55) term -> . term DIVISOR factor
    (56) term -> . term MOD_DIVISION factor
    (57) term -> . factor
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    FMT             shift and go to state 28
    IF              shift and go to state 32
    ID              shift and go to state 34
    VAR             shift and go to state 35
    STRCONV         shift and go to state 36
    NUMERO          shift and go to state 31
    FOR             shift and go to state 37
    SWITCH          shift and go to state 38
    DELETE          shift and go to state 39
    FUNC            shift and go to state 40
    FLOAT           shift and go to state 41
    CADENA          shift and go to state 30
    PARENT_IZQ      shift and go to state 29

    programa                       shift and go to state 1
    expression                     shift and go to state 2
    impresion                      shift and go to state 3
    sentencia                      shift and go to state 4
    asignacion                     shift and go to state 5
    longvariable                   shift and go to state 6
    boolcadena                     shift and go to state 7
    companum                       shift and go to state 8
    compaid                        shift and go to state 9
    sentenciafor                   shift and go to state 10
    arreglo                        shift and go to state 11
    slice                          shift and go to state 12
    capslice                       shift and go to state 13
    switch                         shift and go to state 14
    map                            shift and go to state 15
    asignar_valor_map              shift and go to state 16
    eliminar_valor_map             shift and go to state 17
    obtener_valor_map              shift and go to state 18
    funcion                        shift and go to state 19
    cadenabool                     shift and go to state 20
    enterocadena                   shift and go to state 21
    cadenaentero                   shift and go to state 22
    flotantecadena                 shift and go to state 23
    cadenaflotante                 shift and go to state 24
    seman_operacion                shift and go to state 25
    incremento                     shift and go to state 26
    term                           shift and go to state 27
    factor                         shift and go to state 33

state 1

    (0) S' -> programa .



state 2

    (1) programa -> expression .
    (51) expression -> expression . MAS term
    (52) expression -> expression . MENOS term

    $end            reduce using rule 1 (programa -> expression .)
    LLAVE_DER       reduce using rule 1 (programa -> expression .)
    DEFAULT         reduce using rule 1 (programa -> expression .)
    CASE            reduce using rule 1 (programa -> expression .)
    RETURN          reduce using rule 1 (programa -> expression .)
    MAS             shift and go to state 42
    MENOS           shift and go to state 43


state 3

    (2) programa -> impresion .

    $end            reduce using rule 2 (programa -> impresion .)
    LLAVE_DER       reduce using rule 2 (programa -> impresion .)
    DEFAULT         reduce using rule 2 (programa -> impresion .)
    CASE            reduce using rule 2 (programa -> impresion .)
    RETURN          reduce using rule 2 (programa -> impresion .)


state 4

    (3) programa -> sentencia .

    $end            reduce using rule 3 (programa -> sentencia .)
    LLAVE_DER       reduce using rule 3 (programa -> sentencia .)
    DEFAULT         reduce using rule 3 (programa -> sentencia .)
    CASE            reduce using rule 3 (programa -> sentencia .)
    RETURN          reduce using rule 3 (programa -> sentencia .)


state 5

    (4) programa -> asignacion .

    $end            reduce using rule 4 (programa -> asignacion .)
    LLAVE_DER       reduce using rule 4 (programa -> asignacion .)
    DEFAULT         reduce using rule 4 (programa -> asignacion .)
    CASE            reduce using rule 4 (programa -> asignacion .)
    RETURN          reduce using rule 4 (programa -> asignacion .)


state 6

    (5) programa -> longvariable .

    $end            reduce using rule 5 (programa -> longvariable .)
    LLAVE_DER       reduce using rule 5 (programa -> longvariable .)
    DEFAULT         reduce using rule 5 (programa -> longvariable .)
    CASE            reduce using rule 5 (programa -> longvariable .)
    RETURN          reduce using rule 5 (programa -> longvariable .)


state 7

    (6) programa -> boolcadena .

    $end            reduce using rule 6 (programa -> boolcadena .)
    LLAVE_DER       reduce using rule 6 (programa -> boolcadena .)
    DEFAULT         reduce using rule 6 (programa -> boolcadena .)
    CASE            reduce using rule 6 (programa -> boolcadena .)
    RETURN          reduce using rule 6 (programa -> boolcadena .)


state 8

    (7) programa -> companum .

    $end            reduce using rule 7 (programa -> companum .)
    LLAVE_DER       reduce using rule 7 (programa -> companum .)
    DEFAULT         reduce using rule 7 (programa -> companum .)
    CASE            reduce using rule 7 (programa -> companum .)
    RETURN          reduce using rule 7 (programa -> companum .)


state 9

    (8) programa -> compaid .

    $end            reduce using rule 8 (programa -> compaid .)
    LLAVE_DER       reduce using rule 8 (programa -> compaid .)
    DEFAULT         reduce using rule 8 (programa -> compaid .)
    CASE            reduce using rule 8 (programa -> compaid .)
    RETURN          reduce using rule 8 (programa -> compaid .)


state 10

    (9) programa -> sentenciafor .

    $end            reduce using rule 9 (programa -> sentenciafor .)
    LLAVE_DER       reduce using rule 9 (programa -> sentenciafor .)
    DEFAULT         reduce using rule 9 (programa -> sentenciafor .)
    CASE            reduce using rule 9 (programa -> sentenciafor .)
    RETURN          reduce using rule 9 (programa -> sentenciafor .)


state 11

    (10) programa -> arreglo .

    $end            reduce using rule 10 (programa -> arreglo .)
    LLAVE_DER       reduce using rule 10 (programa -> arreglo .)
    DEFAULT         reduce using rule 10 (programa -> arreglo .)
    CASE            reduce using rule 10 (programa -> arreglo .)
    RETURN          reduce using rule 10 (programa -> arreglo .)


state 12

    (11) programa -> slice .

    $end            reduce using rule 11 (programa -> slice .)
    LLAVE_DER       reduce using rule 11 (programa -> slice .)
    DEFAULT         reduce using rule 11 (programa -> slice .)
    CASE            reduce using rule 11 (programa -> slice .)
    RETURN          reduce using rule 11 (programa -> slice .)


state 13

    (12) programa -> capslice .

    $end            reduce using rule 12 (programa -> capslice .)
    LLAVE_DER       reduce using rule 12 (programa -> capslice .)
    DEFAULT         reduce using rule 12 (programa -> capslice .)
    CASE            reduce using rule 12 (programa -> capslice .)
    RETURN          reduce using rule 12 (programa -> capslice .)


state 14

    (13) programa -> switch .

    $end            reduce using rule 13 (programa -> switch .)
    LLAVE_DER       reduce using rule 13 (programa -> switch .)
    DEFAULT         reduce using rule 13 (programa -> switch .)
    CASE            reduce using rule 13 (programa -> switch .)
    RETURN          reduce using rule 13 (programa -> switch .)


state 15

    (14) programa -> map .

    $end            reduce using rule 14 (programa -> map .)
    LLAVE_DER       reduce using rule 14 (programa -> map .)
    DEFAULT         reduce using rule 14 (programa -> map .)
    CASE            reduce using rule 14 (programa -> map .)
    RETURN          reduce using rule 14 (programa -> map .)


state 16

    (15) programa -> asignar_valor_map .

    $end            reduce using rule 15 (programa -> asignar_valor_map .)
    LLAVE_DER       reduce using rule 15 (programa -> asignar_valor_map .)
    DEFAULT         reduce using rule 15 (programa -> asignar_valor_map .)
    CASE            reduce using rule 15 (programa -> asignar_valor_map .)
    RETURN          reduce using rule 15 (programa -> asignar_valor_map .)


state 17

    (16) programa -> eliminar_valor_map .

    $end            reduce using rule 16 (programa -> eliminar_valor_map .)
    LLAVE_DER       reduce using rule 16 (programa -> eliminar_valor_map .)
    DEFAULT         reduce using rule 16 (programa -> eliminar_valor_map .)
    CASE            reduce using rule 16 (programa -> eliminar_valor_map .)
    RETURN          reduce using rule 16 (programa -> eliminar_valor_map .)


state 18

    (17) programa -> obtener_valor_map .

    $end            reduce using rule 17 (programa -> obtener_valor_map .)
    LLAVE_DER       reduce using rule 17 (programa -> obtener_valor_map .)
    DEFAULT         reduce using rule 17 (programa -> obtener_valor_map .)
    CASE            reduce using rule 17 (programa -> obtener_valor_map .)
    RETURN          reduce using rule 17 (programa -> obtener_valor_map .)


state 19

    (18) programa -> funcion .

    $end            reduce using rule 18 (programa -> funcion .)
    LLAVE_DER       reduce using rule 18 (programa -> funcion .)
    DEFAULT         reduce using rule 18 (programa -> funcion .)
    CASE            reduce using rule 18 (programa -> funcion .)
    RETURN          reduce using rule 18 (programa -> funcion .)


state 20

    (19) programa -> cadenabool .

    $end            reduce using rule 19 (programa -> cadenabool .)
    LLAVE_DER       reduce using rule 19 (programa -> cadenabool .)
    DEFAULT         reduce using rule 19 (programa -> cadenabool .)
    CASE            reduce using rule 19 (programa -> cadenabool .)
    RETURN          reduce using rule 19 (programa -> cadenabool .)


state 21

    (20) programa -> enterocadena .

    $end            reduce using rule 20 (programa -> enterocadena .)
    LLAVE_DER       reduce using rule 20 (programa -> enterocadena .)
    DEFAULT         reduce using rule 20 (programa -> enterocadena .)
    CASE            reduce using rule 20 (programa -> enterocadena .)
    RETURN          reduce using rule 20 (programa -> enterocadena .)


state 22

    (21) programa -> cadenaentero .

    $end            reduce using rule 21 (programa -> cadenaentero .)
    LLAVE_DER       reduce using rule 21 (programa -> cadenaentero .)
    DEFAULT         reduce using rule 21 (programa -> cadenaentero .)
    CASE            reduce using rule 21 (programa -> cadenaentero .)
    RETURN          reduce using rule 21 (programa -> cadenaentero .)


state 23

    (22) programa -> flotantecadena .

    $end            reduce using rule 22 (programa -> flotantecadena .)
    LLAVE_DER       reduce using rule 22 (programa -> flotantecadena .)
    DEFAULT         reduce using rule 22 (programa -> flotantecadena .)
    CASE            reduce using rule 22 (programa -> flotantecadena .)
    RETURN          reduce using rule 22 (programa -> flotantecadena .)


state 24

    (23) programa -> cadenaflotante .

    $end            reduce using rule 23 (programa -> cadenaflotante .)
    LLAVE_DER       reduce using rule 23 (programa -> cadenaflotante .)
    DEFAULT         reduce using rule 23 (programa -> cadenaflotante .)
    CASE            reduce using rule 23 (programa -> cadenaflotante .)
    RETURN          reduce using rule 23 (programa -> cadenaflotante .)


state 25

    (24) programa -> seman_operacion .

    $end            reduce using rule 24 (programa -> seman_operacion .)
    LLAVE_DER       reduce using rule 24 (programa -> seman_operacion .)
    DEFAULT         reduce using rule 24 (programa -> seman_operacion .)
    CASE            reduce using rule 24 (programa -> seman_operacion .)
    RETURN          reduce using rule 24 (programa -> seman_operacion .)


state 26

    (25) programa -> incremento .

    $end            reduce using rule 25 (programa -> incremento .)
    LLAVE_DER       reduce using rule 25 (programa -> incremento .)
    DEFAULT         reduce using rule 25 (programa -> incremento .)
    CASE            reduce using rule 25 (programa -> incremento .)
    RETURN          reduce using rule 25 (programa -> incremento .)


state 27

    (53) expression -> term .
    (54) term -> term . MULTIPLICADOR factor
    (55) term -> term . DIVISOR factor
    (56) term -> term . MOD_DIVISION factor

    MAS             reduce using rule 53 (expression -> term .)
    MENOS           reduce using rule 53 (expression -> term .)
    $end            reduce using rule 53 (expression -> term .)
    PARENT_DER      reduce using rule 53 (expression -> term .)
    LLAVE_DER       reduce using rule 53 (expression -> term .)
    DEFAULT         reduce using rule 53 (expression -> term .)
    CASE            reduce using rule 53 (expression -> term .)
    RETURN          reduce using rule 53 (expression -> term .)
    MULTIPLICADOR   shift and go to state 44
    DIVISOR         shift and go to state 45
    MOD_DIVISION    shift and go to state 46


state 28

    (26) impresion -> FMT . PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (27) impresion -> FMT . PUNTO PRINTF PARENT_IZQ empty PARENT_DER
    (28) impresion -> FMT . PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (29) impresion -> FMT . PUNTO PRINTLN PARENT_IZQ empty PARENT_DER
    (30) impresion -> FMT . PUNTO PRINTLN PARENT_IZQ CADENA PARENT_DER

    PUNTO           shift and go to state 47


state 29

    (69) factor -> PARENT_IZQ . expression PARENT_DER
    (51) expression -> . expression MAS term
    (52) expression -> . expression MENOS term
    (53) expression -> . term
    (54) term -> . term MULTIPLICADOR factor
    (55) term -> . term DIVISOR factor
    (56) term -> . term MOD_DIVISION factor
    (57) term -> . factor
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 49
    ID              shift and go to state 50
    CADENA          shift and go to state 30
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    expression                     shift and go to state 48
    term                           shift and go to state 27
    factor                         shift and go to state 33

state 30

    (67) factor -> CADENA .

    MULTIPLICADOR   reduce using rule 67 (factor -> CADENA .)
    DIVISOR         reduce using rule 67 (factor -> CADENA .)
    MOD_DIVISION    reduce using rule 67 (factor -> CADENA .)
    MAS             reduce using rule 67 (factor -> CADENA .)
    MENOS           reduce using rule 67 (factor -> CADENA .)
    $end            reduce using rule 67 (factor -> CADENA .)
    PARENT_DER      reduce using rule 67 (factor -> CADENA .)
    IGUALDAD        reduce using rule 67 (factor -> CADENA .)
    MAYOR           reduce using rule 67 (factor -> CADENA .)
    MENOR           reduce using rule 67 (factor -> CADENA .)
    MAYOR_IGU       reduce using rule 67 (factor -> CADENA .)
    MENOR_IGU       reduce using rule 67 (factor -> CADENA .)
    DESIGUALDAD     reduce using rule 67 (factor -> CADENA .)
    LLAVE_DER       reduce using rule 67 (factor -> CADENA .)
    DEFAULT         reduce using rule 67 (factor -> CADENA .)
    CASE            reduce using rule 67 (factor -> CADENA .)
    RETURN          reduce using rule 67 (factor -> CADENA .)
    LLAVE_IZQ       reduce using rule 67 (factor -> CADENA .)
    FIN_SENTENCIA   reduce using rule 67 (factor -> CADENA .)
    DOS_PUNTOS      reduce using rule 67 (factor -> CADENA .)
    COMA            reduce using rule 67 (factor -> CADENA .)


state 31

    (33) companum -> NUMERO . comparacion NUMERO
    (99) seman_operacion -> NUMERO . MAS NUMERO
    (100) seman_operacion -> NUMERO . MENOS NUMERO
    (101) seman_operacion -> NUMERO . MULTIPLICADOR NUMERO
    (102) seman_operacion -> NUMERO . DIVISOR NUMERO
    (103) seman_operacion -> NUMERO . MOD_DIVISION NUMERO
    (108) seman_operacion -> NUMERO . MAS FLOAT
    (109) seman_operacion -> NUMERO . MENOS FLOAT
    (110) seman_operacion -> NUMERO . MULTIPLICADOR FLOAT
    (111) seman_operacion -> NUMERO . DIVISOR FLOAT
    (65) factor -> NUMERO .
    (59) comparacion -> . IGUALDAD
    (60) comparacion -> . MAYOR
    (61) comparacion -> . MENOR
    (62) comparacion -> . MAYOR_IGU
    (63) comparacion -> . MENOR_IGU
    (64) comparacion -> . DESIGUALDAD

  ! shift/reduce conflict for MULTIPLICADOR resolved as shift
  ! shift/reduce conflict for DIVISOR resolved as shift
  ! shift/reduce conflict for MOD_DIVISION resolved as shift
  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    MAS             shift and go to state 53
    MENOS           shift and go to state 54
    MULTIPLICADOR   shift and go to state 55
    DIVISOR         shift and go to state 56
    MOD_DIVISION    shift and go to state 57
    $end            reduce using rule 65 (factor -> NUMERO .)
    LLAVE_DER       reduce using rule 65 (factor -> NUMERO .)
    DEFAULT         reduce using rule 65 (factor -> NUMERO .)
    CASE            reduce using rule 65 (factor -> NUMERO .)
    RETURN          reduce using rule 65 (factor -> NUMERO .)
    IGUALDAD        shift and go to state 58
    MAYOR           shift and go to state 59
    MENOR           shift and go to state 60
    MAYOR_IGU       shift and go to state 61
    MENOR_IGU       shift and go to state 62
    DESIGUALDAD     shift and go to state 63

  ! MULTIPLICADOR   [ reduce using rule 65 (factor -> NUMERO .) ]
  ! DIVISOR         [ reduce using rule 65 (factor -> NUMERO .) ]
  ! MOD_DIVISION    [ reduce using rule 65 (factor -> NUMERO .) ]
  ! MAS             [ reduce using rule 65 (factor -> NUMERO .) ]
  ! MENOS           [ reduce using rule 65 (factor -> NUMERO .) ]

    comparacion                    shift and go to state 52

state 32

    (58) sentencia -> IF . factor comparacion factor LLAVE_IZQ programa LLAVE_DER
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 49
    ID              shift and go to state 50
    CADENA          shift and go to state 30
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    factor                         shift and go to state 64

state 33

    (57) term -> factor .

    MULTIPLICADOR   reduce using rule 57 (term -> factor .)
    DIVISOR         reduce using rule 57 (term -> factor .)
    MOD_DIVISION    reduce using rule 57 (term -> factor .)
    MAS             reduce using rule 57 (term -> factor .)
    MENOS           reduce using rule 57 (term -> factor .)
    $end            reduce using rule 57 (term -> factor .)
    PARENT_DER      reduce using rule 57 (term -> factor .)
    LLAVE_DER       reduce using rule 57 (term -> factor .)
    DEFAULT         reduce using rule 57 (term -> factor .)
    CASE            reduce using rule 57 (term -> factor .)
    RETURN          reduce using rule 57 (term -> factor .)


state 34

    (35) asignacion -> ID . ASIGNACION factor
    (31) longvariable -> ID . PARENT_IZQ CADENA PARENT_DER
    (32) longvariable -> ID . PARENT_IZQ ID PARENT_DER
    (34) compaid -> ID . comparacion ID
    (42) arreglo -> ID . ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato
    (43) arreglo -> ID . ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (48) slice -> ID . ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (49) slice -> ID . ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO PARENT_DER
    (50) capslice -> ID . PARENT_IZQ ID PARENT_DER
    (77) map -> ID . ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER
    (78) map -> ID . ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (90) asignar_valor_map -> ID . CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor
    (92) obtener_valor_map -> ID . CORCHETE_IZQ valor CORCHETE_DER
    (39) incremento -> ID . INCREMENTO
    (40) incremento -> ID . ASIGNACION ID
    (41) incremento -> ID . DECREMENTO
    (66) factor -> ID .
    (59) comparacion -> . IGUALDAD
    (60) comparacion -> . MAYOR
    (61) comparacion -> . MENOR
    (62) comparacion -> . MAYOR_IGU
    (63) comparacion -> . MENOR_IGU
    (64) comparacion -> . DESIGUALDAD

    ASIGNACION      shift and go to state 65
    PARENT_IZQ      shift and go to state 66
    CORCHETE_IZQ    shift and go to state 68
    INCREMENTO      shift and go to state 69
    DECREMENTO      shift and go to state 70
    MULTIPLICADOR   reduce using rule 66 (factor -> ID .)
    DIVISOR         reduce using rule 66 (factor -> ID .)
    MOD_DIVISION    reduce using rule 66 (factor -> ID .)
    MAS             reduce using rule 66 (factor -> ID .)
    MENOS           reduce using rule 66 (factor -> ID .)
    $end            reduce using rule 66 (factor -> ID .)
    LLAVE_DER       reduce using rule 66 (factor -> ID .)
    DEFAULT         reduce using rule 66 (factor -> ID .)
    CASE            reduce using rule 66 (factor -> ID .)
    RETURN          reduce using rule 66 (factor -> ID .)
    IGUALDAD        shift and go to state 58
    MAYOR           shift and go to state 59
    MENOR           shift and go to state 60
    MAYOR_IGU       shift and go to state 61
    MENOR_IGU       shift and go to state 62
    DESIGUALDAD     shift and go to state 63

    comparacion                    shift and go to state 67

state 35

    (36) asignacion -> VAR . ID tipo_dato ASIGNACION factor
    (37) asignacion -> VAR . ID COMA ID tipo_dato ASIGNACION factor COMA factor
    (76) map -> VAR . ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER

    ID              shift and go to state 71


state 36

    (116) boolcadena -> STRCONV . PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER
    (117) cadenabool -> STRCONV . PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER
    (120) enterocadena -> STRCONV . PUNTO FORMATINT PARENT_IZQ NUMERO COMA NUMERO PARENT_DER
    (121) cadenaentero -> STRCONV . PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER
    (118) flotantecadena -> STRCONV . PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER
    (119) cadenaflotante -> STRCONV . PUNTO PARSEFLOAT PARENT_IZQ CADENA COMA NUMERO PARENT_DER

    PUNTO           shift and go to state 72


state 37

    (38) sentenciafor -> FOR . ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER

    ID              shift and go to state 73


state 38

    (70) switch -> SWITCH . ID LLAVE_IZQ cases LLAVE_DER

    ID              shift and go to state 74


state 39

    (91) eliminar_valor_map -> DELETE . PARENT_IZQ ID COMA valor PARENT_DER

    PARENT_IZQ      shift and go to state 75


state 40

    (93) funcion -> FUNC . ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (94) funcion -> FUNC . ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (95) funcion -> FUNC . ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ RETURN ID LLAVE_DER

    ID              shift and go to state 76


state 41

    (104) seman_operacion -> FLOAT . MAS NUMERO
    (105) seman_operacion -> FLOAT . MENOS NUMERO
    (106) seman_operacion -> FLOAT . MULTIPLICADOR NUMERO
    (107) seman_operacion -> FLOAT . DIVISOR NUMERO
    (112) seman_operacion -> FLOAT . MAS FLOAT
    (113) seman_operacion -> FLOAT . MENOS FLOAT
    (114) seman_operacion -> FLOAT . MULTIPLICADOR FLOAT
    (115) seman_operacion -> FLOAT . DIVISOR FLOAT
    (68) factor -> FLOAT .

  ! shift/reduce conflict for MULTIPLICADOR resolved as shift
  ! shift/reduce conflict for DIVISOR resolved as shift
  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
    MAS             shift and go to state 77
    MENOS           shift and go to state 78
    MULTIPLICADOR   shift and go to state 79
    DIVISOR         shift and go to state 80
    MOD_DIVISION    reduce using rule 68 (factor -> FLOAT .)
    $end            reduce using rule 68 (factor -> FLOAT .)
    LLAVE_DER       reduce using rule 68 (factor -> FLOAT .)
    DEFAULT         reduce using rule 68 (factor -> FLOAT .)
    CASE            reduce using rule 68 (factor -> FLOAT .)
    RETURN          reduce using rule 68 (factor -> FLOAT .)

  ! MULTIPLICADOR   [ reduce using rule 68 (factor -> FLOAT .) ]
  ! DIVISOR         [ reduce using rule 68 (factor -> FLOAT .) ]
  ! MAS             [ reduce using rule 68 (factor -> FLOAT .) ]
  ! MENOS           [ reduce using rule 68 (factor -> FLOAT .) ]


state 42

    (51) expression -> expression MAS . term
    (54) term -> . term MULTIPLICADOR factor
    (55) term -> . term DIVISOR factor
    (56) term -> . term MOD_DIVISION factor
    (57) term -> . factor
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 49
    ID              shift and go to state 50
    CADENA          shift and go to state 30
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    term                           shift and go to state 81
    factor                         shift and go to state 33

state 43

    (52) expression -> expression MENOS . term
    (54) term -> . term MULTIPLICADOR factor
    (55) term -> . term DIVISOR factor
    (56) term -> . term MOD_DIVISION factor
    (57) term -> . factor
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 49
    ID              shift and go to state 50
    CADENA          shift and go to state 30
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    term                           shift and go to state 82
    factor                         shift and go to state 33

state 44

    (54) term -> term MULTIPLICADOR . factor
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 49
    ID              shift and go to state 50
    CADENA          shift and go to state 30
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    factor                         shift and go to state 83

state 45

    (55) term -> term DIVISOR . factor
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 49
    ID              shift and go to state 50
    CADENA          shift and go to state 30
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    factor                         shift and go to state 84

state 46

    (56) term -> term MOD_DIVISION . factor
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 49
    ID              shift and go to state 50
    CADENA          shift and go to state 30
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    factor                         shift and go to state 85

state 47

    (26) impresion -> FMT PUNTO . PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (27) impresion -> FMT PUNTO . PRINTF PARENT_IZQ empty PARENT_DER
    (28) impresion -> FMT PUNTO . PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (29) impresion -> FMT PUNTO . PRINTLN PARENT_IZQ empty PARENT_DER
    (30) impresion -> FMT PUNTO . PRINTLN PARENT_IZQ CADENA PARENT_DER

    PRINTF          shift and go to state 86
    PRINTLN         shift and go to state 87


state 48

    (69) factor -> PARENT_IZQ expression . PARENT_DER
    (51) expression -> expression . MAS term
    (52) expression -> expression . MENOS term

    PARENT_DER      shift and go to state 88
    MAS             shift and go to state 42
    MENOS           shift and go to state 43


state 49

    (65) factor -> NUMERO .

    MULTIPLICADOR   reduce using rule 65 (factor -> NUMERO .)
    DIVISOR         reduce using rule 65 (factor -> NUMERO .)
    MOD_DIVISION    reduce using rule 65 (factor -> NUMERO .)
    PARENT_DER      reduce using rule 65 (factor -> NUMERO .)
    MAS             reduce using rule 65 (factor -> NUMERO .)
    MENOS           reduce using rule 65 (factor -> NUMERO .)
    IGUALDAD        reduce using rule 65 (factor -> NUMERO .)
    MAYOR           reduce using rule 65 (factor -> NUMERO .)
    MENOR           reduce using rule 65 (factor -> NUMERO .)
    MAYOR_IGU       reduce using rule 65 (factor -> NUMERO .)
    MENOR_IGU       reduce using rule 65 (factor -> NUMERO .)
    DESIGUALDAD     reduce using rule 65 (factor -> NUMERO .)
    $end            reduce using rule 65 (factor -> NUMERO .)
    LLAVE_DER       reduce using rule 65 (factor -> NUMERO .)
    DEFAULT         reduce using rule 65 (factor -> NUMERO .)
    CASE            reduce using rule 65 (factor -> NUMERO .)
    RETURN          reduce using rule 65 (factor -> NUMERO .)
    LLAVE_IZQ       reduce using rule 65 (factor -> NUMERO .)
    FIN_SENTENCIA   reduce using rule 65 (factor -> NUMERO .)
    DOS_PUNTOS      reduce using rule 65 (factor -> NUMERO .)
    COMA            reduce using rule 65 (factor -> NUMERO .)


state 50

    (66) factor -> ID .

    MULTIPLICADOR   reduce using rule 66 (factor -> ID .)
    DIVISOR         reduce using rule 66 (factor -> ID .)
    MOD_DIVISION    reduce using rule 66 (factor -> ID .)
    PARENT_DER      reduce using rule 66 (factor -> ID .)
    MAS             reduce using rule 66 (factor -> ID .)
    MENOS           reduce using rule 66 (factor -> ID .)
    IGUALDAD        reduce using rule 66 (factor -> ID .)
    MAYOR           reduce using rule 66 (factor -> ID .)
    MENOR           reduce using rule 66 (factor -> ID .)
    MAYOR_IGU       reduce using rule 66 (factor -> ID .)
    MENOR_IGU       reduce using rule 66 (factor -> ID .)
    DESIGUALDAD     reduce using rule 66 (factor -> ID .)
    $end            reduce using rule 66 (factor -> ID .)
    LLAVE_DER       reduce using rule 66 (factor -> ID .)
    DEFAULT         reduce using rule 66 (factor -> ID .)
    CASE            reduce using rule 66 (factor -> ID .)
    RETURN          reduce using rule 66 (factor -> ID .)
    LLAVE_IZQ       reduce using rule 66 (factor -> ID .)
    FIN_SENTENCIA   reduce using rule 66 (factor -> ID .)
    DOS_PUNTOS      reduce using rule 66 (factor -> ID .)
    COMA            reduce using rule 66 (factor -> ID .)


state 51

    (68) factor -> FLOAT .

    MULTIPLICADOR   reduce using rule 68 (factor -> FLOAT .)
    DIVISOR         reduce using rule 68 (factor -> FLOAT .)
    MOD_DIVISION    reduce using rule 68 (factor -> FLOAT .)
    PARENT_DER      reduce using rule 68 (factor -> FLOAT .)
    MAS             reduce using rule 68 (factor -> FLOAT .)
    MENOS           reduce using rule 68 (factor -> FLOAT .)
    IGUALDAD        reduce using rule 68 (factor -> FLOAT .)
    MAYOR           reduce using rule 68 (factor -> FLOAT .)
    MENOR           reduce using rule 68 (factor -> FLOAT .)
    MAYOR_IGU       reduce using rule 68 (factor -> FLOAT .)
    MENOR_IGU       reduce using rule 68 (factor -> FLOAT .)
    DESIGUALDAD     reduce using rule 68 (factor -> FLOAT .)
    $end            reduce using rule 68 (factor -> FLOAT .)
    LLAVE_DER       reduce using rule 68 (factor -> FLOAT .)
    DEFAULT         reduce using rule 68 (factor -> FLOAT .)
    CASE            reduce using rule 68 (factor -> FLOAT .)
    RETURN          reduce using rule 68 (factor -> FLOAT .)
    LLAVE_IZQ       reduce using rule 68 (factor -> FLOAT .)
    FIN_SENTENCIA   reduce using rule 68 (factor -> FLOAT .)
    DOS_PUNTOS      reduce using rule 68 (factor -> FLOAT .)
    COMA            reduce using rule 68 (factor -> FLOAT .)


state 52

    (33) companum -> NUMERO comparacion . NUMERO

    NUMERO          shift and go to state 89


state 53

    (99) seman_operacion -> NUMERO MAS . NUMERO
    (108) seman_operacion -> NUMERO MAS . FLOAT

    NUMERO          shift and go to state 90
    FLOAT           shift and go to state 91


state 54

    (100) seman_operacion -> NUMERO MENOS . NUMERO
    (109) seman_operacion -> NUMERO MENOS . FLOAT

    NUMERO          shift and go to state 92
    FLOAT           shift and go to state 93


state 55

    (101) seman_operacion -> NUMERO MULTIPLICADOR . NUMERO
    (110) seman_operacion -> NUMERO MULTIPLICADOR . FLOAT

    NUMERO          shift and go to state 94
    FLOAT           shift and go to state 95


state 56

    (102) seman_operacion -> NUMERO DIVISOR . NUMERO
    (111) seman_operacion -> NUMERO DIVISOR . FLOAT

    NUMERO          shift and go to state 96
    FLOAT           shift and go to state 97


state 57

    (103) seman_operacion -> NUMERO MOD_DIVISION . NUMERO

    NUMERO          shift and go to state 98


state 58

    (59) comparacion -> IGUALDAD .

    NUMERO          reduce using rule 59 (comparacion -> IGUALDAD .)
    ID              reduce using rule 59 (comparacion -> IGUALDAD .)
    CADENA          reduce using rule 59 (comparacion -> IGUALDAD .)
    FLOAT           reduce using rule 59 (comparacion -> IGUALDAD .)
    PARENT_IZQ      reduce using rule 59 (comparacion -> IGUALDAD .)


state 59

    (60) comparacion -> MAYOR .

    NUMERO          reduce using rule 60 (comparacion -> MAYOR .)
    ID              reduce using rule 60 (comparacion -> MAYOR .)
    CADENA          reduce using rule 60 (comparacion -> MAYOR .)
    FLOAT           reduce using rule 60 (comparacion -> MAYOR .)
    PARENT_IZQ      reduce using rule 60 (comparacion -> MAYOR .)


state 60

    (61) comparacion -> MENOR .

    NUMERO          reduce using rule 61 (comparacion -> MENOR .)
    ID              reduce using rule 61 (comparacion -> MENOR .)
    CADENA          reduce using rule 61 (comparacion -> MENOR .)
    FLOAT           reduce using rule 61 (comparacion -> MENOR .)
    PARENT_IZQ      reduce using rule 61 (comparacion -> MENOR .)


state 61

    (62) comparacion -> MAYOR_IGU .

    NUMERO          reduce using rule 62 (comparacion -> MAYOR_IGU .)
    ID              reduce using rule 62 (comparacion -> MAYOR_IGU .)
    CADENA          reduce using rule 62 (comparacion -> MAYOR_IGU .)
    FLOAT           reduce using rule 62 (comparacion -> MAYOR_IGU .)
    PARENT_IZQ      reduce using rule 62 (comparacion -> MAYOR_IGU .)


state 62

    (63) comparacion -> MENOR_IGU .

    NUMERO          reduce using rule 63 (comparacion -> MENOR_IGU .)
    ID              reduce using rule 63 (comparacion -> MENOR_IGU .)
    CADENA          reduce using rule 63 (comparacion -> MENOR_IGU .)
    FLOAT           reduce using rule 63 (comparacion -> MENOR_IGU .)
    PARENT_IZQ      reduce using rule 63 (comparacion -> MENOR_IGU .)


state 63

    (64) comparacion -> DESIGUALDAD .

    NUMERO          reduce using rule 64 (comparacion -> DESIGUALDAD .)
    ID              reduce using rule 64 (comparacion -> DESIGUALDAD .)
    CADENA          reduce using rule 64 (comparacion -> DESIGUALDAD .)
    FLOAT           reduce using rule 64 (comparacion -> DESIGUALDAD .)
    PARENT_IZQ      reduce using rule 64 (comparacion -> DESIGUALDAD .)


state 64

    (58) sentencia -> IF factor . comparacion factor LLAVE_IZQ programa LLAVE_DER
    (59) comparacion -> . IGUALDAD
    (60) comparacion -> . MAYOR
    (61) comparacion -> . MENOR
    (62) comparacion -> . MAYOR_IGU
    (63) comparacion -> . MENOR_IGU
    (64) comparacion -> . DESIGUALDAD

    IGUALDAD        shift and go to state 58
    MAYOR           shift and go to state 59
    MENOR           shift and go to state 60
    MAYOR_IGU       shift and go to state 61
    MENOR_IGU       shift and go to state 62
    DESIGUALDAD     shift and go to state 63

    comparacion                    shift and go to state 99

state 65

    (35) asignacion -> ID ASIGNACION . factor
    (42) arreglo -> ID ASIGNACION . CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato
    (43) arreglo -> ID ASIGNACION . CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (48) slice -> ID ASIGNACION . MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (49) slice -> ID ASIGNACION . MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO PARENT_DER
    (77) map -> ID ASIGNACION . MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER
    (78) map -> ID ASIGNACION . MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (40) incremento -> ID ASIGNACION . ID
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    CORCHETE_IZQ    shift and go to state 102
    MAKE            shift and go to state 103
    MAP             shift and go to state 104
    ID              shift and go to state 100
    NUMERO          shift and go to state 49
    CADENA          shift and go to state 30
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    factor                         shift and go to state 101

state 66

    (31) longvariable -> ID PARENT_IZQ . CADENA PARENT_DER
    (32) longvariable -> ID PARENT_IZQ . ID PARENT_DER
    (50) capslice -> ID PARENT_IZQ . ID PARENT_DER

    CADENA          shift and go to state 106
    ID              shift and go to state 105


state 67

    (34) compaid -> ID comparacion . ID

    ID              shift and go to state 107


state 68

    (90) asignar_valor_map -> ID CORCHETE_IZQ . valor CORCHETE_DER ASIGNACION valor
    (92) obtener_valor_map -> ID CORCHETE_IZQ . valor CORCHETE_DER
    (88) valor -> . CADENA
    (89) valor -> . NUMERO

    CADENA          shift and go to state 109
    NUMERO          shift and go to state 110

    valor                          shift and go to state 108

state 69

    (39) incremento -> ID INCREMENTO .

    $end            reduce using rule 39 (incremento -> ID INCREMENTO .)
    LLAVE_DER       reduce using rule 39 (incremento -> ID INCREMENTO .)
    DEFAULT         reduce using rule 39 (incremento -> ID INCREMENTO .)
    CASE            reduce using rule 39 (incremento -> ID INCREMENTO .)
    RETURN          reduce using rule 39 (incremento -> ID INCREMENTO .)
    LLAVE_IZQ       reduce using rule 39 (incremento -> ID INCREMENTO .)


state 70

    (41) incremento -> ID DECREMENTO .

    $end            reduce using rule 41 (incremento -> ID DECREMENTO .)
    LLAVE_DER       reduce using rule 41 (incremento -> ID DECREMENTO .)
    DEFAULT         reduce using rule 41 (incremento -> ID DECREMENTO .)
    CASE            reduce using rule 41 (incremento -> ID DECREMENTO .)
    RETURN          reduce using rule 41 (incremento -> ID DECREMENTO .)
    LLAVE_IZQ       reduce using rule 41 (incremento -> ID DECREMENTO .)


state 71

    (36) asignacion -> VAR ID . tipo_dato ASIGNACION factor
    (37) asignacion -> VAR ID . COMA ID tipo_dato ASIGNACION factor COMA factor
    (76) map -> VAR ID . MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (79) tipo_dato -> . INT
    (80) tipo_dato -> . STRING
    (81) tipo_dato -> . INT64
    (82) tipo_dato -> . FLOAT32
    (83) tipo_dato -> . FLOAT64
    (84) tipo_dato -> . INT32

    COMA            shift and go to state 112
    MAP             shift and go to state 113
    INT             shift and go to state 114
    STRING          shift and go to state 115
    INT64           shift and go to state 116
    FLOAT32         shift and go to state 117
    FLOAT64         shift and go to state 118
    INT32           shift and go to state 119

    tipo_dato                      shift and go to state 111

state 72

    (116) boolcadena -> STRCONV PUNTO . FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER
    (117) cadenabool -> STRCONV PUNTO . PARSEBOOL PARENT_IZQ CADENA PARENT_DER
    (120) enterocadena -> STRCONV PUNTO . FORMATINT PARENT_IZQ NUMERO COMA NUMERO PARENT_DER
    (121) cadenaentero -> STRCONV PUNTO . PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER
    (118) flotantecadena -> STRCONV PUNTO . FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER
    (119) cadenaflotante -> STRCONV PUNTO . PARSEFLOAT PARENT_IZQ CADENA COMA NUMERO PARENT_DER

    FORMATBOOL      shift and go to state 120
    PARSEBOOL       shift and go to state 121
    FORMATINT       shift and go to state 122
    PARSEINT        shift and go to state 123
    FORMATFLOAT     shift and go to state 124
    PARSEFLOAT      shift and go to state 125


state 73

    (38) sentenciafor -> FOR ID . ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER

    ASIGNACION      shift and go to state 126


state 74

    (70) switch -> SWITCH ID . LLAVE_IZQ cases LLAVE_DER

    LLAVE_IZQ       shift and go to state 127


state 75

    (91) eliminar_valor_map -> DELETE PARENT_IZQ . ID COMA valor PARENT_DER

    ID              shift and go to state 128


state 76

    (93) funcion -> FUNC ID . PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (94) funcion -> FUNC ID . PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (95) funcion -> FUNC ID . PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ RETURN ID LLAVE_DER

    PARENT_IZQ      shift and go to state 129


state 77

    (104) seman_operacion -> FLOAT MAS . NUMERO
    (112) seman_operacion -> FLOAT MAS . FLOAT

    NUMERO          shift and go to state 131
    FLOAT           shift and go to state 130


state 78

    (105) seman_operacion -> FLOAT MENOS . NUMERO
    (113) seman_operacion -> FLOAT MENOS . FLOAT

    NUMERO          shift and go to state 133
    FLOAT           shift and go to state 132


state 79

    (106) seman_operacion -> FLOAT MULTIPLICADOR . NUMERO
    (114) seman_operacion -> FLOAT MULTIPLICADOR . FLOAT

    NUMERO          shift and go to state 135
    FLOAT           shift and go to state 134


state 80

    (107) seman_operacion -> FLOAT DIVISOR . NUMERO
    (115) seman_operacion -> FLOAT DIVISOR . FLOAT

    NUMERO          shift and go to state 137
    FLOAT           shift and go to state 136


state 81

    (51) expression -> expression MAS term .
    (54) term -> term . MULTIPLICADOR factor
    (55) term -> term . DIVISOR factor
    (56) term -> term . MOD_DIVISION factor

    MAS             reduce using rule 51 (expression -> expression MAS term .)
    MENOS           reduce using rule 51 (expression -> expression MAS term .)
    $end            reduce using rule 51 (expression -> expression MAS term .)
    PARENT_DER      reduce using rule 51 (expression -> expression MAS term .)
    LLAVE_DER       reduce using rule 51 (expression -> expression MAS term .)
    DEFAULT         reduce using rule 51 (expression -> expression MAS term .)
    CASE            reduce using rule 51 (expression -> expression MAS term .)
    RETURN          reduce using rule 51 (expression -> expression MAS term .)
    MULTIPLICADOR   shift and go to state 44
    DIVISOR         shift and go to state 45
    MOD_DIVISION    shift and go to state 46


state 82

    (52) expression -> expression MENOS term .
    (54) term -> term . MULTIPLICADOR factor
    (55) term -> term . DIVISOR factor
    (56) term -> term . MOD_DIVISION factor

    MAS             reduce using rule 52 (expression -> expression MENOS term .)
    MENOS           reduce using rule 52 (expression -> expression MENOS term .)
    $end            reduce using rule 52 (expression -> expression MENOS term .)
    PARENT_DER      reduce using rule 52 (expression -> expression MENOS term .)
    LLAVE_DER       reduce using rule 52 (expression -> expression MENOS term .)
    DEFAULT         reduce using rule 52 (expression -> expression MENOS term .)
    CASE            reduce using rule 52 (expression -> expression MENOS term .)
    RETURN          reduce using rule 52 (expression -> expression MENOS term .)
    MULTIPLICADOR   shift and go to state 44
    DIVISOR         shift and go to state 45
    MOD_DIVISION    shift and go to state 46


state 83

    (54) term -> term MULTIPLICADOR factor .

    MULTIPLICADOR   reduce using rule 54 (term -> term MULTIPLICADOR factor .)
    DIVISOR         reduce using rule 54 (term -> term MULTIPLICADOR factor .)
    MOD_DIVISION    reduce using rule 54 (term -> term MULTIPLICADOR factor .)
    MAS             reduce using rule 54 (term -> term MULTIPLICADOR factor .)
    MENOS           reduce using rule 54 (term -> term MULTIPLICADOR factor .)
    $end            reduce using rule 54 (term -> term MULTIPLICADOR factor .)
    PARENT_DER      reduce using rule 54 (term -> term MULTIPLICADOR factor .)
    LLAVE_DER       reduce using rule 54 (term -> term MULTIPLICADOR factor .)
    DEFAULT         reduce using rule 54 (term -> term MULTIPLICADOR factor .)
    CASE            reduce using rule 54 (term -> term MULTIPLICADOR factor .)
    RETURN          reduce using rule 54 (term -> term MULTIPLICADOR factor .)


state 84

    (55) term -> term DIVISOR factor .

    MULTIPLICADOR   reduce using rule 55 (term -> term DIVISOR factor .)
    DIVISOR         reduce using rule 55 (term -> term DIVISOR factor .)
    MOD_DIVISION    reduce using rule 55 (term -> term DIVISOR factor .)
    MAS             reduce using rule 55 (term -> term DIVISOR factor .)
    MENOS           reduce using rule 55 (term -> term DIVISOR factor .)
    $end            reduce using rule 55 (term -> term DIVISOR factor .)
    PARENT_DER      reduce using rule 55 (term -> term DIVISOR factor .)
    LLAVE_DER       reduce using rule 55 (term -> term DIVISOR factor .)
    DEFAULT         reduce using rule 55 (term -> term DIVISOR factor .)
    CASE            reduce using rule 55 (term -> term DIVISOR factor .)
    RETURN          reduce using rule 55 (term -> term DIVISOR factor .)


state 85

    (56) term -> term MOD_DIVISION factor .

    MULTIPLICADOR   reduce using rule 56 (term -> term MOD_DIVISION factor .)
    DIVISOR         reduce using rule 56 (term -> term MOD_DIVISION factor .)
    MOD_DIVISION    reduce using rule 56 (term -> term MOD_DIVISION factor .)
    MAS             reduce using rule 56 (term -> term MOD_DIVISION factor .)
    MENOS           reduce using rule 56 (term -> term MOD_DIVISION factor .)
    $end            reduce using rule 56 (term -> term MOD_DIVISION factor .)
    PARENT_DER      reduce using rule 56 (term -> term MOD_DIVISION factor .)
    LLAVE_DER       reduce using rule 56 (term -> term MOD_DIVISION factor .)
    DEFAULT         reduce using rule 56 (term -> term MOD_DIVISION factor .)
    CASE            reduce using rule 56 (term -> term MOD_DIVISION factor .)
    RETURN          reduce using rule 56 (term -> term MOD_DIVISION factor .)


state 86

    (26) impresion -> FMT PUNTO PRINTF . PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (27) impresion -> FMT PUNTO PRINTF . PARENT_IZQ empty PARENT_DER

    PARENT_IZQ      shift and go to state 138


state 87

    (28) impresion -> FMT PUNTO PRINTLN . PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (29) impresion -> FMT PUNTO PRINTLN . PARENT_IZQ empty PARENT_DER
    (30) impresion -> FMT PUNTO PRINTLN . PARENT_IZQ CADENA PARENT_DER

    PARENT_IZQ      shift and go to state 139


state 88

    (69) factor -> PARENT_IZQ expression PARENT_DER .

    MULTIPLICADOR   reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    DIVISOR         reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    MOD_DIVISION    reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    MAS             reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    MENOS           reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    $end            reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    PARENT_DER      reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    IGUALDAD        reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    MAYOR           reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    MENOR           reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    MAYOR_IGU       reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    MENOR_IGU       reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    DESIGUALDAD     reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    LLAVE_DER       reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    DEFAULT         reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    CASE            reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    RETURN          reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    LLAVE_IZQ       reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    FIN_SENTENCIA   reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    DOS_PUNTOS      reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)
    COMA            reduce using rule 69 (factor -> PARENT_IZQ expression PARENT_DER .)


state 89

    (33) companum -> NUMERO comparacion NUMERO .

    $end            reduce using rule 33 (companum -> NUMERO comparacion NUMERO .)
    LLAVE_DER       reduce using rule 33 (companum -> NUMERO comparacion NUMERO .)
    DEFAULT         reduce using rule 33 (companum -> NUMERO comparacion NUMERO .)
    CASE            reduce using rule 33 (companum -> NUMERO comparacion NUMERO .)
    RETURN          reduce using rule 33 (companum -> NUMERO comparacion NUMERO .)


state 90

    (99) seman_operacion -> NUMERO MAS NUMERO .

    $end            reduce using rule 99 (seman_operacion -> NUMERO MAS NUMERO .)
    LLAVE_DER       reduce using rule 99 (seman_operacion -> NUMERO MAS NUMERO .)
    DEFAULT         reduce using rule 99 (seman_operacion -> NUMERO MAS NUMERO .)
    CASE            reduce using rule 99 (seman_operacion -> NUMERO MAS NUMERO .)
    RETURN          reduce using rule 99 (seman_operacion -> NUMERO MAS NUMERO .)


state 91

    (108) seman_operacion -> NUMERO MAS FLOAT .

    $end            reduce using rule 108 (seman_operacion -> NUMERO MAS FLOAT .)
    LLAVE_DER       reduce using rule 108 (seman_operacion -> NUMERO MAS FLOAT .)
    DEFAULT         reduce using rule 108 (seman_operacion -> NUMERO MAS FLOAT .)
    CASE            reduce using rule 108 (seman_operacion -> NUMERO MAS FLOAT .)
    RETURN          reduce using rule 108 (seman_operacion -> NUMERO MAS FLOAT .)


state 92

    (100) seman_operacion -> NUMERO MENOS NUMERO .

    $end            reduce using rule 100 (seman_operacion -> NUMERO MENOS NUMERO .)
    LLAVE_DER       reduce using rule 100 (seman_operacion -> NUMERO MENOS NUMERO .)
    DEFAULT         reduce using rule 100 (seman_operacion -> NUMERO MENOS NUMERO .)
    CASE            reduce using rule 100 (seman_operacion -> NUMERO MENOS NUMERO .)
    RETURN          reduce using rule 100 (seman_operacion -> NUMERO MENOS NUMERO .)


state 93

    (109) seman_operacion -> NUMERO MENOS FLOAT .

    $end            reduce using rule 109 (seman_operacion -> NUMERO MENOS FLOAT .)
    LLAVE_DER       reduce using rule 109 (seman_operacion -> NUMERO MENOS FLOAT .)
    DEFAULT         reduce using rule 109 (seman_operacion -> NUMERO MENOS FLOAT .)
    CASE            reduce using rule 109 (seman_operacion -> NUMERO MENOS FLOAT .)
    RETURN          reduce using rule 109 (seman_operacion -> NUMERO MENOS FLOAT .)


state 94

    (101) seman_operacion -> NUMERO MULTIPLICADOR NUMERO .

    $end            reduce using rule 101 (seman_operacion -> NUMERO MULTIPLICADOR NUMERO .)
    LLAVE_DER       reduce using rule 101 (seman_operacion -> NUMERO MULTIPLICADOR NUMERO .)
    DEFAULT         reduce using rule 101 (seman_operacion -> NUMERO MULTIPLICADOR NUMERO .)
    CASE            reduce using rule 101 (seman_operacion -> NUMERO MULTIPLICADOR NUMERO .)
    RETURN          reduce using rule 101 (seman_operacion -> NUMERO MULTIPLICADOR NUMERO .)


state 95

    (110) seman_operacion -> NUMERO MULTIPLICADOR FLOAT .

    $end            reduce using rule 110 (seman_operacion -> NUMERO MULTIPLICADOR FLOAT .)
    LLAVE_DER       reduce using rule 110 (seman_operacion -> NUMERO MULTIPLICADOR FLOAT .)
    DEFAULT         reduce using rule 110 (seman_operacion -> NUMERO MULTIPLICADOR FLOAT .)
    CASE            reduce using rule 110 (seman_operacion -> NUMERO MULTIPLICADOR FLOAT .)
    RETURN          reduce using rule 110 (seman_operacion -> NUMERO MULTIPLICADOR FLOAT .)


state 96

    (102) seman_operacion -> NUMERO DIVISOR NUMERO .

    $end            reduce using rule 102 (seman_operacion -> NUMERO DIVISOR NUMERO .)
    LLAVE_DER       reduce using rule 102 (seman_operacion -> NUMERO DIVISOR NUMERO .)
    DEFAULT         reduce using rule 102 (seman_operacion -> NUMERO DIVISOR NUMERO .)
    CASE            reduce using rule 102 (seman_operacion -> NUMERO DIVISOR NUMERO .)
    RETURN          reduce using rule 102 (seman_operacion -> NUMERO DIVISOR NUMERO .)


state 97

    (111) seman_operacion -> NUMERO DIVISOR FLOAT .

    $end            reduce using rule 111 (seman_operacion -> NUMERO DIVISOR FLOAT .)
    LLAVE_DER       reduce using rule 111 (seman_operacion -> NUMERO DIVISOR FLOAT .)
    DEFAULT         reduce using rule 111 (seman_operacion -> NUMERO DIVISOR FLOAT .)
    CASE            reduce using rule 111 (seman_operacion -> NUMERO DIVISOR FLOAT .)
    RETURN          reduce using rule 111 (seman_operacion -> NUMERO DIVISOR FLOAT .)


state 98

    (103) seman_operacion -> NUMERO MOD_DIVISION NUMERO .

    $end            reduce using rule 103 (seman_operacion -> NUMERO MOD_DIVISION NUMERO .)
    LLAVE_DER       reduce using rule 103 (seman_operacion -> NUMERO MOD_DIVISION NUMERO .)
    DEFAULT         reduce using rule 103 (seman_operacion -> NUMERO MOD_DIVISION NUMERO .)
    CASE            reduce using rule 103 (seman_operacion -> NUMERO MOD_DIVISION NUMERO .)
    RETURN          reduce using rule 103 (seman_operacion -> NUMERO MOD_DIVISION NUMERO .)


state 99

    (58) sentencia -> IF factor comparacion . factor LLAVE_IZQ programa LLAVE_DER
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 49
    ID              shift and go to state 50
    CADENA          shift and go to state 30
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    factor                         shift and go to state 140

state 100

    (40) incremento -> ID ASIGNACION ID .
    (66) factor -> ID .

  ! reduce/reduce conflict for $end resolved using rule 40 (incremento -> ID ASIGNACION ID .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 40 (incremento -> ID ASIGNACION ID .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 40 (incremento -> ID ASIGNACION ID .)
  ! reduce/reduce conflict for CASE resolved using rule 40 (incremento -> ID ASIGNACION ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 40 (incremento -> ID ASIGNACION ID .)
    $end            reduce using rule 40 (incremento -> ID ASIGNACION ID .)
    LLAVE_DER       reduce using rule 40 (incremento -> ID ASIGNACION ID .)
    DEFAULT         reduce using rule 40 (incremento -> ID ASIGNACION ID .)
    CASE            reduce using rule 40 (incremento -> ID ASIGNACION ID .)
    RETURN          reduce using rule 40 (incremento -> ID ASIGNACION ID .)

  ! $end            [ reduce using rule 66 (factor -> ID .) ]
  ! LLAVE_DER       [ reduce using rule 66 (factor -> ID .) ]
  ! DEFAULT         [ reduce using rule 66 (factor -> ID .) ]
  ! CASE            [ reduce using rule 66 (factor -> ID .) ]
  ! RETURN          [ reduce using rule 66 (factor -> ID .) ]


state 101

    (35) asignacion -> ID ASIGNACION factor .

    $end            reduce using rule 35 (asignacion -> ID ASIGNACION factor .)
    LLAVE_DER       reduce using rule 35 (asignacion -> ID ASIGNACION factor .)
    DEFAULT         reduce using rule 35 (asignacion -> ID ASIGNACION factor .)
    CASE            reduce using rule 35 (asignacion -> ID ASIGNACION factor .)
    RETURN          reduce using rule 35 (asignacion -> ID ASIGNACION factor .)


state 102

    (42) arreglo -> ID ASIGNACION CORCHETE_IZQ . cantidad CORCHETE_DER tipo_dato
    (43) arreglo -> ID ASIGNACION CORCHETE_IZQ . cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (44) cantidad -> . NUMERO
    (45) cantidad -> . ARRPUNTOS

    NUMERO          shift and go to state 142
    ARRPUNTOS       shift and go to state 143

    cantidad                       shift and go to state 141

state 103

    (48) slice -> ID ASIGNACION MAKE . PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (49) slice -> ID ASIGNACION MAKE . PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO PARENT_DER
    (77) map -> ID ASIGNACION MAKE . PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER

    PARENT_IZQ      shift and go to state 144


state 104

    (78) map -> ID ASIGNACION MAP . CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER

    CORCHETE_IZQ    shift and go to state 145


state 105

    (32) longvariable -> ID PARENT_IZQ ID . PARENT_DER
    (50) capslice -> ID PARENT_IZQ ID . PARENT_DER

    PARENT_DER      shift and go to state 146


state 106

    (31) longvariable -> ID PARENT_IZQ CADENA . PARENT_DER

    PARENT_DER      shift and go to state 147


state 107

    (34) compaid -> ID comparacion ID .

    $end            reduce using rule 34 (compaid -> ID comparacion ID .)
    LLAVE_DER       reduce using rule 34 (compaid -> ID comparacion ID .)
    DEFAULT         reduce using rule 34 (compaid -> ID comparacion ID .)
    CASE            reduce using rule 34 (compaid -> ID comparacion ID .)
    RETURN          reduce using rule 34 (compaid -> ID comparacion ID .)


state 108

    (90) asignar_valor_map -> ID CORCHETE_IZQ valor . CORCHETE_DER ASIGNACION valor
    (92) obtener_valor_map -> ID CORCHETE_IZQ valor . CORCHETE_DER

    CORCHETE_DER    shift and go to state 148


state 109

    (88) valor -> CADENA .

    CORCHETE_DER    reduce using rule 88 (valor -> CADENA .)
    PARENT_DER      reduce using rule 88 (valor -> CADENA .)
    $end            reduce using rule 88 (valor -> CADENA .)
    LLAVE_DER       reduce using rule 88 (valor -> CADENA .)
    DEFAULT         reduce using rule 88 (valor -> CADENA .)
    CASE            reduce using rule 88 (valor -> CADENA .)
    RETURN          reduce using rule 88 (valor -> CADENA .)
    COMA            reduce using rule 88 (valor -> CADENA .)


state 110

    (89) valor -> NUMERO .

    CORCHETE_DER    reduce using rule 89 (valor -> NUMERO .)
    PARENT_DER      reduce using rule 89 (valor -> NUMERO .)
    $end            reduce using rule 89 (valor -> NUMERO .)
    LLAVE_DER       reduce using rule 89 (valor -> NUMERO .)
    DEFAULT         reduce using rule 89 (valor -> NUMERO .)
    CASE            reduce using rule 89 (valor -> NUMERO .)
    RETURN          reduce using rule 89 (valor -> NUMERO .)
    COMA            reduce using rule 89 (valor -> NUMERO .)


state 111

    (36) asignacion -> VAR ID tipo_dato . ASIGNACION factor

    ASIGNACION      shift and go to state 149


state 112

    (37) asignacion -> VAR ID COMA . ID tipo_dato ASIGNACION factor COMA factor

    ID              shift and go to state 150


state 113

    (76) map -> VAR ID MAP . CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER

    CORCHETE_IZQ    shift and go to state 151


state 114

    (79) tipo_dato -> INT .

    ASIGNACION      reduce using rule 79 (tipo_dato -> INT .)
    CORCHETE_DER    reduce using rule 79 (tipo_dato -> INT .)
    COMA            reduce using rule 79 (tipo_dato -> INT .)
    PARENT_DER      reduce using rule 79 (tipo_dato -> INT .)
    LLAVE_IZQ       reduce using rule 79 (tipo_dato -> INT .)
    $end            reduce using rule 79 (tipo_dato -> INT .)
    LLAVE_DER       reduce using rule 79 (tipo_dato -> INT .)
    DEFAULT         reduce using rule 79 (tipo_dato -> INT .)
    CASE            reduce using rule 79 (tipo_dato -> INT .)
    RETURN          reduce using rule 79 (tipo_dato -> INT .)


state 115

    (80) tipo_dato -> STRING .

    ASIGNACION      reduce using rule 80 (tipo_dato -> STRING .)
    CORCHETE_DER    reduce using rule 80 (tipo_dato -> STRING .)
    COMA            reduce using rule 80 (tipo_dato -> STRING .)
    PARENT_DER      reduce using rule 80 (tipo_dato -> STRING .)
    LLAVE_IZQ       reduce using rule 80 (tipo_dato -> STRING .)
    $end            reduce using rule 80 (tipo_dato -> STRING .)
    LLAVE_DER       reduce using rule 80 (tipo_dato -> STRING .)
    DEFAULT         reduce using rule 80 (tipo_dato -> STRING .)
    CASE            reduce using rule 80 (tipo_dato -> STRING .)
    RETURN          reduce using rule 80 (tipo_dato -> STRING .)


state 116

    (81) tipo_dato -> INT64 .

    ASIGNACION      reduce using rule 81 (tipo_dato -> INT64 .)
    CORCHETE_DER    reduce using rule 81 (tipo_dato -> INT64 .)
    COMA            reduce using rule 81 (tipo_dato -> INT64 .)
    PARENT_DER      reduce using rule 81 (tipo_dato -> INT64 .)
    LLAVE_IZQ       reduce using rule 81 (tipo_dato -> INT64 .)
    $end            reduce using rule 81 (tipo_dato -> INT64 .)
    LLAVE_DER       reduce using rule 81 (tipo_dato -> INT64 .)
    DEFAULT         reduce using rule 81 (tipo_dato -> INT64 .)
    CASE            reduce using rule 81 (tipo_dato -> INT64 .)
    RETURN          reduce using rule 81 (tipo_dato -> INT64 .)


state 117

    (82) tipo_dato -> FLOAT32 .

    ASIGNACION      reduce using rule 82 (tipo_dato -> FLOAT32 .)
    CORCHETE_DER    reduce using rule 82 (tipo_dato -> FLOAT32 .)
    COMA            reduce using rule 82 (tipo_dato -> FLOAT32 .)
    PARENT_DER      reduce using rule 82 (tipo_dato -> FLOAT32 .)
    LLAVE_IZQ       reduce using rule 82 (tipo_dato -> FLOAT32 .)
    $end            reduce using rule 82 (tipo_dato -> FLOAT32 .)
    LLAVE_DER       reduce using rule 82 (tipo_dato -> FLOAT32 .)
    DEFAULT         reduce using rule 82 (tipo_dato -> FLOAT32 .)
    CASE            reduce using rule 82 (tipo_dato -> FLOAT32 .)
    RETURN          reduce using rule 82 (tipo_dato -> FLOAT32 .)


state 118

    (83) tipo_dato -> FLOAT64 .

    ASIGNACION      reduce using rule 83 (tipo_dato -> FLOAT64 .)
    CORCHETE_DER    reduce using rule 83 (tipo_dato -> FLOAT64 .)
    COMA            reduce using rule 83 (tipo_dato -> FLOAT64 .)
    PARENT_DER      reduce using rule 83 (tipo_dato -> FLOAT64 .)
    LLAVE_IZQ       reduce using rule 83 (tipo_dato -> FLOAT64 .)
    $end            reduce using rule 83 (tipo_dato -> FLOAT64 .)
    LLAVE_DER       reduce using rule 83 (tipo_dato -> FLOAT64 .)
    DEFAULT         reduce using rule 83 (tipo_dato -> FLOAT64 .)
    CASE            reduce using rule 83 (tipo_dato -> FLOAT64 .)
    RETURN          reduce using rule 83 (tipo_dato -> FLOAT64 .)


state 119

    (84) tipo_dato -> INT32 .

    ASIGNACION      reduce using rule 84 (tipo_dato -> INT32 .)
    CORCHETE_DER    reduce using rule 84 (tipo_dato -> INT32 .)
    COMA            reduce using rule 84 (tipo_dato -> INT32 .)
    PARENT_DER      reduce using rule 84 (tipo_dato -> INT32 .)
    LLAVE_IZQ       reduce using rule 84 (tipo_dato -> INT32 .)
    $end            reduce using rule 84 (tipo_dato -> INT32 .)
    LLAVE_DER       reduce using rule 84 (tipo_dato -> INT32 .)
    DEFAULT         reduce using rule 84 (tipo_dato -> INT32 .)
    CASE            reduce using rule 84 (tipo_dato -> INT32 .)
    RETURN          reduce using rule 84 (tipo_dato -> INT32 .)


state 120

    (116) boolcadena -> STRCONV PUNTO FORMATBOOL . PARENT_IZQ BOOLEAN PARENT_DER

    PARENT_IZQ      shift and go to state 152


state 121

    (117) cadenabool -> STRCONV PUNTO PARSEBOOL . PARENT_IZQ CADENA PARENT_DER

    PARENT_IZQ      shift and go to state 153


state 122

    (120) enterocadena -> STRCONV PUNTO FORMATINT . PARENT_IZQ NUMERO COMA NUMERO PARENT_DER

    PARENT_IZQ      shift and go to state 154


state 123

    (121) cadenaentero -> STRCONV PUNTO PARSEINT . PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER

    PARENT_IZQ      shift and go to state 155


state 124

    (118) flotantecadena -> STRCONV PUNTO FORMATFLOAT . PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER

    PARENT_IZQ      shift and go to state 156


state 125

    (119) cadenaflotante -> STRCONV PUNTO PARSEFLOAT . PARENT_IZQ CADENA COMA NUMERO PARENT_DER

    PARENT_IZQ      shift and go to state 157


state 126

    (38) sentenciafor -> FOR ID ASIGNACION . factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 49
    ID              shift and go to state 50
    CADENA          shift and go to state 30
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    factor                         shift and go to state 158

state 127

    (70) switch -> SWITCH ID LLAVE_IZQ . cases LLAVE_DER
    (71) cases -> . case
    (72) cases -> . case default
    (73) cases -> . case cases
    (74) case -> . CASE factor DOS_PUNTOS programa

    CASE            shift and go to state 161

    cases                          shift and go to state 159
    case                           shift and go to state 160

state 128

    (91) eliminar_valor_map -> DELETE PARENT_IZQ ID . COMA valor PARENT_DER

    COMA            shift and go to state 162


state 129

    (93) funcion -> FUNC ID PARENT_IZQ . argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (94) funcion -> FUNC ID PARENT_IZQ . argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (95) funcion -> FUNC ID PARENT_IZQ . argumentos PARENT_DER tipo_dato LLAVE_IZQ RETURN ID LLAVE_DER
    (96) argumentos -> . ID tipo_dato
    (97) argumentos -> . ID tipo_dato COMA argumentos

    ID              shift and go to state 163

    argumentos                     shift and go to state 164

state 130

    (112) seman_operacion -> FLOAT MAS FLOAT .

    $end            reduce using rule 112 (seman_operacion -> FLOAT MAS FLOAT .)
    LLAVE_DER       reduce using rule 112 (seman_operacion -> FLOAT MAS FLOAT .)
    DEFAULT         reduce using rule 112 (seman_operacion -> FLOAT MAS FLOAT .)
    CASE            reduce using rule 112 (seman_operacion -> FLOAT MAS FLOAT .)
    RETURN          reduce using rule 112 (seman_operacion -> FLOAT MAS FLOAT .)


state 131

    (104) seman_operacion -> FLOAT MAS NUMERO .

    $end            reduce using rule 104 (seman_operacion -> FLOAT MAS NUMERO .)
    LLAVE_DER       reduce using rule 104 (seman_operacion -> FLOAT MAS NUMERO .)
    DEFAULT         reduce using rule 104 (seman_operacion -> FLOAT MAS NUMERO .)
    CASE            reduce using rule 104 (seman_operacion -> FLOAT MAS NUMERO .)
    RETURN          reduce using rule 104 (seman_operacion -> FLOAT MAS NUMERO .)


state 132

    (113) seman_operacion -> FLOAT MENOS FLOAT .

    $end            reduce using rule 113 (seman_operacion -> FLOAT MENOS FLOAT .)
    LLAVE_DER       reduce using rule 113 (seman_operacion -> FLOAT MENOS FLOAT .)
    DEFAULT         reduce using rule 113 (seman_operacion -> FLOAT MENOS FLOAT .)
    CASE            reduce using rule 113 (seman_operacion -> FLOAT MENOS FLOAT .)
    RETURN          reduce using rule 113 (seman_operacion -> FLOAT MENOS FLOAT .)


state 133

    (105) seman_operacion -> FLOAT MENOS NUMERO .

    $end            reduce using rule 105 (seman_operacion -> FLOAT MENOS NUMERO .)
    LLAVE_DER       reduce using rule 105 (seman_operacion -> FLOAT MENOS NUMERO .)
    DEFAULT         reduce using rule 105 (seman_operacion -> FLOAT MENOS NUMERO .)
    CASE            reduce using rule 105 (seman_operacion -> FLOAT MENOS NUMERO .)
    RETURN          reduce using rule 105 (seman_operacion -> FLOAT MENOS NUMERO .)


state 134

    (114) seman_operacion -> FLOAT MULTIPLICADOR FLOAT .

    $end            reduce using rule 114 (seman_operacion -> FLOAT MULTIPLICADOR FLOAT .)
    LLAVE_DER       reduce using rule 114 (seman_operacion -> FLOAT MULTIPLICADOR FLOAT .)
    DEFAULT         reduce using rule 114 (seman_operacion -> FLOAT MULTIPLICADOR FLOAT .)
    CASE            reduce using rule 114 (seman_operacion -> FLOAT MULTIPLICADOR FLOAT .)
    RETURN          reduce using rule 114 (seman_operacion -> FLOAT MULTIPLICADOR FLOAT .)


state 135

    (106) seman_operacion -> FLOAT MULTIPLICADOR NUMERO .

    $end            reduce using rule 106 (seman_operacion -> FLOAT MULTIPLICADOR NUMERO .)
    LLAVE_DER       reduce using rule 106 (seman_operacion -> FLOAT MULTIPLICADOR NUMERO .)
    DEFAULT         reduce using rule 106 (seman_operacion -> FLOAT MULTIPLICADOR NUMERO .)
    CASE            reduce using rule 106 (seman_operacion -> FLOAT MULTIPLICADOR NUMERO .)
    RETURN          reduce using rule 106 (seman_operacion -> FLOAT MULTIPLICADOR NUMERO .)


state 136

    (115) seman_operacion -> FLOAT DIVISOR FLOAT .

    $end            reduce using rule 115 (seman_operacion -> FLOAT DIVISOR FLOAT .)
    LLAVE_DER       reduce using rule 115 (seman_operacion -> FLOAT DIVISOR FLOAT .)
    DEFAULT         reduce using rule 115 (seman_operacion -> FLOAT DIVISOR FLOAT .)
    CASE            reduce using rule 115 (seman_operacion -> FLOAT DIVISOR FLOAT .)
    RETURN          reduce using rule 115 (seman_operacion -> FLOAT DIVISOR FLOAT .)


state 137

    (107) seman_operacion -> FLOAT DIVISOR NUMERO .

    $end            reduce using rule 107 (seman_operacion -> FLOAT DIVISOR NUMERO .)
    LLAVE_DER       reduce using rule 107 (seman_operacion -> FLOAT DIVISOR NUMERO .)
    DEFAULT         reduce using rule 107 (seman_operacion -> FLOAT DIVISOR NUMERO .)
    CASE            reduce using rule 107 (seman_operacion -> FLOAT DIVISOR NUMERO .)
    RETURN          reduce using rule 107 (seman_operacion -> FLOAT DIVISOR NUMERO .)


state 138

    (26) impresion -> FMT PUNTO PRINTF PARENT_IZQ . CADENA COMA NUMERO PARENT_DER
    (27) impresion -> FMT PUNTO PRINTF PARENT_IZQ . empty PARENT_DER
    (98) empty -> .

    CADENA          shift and go to state 165
    PARENT_DER      reduce using rule 98 (empty -> .)

    empty                          shift and go to state 166

state 139

    (28) impresion -> FMT PUNTO PRINTLN PARENT_IZQ . CADENA COMA NUMERO PARENT_DER
    (29) impresion -> FMT PUNTO PRINTLN PARENT_IZQ . empty PARENT_DER
    (30) impresion -> FMT PUNTO PRINTLN PARENT_IZQ . CADENA PARENT_DER
    (98) empty -> .

    CADENA          shift and go to state 167
    PARENT_DER      reduce using rule 98 (empty -> .)

    empty                          shift and go to state 168

state 140

    (58) sentencia -> IF factor comparacion factor . LLAVE_IZQ programa LLAVE_DER

    LLAVE_IZQ       shift and go to state 169


state 141

    (42) arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad . CORCHETE_DER tipo_dato
    (43) arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad . CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER

    CORCHETE_DER    shift and go to state 170


state 142

    (44) cantidad -> NUMERO .

    CORCHETE_DER    reduce using rule 44 (cantidad -> NUMERO .)


state 143

    (45) cantidad -> ARRPUNTOS .

    CORCHETE_DER    reduce using rule 45 (cantidad -> ARRPUNTOS .)


state 144

    (48) slice -> ID ASIGNACION MAKE PARENT_IZQ . CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (49) slice -> ID ASIGNACION MAKE PARENT_IZQ . CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO PARENT_DER
    (77) map -> ID ASIGNACION MAKE PARENT_IZQ . MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER

    CORCHETE_IZQ    shift and go to state 171
    MAP             shift and go to state 172


state 145

    (78) map -> ID ASIGNACION MAP CORCHETE_IZQ . tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (79) tipo_dato -> . INT
    (80) tipo_dato -> . STRING
    (81) tipo_dato -> . INT64
    (82) tipo_dato -> . FLOAT32
    (83) tipo_dato -> . FLOAT64
    (84) tipo_dato -> . INT32

    INT             shift and go to state 114
    STRING          shift and go to state 115
    INT64           shift and go to state 116
    FLOAT32         shift and go to state 117
    FLOAT64         shift and go to state 118
    INT32           shift and go to state 119

    tipo_dato                      shift and go to state 173

state 146

    (32) longvariable -> ID PARENT_IZQ ID PARENT_DER .
    (50) capslice -> ID PARENT_IZQ ID PARENT_DER .

  ! reduce/reduce conflict for $end resolved using rule 32 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 32 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 32 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)
  ! reduce/reduce conflict for CASE resolved using rule 32 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)
  ! reduce/reduce conflict for RETURN resolved using rule 32 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)
    $end            reduce using rule 32 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)
    LLAVE_DER       reduce using rule 32 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)
    DEFAULT         reduce using rule 32 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)
    CASE            reduce using rule 32 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)
    RETURN          reduce using rule 32 (longvariable -> ID PARENT_IZQ ID PARENT_DER .)

  ! $end            [ reduce using rule 50 (capslice -> ID PARENT_IZQ ID PARENT_DER .) ]
  ! LLAVE_DER       [ reduce using rule 50 (capslice -> ID PARENT_IZQ ID PARENT_DER .) ]
  ! DEFAULT         [ reduce using rule 50 (capslice -> ID PARENT_IZQ ID PARENT_DER .) ]
  ! CASE            [ reduce using rule 50 (capslice -> ID PARENT_IZQ ID PARENT_DER .) ]
  ! RETURN          [ reduce using rule 50 (capslice -> ID PARENT_IZQ ID PARENT_DER .) ]


state 147

    (31) longvariable -> ID PARENT_IZQ CADENA PARENT_DER .

    $end            reduce using rule 31 (longvariable -> ID PARENT_IZQ CADENA PARENT_DER .)
    LLAVE_DER       reduce using rule 31 (longvariable -> ID PARENT_IZQ CADENA PARENT_DER .)
    DEFAULT         reduce using rule 31 (longvariable -> ID PARENT_IZQ CADENA PARENT_DER .)
    CASE            reduce using rule 31 (longvariable -> ID PARENT_IZQ CADENA PARENT_DER .)
    RETURN          reduce using rule 31 (longvariable -> ID PARENT_IZQ CADENA PARENT_DER .)


state 148

    (90) asignar_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER . ASIGNACION valor
    (92) obtener_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER .

    ASIGNACION      shift and go to state 174
    $end            reduce using rule 92 (obtener_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER .)
    LLAVE_DER       reduce using rule 92 (obtener_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER .)
    DEFAULT         reduce using rule 92 (obtener_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER .)
    CASE            reduce using rule 92 (obtener_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER .)
    RETURN          reduce using rule 92 (obtener_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER .)


state 149

    (36) asignacion -> VAR ID tipo_dato ASIGNACION . factor
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 49
    ID              shift and go to state 50
    CADENA          shift and go to state 30
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    factor                         shift and go to state 175

state 150

    (37) asignacion -> VAR ID COMA ID . tipo_dato ASIGNACION factor COMA factor
    (79) tipo_dato -> . INT
    (80) tipo_dato -> . STRING
    (81) tipo_dato -> . INT64
    (82) tipo_dato -> . FLOAT32
    (83) tipo_dato -> . FLOAT64
    (84) tipo_dato -> . INT32

    INT             shift and go to state 114
    STRING          shift and go to state 115
    INT64           shift and go to state 116
    FLOAT32         shift and go to state 117
    FLOAT64         shift and go to state 118
    INT32           shift and go to state 119

    tipo_dato                      shift and go to state 176

state 151

    (76) map -> VAR ID MAP CORCHETE_IZQ . tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (79) tipo_dato -> . INT
    (80) tipo_dato -> . STRING
    (81) tipo_dato -> . INT64
    (82) tipo_dato -> . FLOAT32
    (83) tipo_dato -> . FLOAT64
    (84) tipo_dato -> . INT32

    INT             shift and go to state 114
    STRING          shift and go to state 115
    INT64           shift and go to state 116
    FLOAT32         shift and go to state 117
    FLOAT64         shift and go to state 118
    INT32           shift and go to state 119

    tipo_dato                      shift and go to state 177

state 152

    (116) boolcadena -> STRCONV PUNTO FORMATBOOL PARENT_IZQ . BOOLEAN PARENT_DER

    BOOLEAN         shift and go to state 178


state 153

    (117) cadenabool -> STRCONV PUNTO PARSEBOOL PARENT_IZQ . CADENA PARENT_DER

    CADENA          shift and go to state 179


state 154

    (120) enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ . NUMERO COMA NUMERO PARENT_DER

    NUMERO          shift and go to state 180


state 155

    (121) cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ . CADENA COMA NUMERO COMA NUMERO PARENT_DER

    CADENA          shift and go to state 181


state 156

    (118) flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ . FLOAT COMA CADENA COMA NUMERO PARENT_DER

    FLOAT           shift and go to state 182


state 157

    (119) cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ . CADENA COMA NUMERO PARENT_DER

    CADENA          shift and go to state 183


state 158

    (38) sentenciafor -> FOR ID ASIGNACION factor . FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER

    FIN_SENTENCIA   shift and go to state 184


state 159

    (70) switch -> SWITCH ID LLAVE_IZQ cases . LLAVE_DER

    LLAVE_DER       shift and go to state 185


state 160

    (71) cases -> case .
    (72) cases -> case . default
    (73) cases -> case . cases
    (75) default -> . DEFAULT DOS_PUNTOS programa
    (71) cases -> . case
    (72) cases -> . case default
    (73) cases -> . case cases
    (74) case -> . CASE factor DOS_PUNTOS programa

    LLAVE_DER       reduce using rule 71 (cases -> case .)
    DEFAULT         shift and go to state 188
    CASE            shift and go to state 161

    case                           shift and go to state 160
    default                        shift and go to state 186
    cases                          shift and go to state 187

state 161

    (74) case -> CASE . factor DOS_PUNTOS programa
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 49
    ID              shift and go to state 50
    CADENA          shift and go to state 30
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    factor                         shift and go to state 189

state 162

    (91) eliminar_valor_map -> DELETE PARENT_IZQ ID COMA . valor PARENT_DER
    (88) valor -> . CADENA
    (89) valor -> . NUMERO

    CADENA          shift and go to state 109
    NUMERO          shift and go to state 110

    valor                          shift and go to state 190

state 163

    (96) argumentos -> ID . tipo_dato
    (97) argumentos -> ID . tipo_dato COMA argumentos
    (79) tipo_dato -> . INT
    (80) tipo_dato -> . STRING
    (81) tipo_dato -> . INT64
    (82) tipo_dato -> . FLOAT32
    (83) tipo_dato -> . FLOAT64
    (84) tipo_dato -> . INT32

    INT             shift and go to state 114
    STRING          shift and go to state 115
    INT64           shift and go to state 116
    FLOAT32         shift and go to state 117
    FLOAT64         shift and go to state 118
    INT32           shift and go to state 119

    tipo_dato                      shift and go to state 191

state 164

    (93) funcion -> FUNC ID PARENT_IZQ argumentos . PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (94) funcion -> FUNC ID PARENT_IZQ argumentos . PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (95) funcion -> FUNC ID PARENT_IZQ argumentos . PARENT_DER tipo_dato LLAVE_IZQ RETURN ID LLAVE_DER

    PARENT_DER      shift and go to state 192


state 165

    (26) impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA . COMA NUMERO PARENT_DER

    COMA            shift and go to state 193


state 166

    (27) impresion -> FMT PUNTO PRINTF PARENT_IZQ empty . PARENT_DER

    PARENT_DER      shift and go to state 194


state 167

    (28) impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA . COMA NUMERO PARENT_DER
    (30) impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA . PARENT_DER

    COMA            shift and go to state 195
    PARENT_DER      shift and go to state 196


state 168

    (29) impresion -> FMT PUNTO PRINTLN PARENT_IZQ empty . PARENT_DER

    PARENT_DER      shift and go to state 197


state 169

    (58) sentencia -> IF factor comparacion factor LLAVE_IZQ . programa LLAVE_DER
    (1) programa -> . expression
    (2) programa -> . impresion
    (3) programa -> . sentencia
    (4) programa -> . asignacion
    (5) programa -> . longvariable
    (6) programa -> . boolcadena
    (7) programa -> . companum
    (8) programa -> . compaid
    (9) programa -> . sentenciafor
    (10) programa -> . arreglo
    (11) programa -> . slice
    (12) programa -> . capslice
    (13) programa -> . switch
    (14) programa -> . map
    (15) programa -> . asignar_valor_map
    (16) programa -> . eliminar_valor_map
    (17) programa -> . obtener_valor_map
    (18) programa -> . funcion
    (19) programa -> . cadenabool
    (20) programa -> . enterocadena
    (21) programa -> . cadenaentero
    (22) programa -> . flotantecadena
    (23) programa -> . cadenaflotante
    (24) programa -> . seman_operacion
    (25) programa -> . incremento
    (51) expression -> . expression MAS term
    (52) expression -> . expression MENOS term
    (53) expression -> . term
    (26) impresion -> . FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (27) impresion -> . FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER
    (28) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (29) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER
    (30) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ CADENA PARENT_DER
    (58) sentencia -> . IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER
    (35) asignacion -> . ID ASIGNACION factor
    (36) asignacion -> . VAR ID tipo_dato ASIGNACION factor
    (37) asignacion -> . VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor
    (31) longvariable -> . ID PARENT_IZQ CADENA PARENT_DER
    (32) longvariable -> . ID PARENT_IZQ ID PARENT_DER
    (116) boolcadena -> . STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER
    (33) companum -> . NUMERO comparacion NUMERO
    (34) compaid -> . ID comparacion ID
    (38) sentenciafor -> . FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
    (42) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato
    (43) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (48) slice -> . ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (49) slice -> . ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO PARENT_DER
    (50) capslice -> . ID PARENT_IZQ ID PARENT_DER
    (70) switch -> . SWITCH ID LLAVE_IZQ cases LLAVE_DER
    (76) map -> . VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (77) map -> . ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER
    (78) map -> . ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (90) asignar_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor
    (91) eliminar_valor_map -> . DELETE PARENT_IZQ ID COMA valor PARENT_DER
    (92) obtener_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER
    (93) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (94) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (95) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ RETURN ID LLAVE_DER
    (117) cadenabool -> . STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER
    (120) enterocadena -> . STRCONV PUNTO FORMATINT PARENT_IZQ NUMERO COMA NUMERO PARENT_DER
    (121) cadenaentero -> . STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER
    (118) flotantecadena -> . STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER
    (119) cadenaflotante -> . STRCONV PUNTO PARSEFLOAT PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (99) seman_operacion -> . NUMERO MAS NUMERO
    (100) seman_operacion -> . NUMERO MENOS NUMERO
    (101) seman_operacion -> . NUMERO MULTIPLICADOR NUMERO
    (102) seman_operacion -> . NUMERO DIVISOR NUMERO
    (103) seman_operacion -> . NUMERO MOD_DIVISION NUMERO
    (104) seman_operacion -> . FLOAT MAS NUMERO
    (105) seman_operacion -> . FLOAT MENOS NUMERO
    (106) seman_operacion -> . FLOAT MULTIPLICADOR NUMERO
    (107) seman_operacion -> . FLOAT DIVISOR NUMERO
    (108) seman_operacion -> . NUMERO MAS FLOAT
    (109) seman_operacion -> . NUMERO MENOS FLOAT
    (110) seman_operacion -> . NUMERO MULTIPLICADOR FLOAT
    (111) seman_operacion -> . NUMERO DIVISOR FLOAT
    (112) seman_operacion -> . FLOAT MAS FLOAT
    (113) seman_operacion -> . FLOAT MENOS FLOAT
    (114) seman_operacion -> . FLOAT MULTIPLICADOR FLOAT
    (115) seman_operacion -> . FLOAT DIVISOR FLOAT
    (39) incremento -> . ID INCREMENTO
    (40) incremento -> . ID ASIGNACION ID
    (41) incremento -> . ID DECREMENTO
    (54) term -> . term MULTIPLICADOR factor
    (55) term -> . term DIVISOR factor
    (56) term -> . term MOD_DIVISION factor
    (57) term -> . factor
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    FMT             shift and go to state 28
    IF              shift and go to state 32
    ID              shift and go to state 34
    VAR             shift and go to state 35
    STRCONV         shift and go to state 36
    NUMERO          shift and go to state 31
    FOR             shift and go to state 37
    SWITCH          shift and go to state 38
    DELETE          shift and go to state 39
    FUNC            shift and go to state 40
    FLOAT           shift and go to state 41
    CADENA          shift and go to state 30
    PARENT_IZQ      shift and go to state 29

    factor                         shift and go to state 33
    programa                       shift and go to state 198
    expression                     shift and go to state 2
    impresion                      shift and go to state 3
    sentencia                      shift and go to state 4
    asignacion                     shift and go to state 5
    longvariable                   shift and go to state 6
    boolcadena                     shift and go to state 7
    companum                       shift and go to state 8
    compaid                        shift and go to state 9
    sentenciafor                   shift and go to state 10
    arreglo                        shift and go to state 11
    slice                          shift and go to state 12
    capslice                       shift and go to state 13
    switch                         shift and go to state 14
    map                            shift and go to state 15
    asignar_valor_map              shift and go to state 16
    eliminar_valor_map             shift and go to state 17
    obtener_valor_map              shift and go to state 18
    funcion                        shift and go to state 19
    cadenabool                     shift and go to state 20
    enterocadena                   shift and go to state 21
    cadenaentero                   shift and go to state 22
    flotantecadena                 shift and go to state 23
    cadenaflotante                 shift and go to state 24
    seman_operacion                shift and go to state 25
    incremento                     shift and go to state 26
    term                           shift and go to state 27

state 170

    (42) arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER . tipo_dato
    (43) arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER . tipo_dato LLAVE_IZQ valores LLAVE_DER
    (79) tipo_dato -> . INT
    (80) tipo_dato -> . STRING
    (81) tipo_dato -> . INT64
    (82) tipo_dato -> . FLOAT32
    (83) tipo_dato -> . FLOAT64
    (84) tipo_dato -> . INT32

    INT             shift and go to state 114
    STRING          shift and go to state 115
    INT64           shift and go to state 116
    FLOAT32         shift and go to state 117
    FLOAT64         shift and go to state 118
    INT32           shift and go to state 119

    tipo_dato                      shift and go to state 199

state 171

    (48) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ . CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (49) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ . CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO PARENT_DER

    CORCHETE_DER    shift and go to state 200


state 172

    (77) map -> ID ASIGNACION MAKE PARENT_IZQ MAP . CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER

    CORCHETE_IZQ    shift and go to state 201


state 173

    (78) map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato . CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER

    CORCHETE_DER    shift and go to state 202


state 174

    (90) asignar_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION . valor
    (88) valor -> . CADENA
    (89) valor -> . NUMERO

    CADENA          shift and go to state 109
    NUMERO          shift and go to state 110

    valor                          shift and go to state 203

state 175

    (36) asignacion -> VAR ID tipo_dato ASIGNACION factor .

    $end            reduce using rule 36 (asignacion -> VAR ID tipo_dato ASIGNACION factor .)
    LLAVE_DER       reduce using rule 36 (asignacion -> VAR ID tipo_dato ASIGNACION factor .)
    DEFAULT         reduce using rule 36 (asignacion -> VAR ID tipo_dato ASIGNACION factor .)
    CASE            reduce using rule 36 (asignacion -> VAR ID tipo_dato ASIGNACION factor .)
    RETURN          reduce using rule 36 (asignacion -> VAR ID tipo_dato ASIGNACION factor .)


state 176

    (37) asignacion -> VAR ID COMA ID tipo_dato . ASIGNACION factor COMA factor

    ASIGNACION      shift and go to state 204


state 177

    (76) map -> VAR ID MAP CORCHETE_IZQ tipo_dato . CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER

    CORCHETE_DER    shift and go to state 205


state 178

    (116) boolcadena -> STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN . PARENT_DER

    PARENT_DER      shift and go to state 206


state 179

    (117) cadenabool -> STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA . PARENT_DER

    PARENT_DER      shift and go to state 207


state 180

    (120) enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ NUMERO . COMA NUMERO PARENT_DER

    COMA            shift and go to state 208


state 181

    (121) cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA . COMA NUMERO COMA NUMERO PARENT_DER

    COMA            shift and go to state 209


state 182

    (118) flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT . COMA CADENA COMA NUMERO PARENT_DER

    COMA            shift and go to state 210


state 183

    (119) cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ CADENA . COMA NUMERO PARENT_DER

    COMA            shift and go to state 211


state 184

    (38) sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA . ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER

    ID              shift and go to state 212


state 185

    (70) switch -> SWITCH ID LLAVE_IZQ cases LLAVE_DER .

    $end            reduce using rule 70 (switch -> SWITCH ID LLAVE_IZQ cases LLAVE_DER .)
    LLAVE_DER       reduce using rule 70 (switch -> SWITCH ID LLAVE_IZQ cases LLAVE_DER .)
    DEFAULT         reduce using rule 70 (switch -> SWITCH ID LLAVE_IZQ cases LLAVE_DER .)
    CASE            reduce using rule 70 (switch -> SWITCH ID LLAVE_IZQ cases LLAVE_DER .)
    RETURN          reduce using rule 70 (switch -> SWITCH ID LLAVE_IZQ cases LLAVE_DER .)


state 186

    (72) cases -> case default .

    LLAVE_DER       reduce using rule 72 (cases -> case default .)


state 187

    (73) cases -> case cases .

    LLAVE_DER       reduce using rule 73 (cases -> case cases .)


state 188

    (75) default -> DEFAULT . DOS_PUNTOS programa

    DOS_PUNTOS      shift and go to state 213


state 189

    (74) case -> CASE factor . DOS_PUNTOS programa

    DOS_PUNTOS      shift and go to state 214


state 190

    (91) eliminar_valor_map -> DELETE PARENT_IZQ ID COMA valor . PARENT_DER

    PARENT_DER      shift and go to state 215


state 191

    (96) argumentos -> ID tipo_dato .
    (97) argumentos -> ID tipo_dato . COMA argumentos

    PARENT_DER      reduce using rule 96 (argumentos -> ID tipo_dato .)
    COMA            shift and go to state 216


state 192

    (93) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER . tipo_dato LLAVE_IZQ programa LLAVE_DER
    (94) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER . tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (95) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER . tipo_dato LLAVE_IZQ RETURN ID LLAVE_DER
    (79) tipo_dato -> . INT
    (80) tipo_dato -> . STRING
    (81) tipo_dato -> . INT64
    (82) tipo_dato -> . FLOAT32
    (83) tipo_dato -> . FLOAT64
    (84) tipo_dato -> . INT32

    INT             shift and go to state 114
    STRING          shift and go to state 115
    INT64           shift and go to state 116
    FLOAT32         shift and go to state 117
    FLOAT64         shift and go to state 118
    INT32           shift and go to state 119

    tipo_dato                      shift and go to state 217

state 193

    (26) impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA COMA . NUMERO PARENT_DER

    NUMERO          shift and go to state 218


state 194

    (27) impresion -> FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER .

    $end            reduce using rule 27 (impresion -> FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER .)
    LLAVE_DER       reduce using rule 27 (impresion -> FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER .)
    DEFAULT         reduce using rule 27 (impresion -> FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER .)
    CASE            reduce using rule 27 (impresion -> FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER .)
    RETURN          reduce using rule 27 (impresion -> FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER .)


state 195

    (28) impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA . NUMERO PARENT_DER

    NUMERO          shift and go to state 219


state 196

    (30) impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA PARENT_DER .

    $end            reduce using rule 30 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA PARENT_DER .)
    LLAVE_DER       reduce using rule 30 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA PARENT_DER .)
    DEFAULT         reduce using rule 30 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA PARENT_DER .)
    CASE            reduce using rule 30 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA PARENT_DER .)
    RETURN          reduce using rule 30 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA PARENT_DER .)


state 197

    (29) impresion -> FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER .

    $end            reduce using rule 29 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER .)
    LLAVE_DER       reduce using rule 29 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER .)
    DEFAULT         reduce using rule 29 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER .)
    CASE            reduce using rule 29 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER .)
    RETURN          reduce using rule 29 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER .)


state 198

    (58) sentencia -> IF factor comparacion factor LLAVE_IZQ programa . LLAVE_DER

    LLAVE_DER       shift and go to state 220


state 199

    (42) arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato .
    (43) arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato . LLAVE_IZQ valores LLAVE_DER

    $end            reduce using rule 42 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato .)
    LLAVE_DER       reduce using rule 42 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato .)
    DEFAULT         reduce using rule 42 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato .)
    CASE            reduce using rule 42 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato .)
    RETURN          reduce using rule 42 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato .)
    LLAVE_IZQ       shift and go to state 221


state 200

    (48) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER . tipo_dato COMA NUMERO PARENT_DER
    (49) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER . tipo_dato COMA NUMERO COMA NUMERO PARENT_DER
    (79) tipo_dato -> . INT
    (80) tipo_dato -> . STRING
    (81) tipo_dato -> . INT64
    (82) tipo_dato -> . FLOAT32
    (83) tipo_dato -> . FLOAT64
    (84) tipo_dato -> . INT32

    INT             shift and go to state 114
    STRING          shift and go to state 115
    INT64           shift and go to state 116
    FLOAT32         shift and go to state 117
    FLOAT64         shift and go to state 118
    INT32           shift and go to state 119

    tipo_dato                      shift and go to state 222

state 201

    (77) map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ . tipo_dato CORCHETE_DER tipo_dato PARENT_DER
    (79) tipo_dato -> . INT
    (80) tipo_dato -> . STRING
    (81) tipo_dato -> . INT64
    (82) tipo_dato -> . FLOAT32
    (83) tipo_dato -> . FLOAT64
    (84) tipo_dato -> . INT32

    INT             shift and go to state 114
    STRING          shift and go to state 115
    INT64           shift and go to state 116
    FLOAT32         shift and go to state 117
    FLOAT64         shift and go to state 118
    INT32           shift and go to state 119

    tipo_dato                      shift and go to state 223

state 202

    (78) map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER . tipo_dato LLAVE_IZQ valores LLAVE_DER
    (79) tipo_dato -> . INT
    (80) tipo_dato -> . STRING
    (81) tipo_dato -> . INT64
    (82) tipo_dato -> . FLOAT32
    (83) tipo_dato -> . FLOAT64
    (84) tipo_dato -> . INT32

    INT             shift and go to state 114
    STRING          shift and go to state 115
    INT64           shift and go to state 116
    FLOAT32         shift and go to state 117
    FLOAT64         shift and go to state 118
    INT32           shift and go to state 119

    tipo_dato                      shift and go to state 224

state 203

    (90) asignar_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor .

    $end            reduce using rule 90 (asignar_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor .)
    LLAVE_DER       reduce using rule 90 (asignar_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor .)
    DEFAULT         reduce using rule 90 (asignar_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor .)
    CASE            reduce using rule 90 (asignar_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor .)
    RETURN          reduce using rule 90 (asignar_valor_map -> ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor .)


state 204

    (37) asignacion -> VAR ID COMA ID tipo_dato ASIGNACION . factor COMA factor
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 49
    ID              shift and go to state 50
    CADENA          shift and go to state 30
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    factor                         shift and go to state 225

state 205

    (76) map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER . tipo_dato LLAVE_IZQ valores LLAVE_DER
    (79) tipo_dato -> . INT
    (80) tipo_dato -> . STRING
    (81) tipo_dato -> . INT64
    (82) tipo_dato -> . FLOAT32
    (83) tipo_dato -> . FLOAT64
    (84) tipo_dato -> . INT32

    INT             shift and go to state 114
    STRING          shift and go to state 115
    INT64           shift and go to state 116
    FLOAT32         shift and go to state 117
    FLOAT64         shift and go to state 118
    INT32           shift and go to state 119

    tipo_dato                      shift and go to state 226

state 206

    (116) boolcadena -> STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER .

    $end            reduce using rule 116 (boolcadena -> STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER .)
    LLAVE_DER       reduce using rule 116 (boolcadena -> STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER .)
    DEFAULT         reduce using rule 116 (boolcadena -> STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER .)
    CASE            reduce using rule 116 (boolcadena -> STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER .)
    RETURN          reduce using rule 116 (boolcadena -> STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER .)


state 207

    (117) cadenabool -> STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER .

    $end            reduce using rule 117 (cadenabool -> STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER .)
    LLAVE_DER       reduce using rule 117 (cadenabool -> STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER .)
    DEFAULT         reduce using rule 117 (cadenabool -> STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER .)
    CASE            reduce using rule 117 (cadenabool -> STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER .)
    RETURN          reduce using rule 117 (cadenabool -> STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER .)


state 208

    (120) enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ NUMERO COMA . NUMERO PARENT_DER

    NUMERO          shift and go to state 227


state 209

    (121) cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA . NUMERO COMA NUMERO PARENT_DER

    NUMERO          shift and go to state 228


state 210

    (118) flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA . CADENA COMA NUMERO PARENT_DER

    CADENA          shift and go to state 229


state 211

    (119) cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ CADENA COMA . NUMERO PARENT_DER

    NUMERO          shift and go to state 230


state 212

    (38) sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID . comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
    (59) comparacion -> . IGUALDAD
    (60) comparacion -> . MAYOR
    (61) comparacion -> . MENOR
    (62) comparacion -> . MAYOR_IGU
    (63) comparacion -> . MENOR_IGU
    (64) comparacion -> . DESIGUALDAD

    IGUALDAD        shift and go to state 58
    MAYOR           shift and go to state 59
    MENOR           shift and go to state 60
    MAYOR_IGU       shift and go to state 61
    MENOR_IGU       shift and go to state 62
    DESIGUALDAD     shift and go to state 63

    comparacion                    shift and go to state 231

state 213

    (75) default -> DEFAULT DOS_PUNTOS . programa
    (1) programa -> . expression
    (2) programa -> . impresion
    (3) programa -> . sentencia
    (4) programa -> . asignacion
    (5) programa -> . longvariable
    (6) programa -> . boolcadena
    (7) programa -> . companum
    (8) programa -> . compaid
    (9) programa -> . sentenciafor
    (10) programa -> . arreglo
    (11) programa -> . slice
    (12) programa -> . capslice
    (13) programa -> . switch
    (14) programa -> . map
    (15) programa -> . asignar_valor_map
    (16) programa -> . eliminar_valor_map
    (17) programa -> . obtener_valor_map
    (18) programa -> . funcion
    (19) programa -> . cadenabool
    (20) programa -> . enterocadena
    (21) programa -> . cadenaentero
    (22) programa -> . flotantecadena
    (23) programa -> . cadenaflotante
    (24) programa -> . seman_operacion
    (25) programa -> . incremento
    (51) expression -> . expression MAS term
    (52) expression -> . expression MENOS term
    (53) expression -> . term
    (26) impresion -> . FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (27) impresion -> . FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER
    (28) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (29) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER
    (30) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ CADENA PARENT_DER
    (58) sentencia -> . IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER
    (35) asignacion -> . ID ASIGNACION factor
    (36) asignacion -> . VAR ID tipo_dato ASIGNACION factor
    (37) asignacion -> . VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor
    (31) longvariable -> . ID PARENT_IZQ CADENA PARENT_DER
    (32) longvariable -> . ID PARENT_IZQ ID PARENT_DER
    (116) boolcadena -> . STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER
    (33) companum -> . NUMERO comparacion NUMERO
    (34) compaid -> . ID comparacion ID
    (38) sentenciafor -> . FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
    (42) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato
    (43) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (48) slice -> . ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (49) slice -> . ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO PARENT_DER
    (50) capslice -> . ID PARENT_IZQ ID PARENT_DER
    (70) switch -> . SWITCH ID LLAVE_IZQ cases LLAVE_DER
    (76) map -> . VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (77) map -> . ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER
    (78) map -> . ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (90) asignar_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor
    (91) eliminar_valor_map -> . DELETE PARENT_IZQ ID COMA valor PARENT_DER
    (92) obtener_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER
    (93) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (94) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (95) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ RETURN ID LLAVE_DER
    (117) cadenabool -> . STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER
    (120) enterocadena -> . STRCONV PUNTO FORMATINT PARENT_IZQ NUMERO COMA NUMERO PARENT_DER
    (121) cadenaentero -> . STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER
    (118) flotantecadena -> . STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER
    (119) cadenaflotante -> . STRCONV PUNTO PARSEFLOAT PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (99) seman_operacion -> . NUMERO MAS NUMERO
    (100) seman_operacion -> . NUMERO MENOS NUMERO
    (101) seman_operacion -> . NUMERO MULTIPLICADOR NUMERO
    (102) seman_operacion -> . NUMERO DIVISOR NUMERO
    (103) seman_operacion -> . NUMERO MOD_DIVISION NUMERO
    (104) seman_operacion -> . FLOAT MAS NUMERO
    (105) seman_operacion -> . FLOAT MENOS NUMERO
    (106) seman_operacion -> . FLOAT MULTIPLICADOR NUMERO
    (107) seman_operacion -> . FLOAT DIVISOR NUMERO
    (108) seman_operacion -> . NUMERO MAS FLOAT
    (109) seman_operacion -> . NUMERO MENOS FLOAT
    (110) seman_operacion -> . NUMERO MULTIPLICADOR FLOAT
    (111) seman_operacion -> . NUMERO DIVISOR FLOAT
    (112) seman_operacion -> . FLOAT MAS FLOAT
    (113) seman_operacion -> . FLOAT MENOS FLOAT
    (114) seman_operacion -> . FLOAT MULTIPLICADOR FLOAT
    (115) seman_operacion -> . FLOAT DIVISOR FLOAT
    (39) incremento -> . ID INCREMENTO
    (40) incremento -> . ID ASIGNACION ID
    (41) incremento -> . ID DECREMENTO
    (54) term -> . term MULTIPLICADOR factor
    (55) term -> . term DIVISOR factor
    (56) term -> . term MOD_DIVISION factor
    (57) term -> . factor
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    FMT             shift and go to state 28
    IF              shift and go to state 32
    ID              shift and go to state 34
    VAR             shift and go to state 35
    STRCONV         shift and go to state 36
    NUMERO          shift and go to state 31
    FOR             shift and go to state 37
    SWITCH          shift and go to state 38
    DELETE          shift and go to state 39
    FUNC            shift and go to state 40
    FLOAT           shift and go to state 41
    CADENA          shift and go to state 30
    PARENT_IZQ      shift and go to state 29

    programa                       shift and go to state 232
    expression                     shift and go to state 2
    impresion                      shift and go to state 3
    sentencia                      shift and go to state 4
    asignacion                     shift and go to state 5
    longvariable                   shift and go to state 6
    boolcadena                     shift and go to state 7
    companum                       shift and go to state 8
    compaid                        shift and go to state 9
    sentenciafor                   shift and go to state 10
    arreglo                        shift and go to state 11
    slice                          shift and go to state 12
    capslice                       shift and go to state 13
    switch                         shift and go to state 14
    map                            shift and go to state 15
    asignar_valor_map              shift and go to state 16
    eliminar_valor_map             shift and go to state 17
    obtener_valor_map              shift and go to state 18
    funcion                        shift and go to state 19
    cadenabool                     shift and go to state 20
    enterocadena                   shift and go to state 21
    cadenaentero                   shift and go to state 22
    flotantecadena                 shift and go to state 23
    cadenaflotante                 shift and go to state 24
    seman_operacion                shift and go to state 25
    incremento                     shift and go to state 26
    term                           shift and go to state 27
    factor                         shift and go to state 33

state 214

    (74) case -> CASE factor DOS_PUNTOS . programa
    (1) programa -> . expression
    (2) programa -> . impresion
    (3) programa -> . sentencia
    (4) programa -> . asignacion
    (5) programa -> . longvariable
    (6) programa -> . boolcadena
    (7) programa -> . companum
    (8) programa -> . compaid
    (9) programa -> . sentenciafor
    (10) programa -> . arreglo
    (11) programa -> . slice
    (12) programa -> . capslice
    (13) programa -> . switch
    (14) programa -> . map
    (15) programa -> . asignar_valor_map
    (16) programa -> . eliminar_valor_map
    (17) programa -> . obtener_valor_map
    (18) programa -> . funcion
    (19) programa -> . cadenabool
    (20) programa -> . enterocadena
    (21) programa -> . cadenaentero
    (22) programa -> . flotantecadena
    (23) programa -> . cadenaflotante
    (24) programa -> . seman_operacion
    (25) programa -> . incremento
    (51) expression -> . expression MAS term
    (52) expression -> . expression MENOS term
    (53) expression -> . term
    (26) impresion -> . FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (27) impresion -> . FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER
    (28) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (29) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER
    (30) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ CADENA PARENT_DER
    (58) sentencia -> . IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER
    (35) asignacion -> . ID ASIGNACION factor
    (36) asignacion -> . VAR ID tipo_dato ASIGNACION factor
    (37) asignacion -> . VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor
    (31) longvariable -> . ID PARENT_IZQ CADENA PARENT_DER
    (32) longvariable -> . ID PARENT_IZQ ID PARENT_DER
    (116) boolcadena -> . STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER
    (33) companum -> . NUMERO comparacion NUMERO
    (34) compaid -> . ID comparacion ID
    (38) sentenciafor -> . FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
    (42) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato
    (43) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (48) slice -> . ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (49) slice -> . ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO PARENT_DER
    (50) capslice -> . ID PARENT_IZQ ID PARENT_DER
    (70) switch -> . SWITCH ID LLAVE_IZQ cases LLAVE_DER
    (76) map -> . VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (77) map -> . ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER
    (78) map -> . ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (90) asignar_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor
    (91) eliminar_valor_map -> . DELETE PARENT_IZQ ID COMA valor PARENT_DER
    (92) obtener_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER
    (93) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (94) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (95) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ RETURN ID LLAVE_DER
    (117) cadenabool -> . STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER
    (120) enterocadena -> . STRCONV PUNTO FORMATINT PARENT_IZQ NUMERO COMA NUMERO PARENT_DER
    (121) cadenaentero -> . STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER
    (118) flotantecadena -> . STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER
    (119) cadenaflotante -> . STRCONV PUNTO PARSEFLOAT PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (99) seman_operacion -> . NUMERO MAS NUMERO
    (100) seman_operacion -> . NUMERO MENOS NUMERO
    (101) seman_operacion -> . NUMERO MULTIPLICADOR NUMERO
    (102) seman_operacion -> . NUMERO DIVISOR NUMERO
    (103) seman_operacion -> . NUMERO MOD_DIVISION NUMERO
    (104) seman_operacion -> . FLOAT MAS NUMERO
    (105) seman_operacion -> . FLOAT MENOS NUMERO
    (106) seman_operacion -> . FLOAT MULTIPLICADOR NUMERO
    (107) seman_operacion -> . FLOAT DIVISOR NUMERO
    (108) seman_operacion -> . NUMERO MAS FLOAT
    (109) seman_operacion -> . NUMERO MENOS FLOAT
    (110) seman_operacion -> . NUMERO MULTIPLICADOR FLOAT
    (111) seman_operacion -> . NUMERO DIVISOR FLOAT
    (112) seman_operacion -> . FLOAT MAS FLOAT
    (113) seman_operacion -> . FLOAT MENOS FLOAT
    (114) seman_operacion -> . FLOAT MULTIPLICADOR FLOAT
    (115) seman_operacion -> . FLOAT DIVISOR FLOAT
    (39) incremento -> . ID INCREMENTO
    (40) incremento -> . ID ASIGNACION ID
    (41) incremento -> . ID DECREMENTO
    (54) term -> . term MULTIPLICADOR factor
    (55) term -> . term DIVISOR factor
    (56) term -> . term MOD_DIVISION factor
    (57) term -> . factor
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    FMT             shift and go to state 28
    IF              shift and go to state 32
    ID              shift and go to state 34
    VAR             shift and go to state 35
    STRCONV         shift and go to state 36
    NUMERO          shift and go to state 31
    FOR             shift and go to state 37
    SWITCH          shift and go to state 38
    DELETE          shift and go to state 39
    FUNC            shift and go to state 40
    FLOAT           shift and go to state 41
    CADENA          shift and go to state 30
    PARENT_IZQ      shift and go to state 29

    factor                         shift and go to state 33
    programa                       shift and go to state 233
    expression                     shift and go to state 2
    impresion                      shift and go to state 3
    sentencia                      shift and go to state 4
    asignacion                     shift and go to state 5
    longvariable                   shift and go to state 6
    boolcadena                     shift and go to state 7
    companum                       shift and go to state 8
    compaid                        shift and go to state 9
    sentenciafor                   shift and go to state 10
    arreglo                        shift and go to state 11
    slice                          shift and go to state 12
    capslice                       shift and go to state 13
    switch                         shift and go to state 14
    map                            shift and go to state 15
    asignar_valor_map              shift and go to state 16
    eliminar_valor_map             shift and go to state 17
    obtener_valor_map              shift and go to state 18
    funcion                        shift and go to state 19
    cadenabool                     shift and go to state 20
    enterocadena                   shift and go to state 21
    cadenaentero                   shift and go to state 22
    flotantecadena                 shift and go to state 23
    cadenaflotante                 shift and go to state 24
    seman_operacion                shift and go to state 25
    incremento                     shift and go to state 26
    term                           shift and go to state 27

state 215

    (91) eliminar_valor_map -> DELETE PARENT_IZQ ID COMA valor PARENT_DER .

    $end            reduce using rule 91 (eliminar_valor_map -> DELETE PARENT_IZQ ID COMA valor PARENT_DER .)
    LLAVE_DER       reduce using rule 91 (eliminar_valor_map -> DELETE PARENT_IZQ ID COMA valor PARENT_DER .)
    DEFAULT         reduce using rule 91 (eliminar_valor_map -> DELETE PARENT_IZQ ID COMA valor PARENT_DER .)
    CASE            reduce using rule 91 (eliminar_valor_map -> DELETE PARENT_IZQ ID COMA valor PARENT_DER .)
    RETURN          reduce using rule 91 (eliminar_valor_map -> DELETE PARENT_IZQ ID COMA valor PARENT_DER .)


state 216

    (97) argumentos -> ID tipo_dato COMA . argumentos
    (96) argumentos -> . ID tipo_dato
    (97) argumentos -> . ID tipo_dato COMA argumentos

    ID              shift and go to state 163

    argumentos                     shift and go to state 234

state 217

    (93) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato . LLAVE_IZQ programa LLAVE_DER
    (94) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato . LLAVE_IZQ programa RETURN ID LLAVE_DER
    (95) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato . LLAVE_IZQ RETURN ID LLAVE_DER

    LLAVE_IZQ       shift and go to state 235


state 218

    (26) impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO . PARENT_DER

    PARENT_DER      shift and go to state 236


state 219

    (28) impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO . PARENT_DER

    PARENT_DER      shift and go to state 237


state 220

    (58) sentencia -> IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER .

    $end            reduce using rule 58 (sentencia -> IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER .)
    LLAVE_DER       reduce using rule 58 (sentencia -> IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER .)
    DEFAULT         reduce using rule 58 (sentencia -> IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER .)
    CASE            reduce using rule 58 (sentencia -> IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER .)
    RETURN          reduce using rule 58 (sentencia -> IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER .)


state 221

    (43) arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ . valores LLAVE_DER
    (46) valores -> . factor
    (47) valores -> . factor COMA valores
    (85) valores -> . clave_valor
    (86) valores -> . clave_valor COMA valores
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER
    (87) clave_valor -> . valor DOS_PUNTOS valor
    (88) valor -> . CADENA
    (89) valor -> . NUMERO

    NUMERO          shift and go to state 241
    ID              shift and go to state 50
    CADENA          shift and go to state 242
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    valores                        shift and go to state 238
    factor                         shift and go to state 239
    clave_valor                    shift and go to state 240
    valor                          shift and go to state 243

state 222

    (48) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato . COMA NUMERO PARENT_DER
    (49) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato . COMA NUMERO COMA NUMERO PARENT_DER

    COMA            shift and go to state 244


state 223

    (77) map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato . CORCHETE_DER tipo_dato PARENT_DER

    CORCHETE_DER    shift and go to state 245


state 224

    (78) map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato . LLAVE_IZQ valores LLAVE_DER

    LLAVE_IZQ       shift and go to state 246


state 225

    (37) asignacion -> VAR ID COMA ID tipo_dato ASIGNACION factor . COMA factor

    COMA            shift and go to state 247


state 226

    (76) map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato . LLAVE_IZQ valores LLAVE_DER

    LLAVE_IZQ       shift and go to state 248


state 227

    (120) enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ NUMERO COMA NUMERO . PARENT_DER

    PARENT_DER      shift and go to state 249


state 228

    (121) cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO . COMA NUMERO PARENT_DER

    COMA            shift and go to state 250


state 229

    (118) flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA . COMA NUMERO PARENT_DER

    COMA            shift and go to state 251


state 230

    (119) cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ CADENA COMA NUMERO . PARENT_DER

    PARENT_DER      shift and go to state 252


state 231

    (38) sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion . factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 49
    ID              shift and go to state 50
    CADENA          shift and go to state 30
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    factor                         shift and go to state 253

state 232

    (75) default -> DEFAULT DOS_PUNTOS programa .

    LLAVE_DER       reduce using rule 75 (default -> DEFAULT DOS_PUNTOS programa .)


state 233

    (74) case -> CASE factor DOS_PUNTOS programa .

    DEFAULT         reduce using rule 74 (case -> CASE factor DOS_PUNTOS programa .)
    CASE            reduce using rule 74 (case -> CASE factor DOS_PUNTOS programa .)
    LLAVE_DER       reduce using rule 74 (case -> CASE factor DOS_PUNTOS programa .)


state 234

    (97) argumentos -> ID tipo_dato COMA argumentos .

    PARENT_DER      reduce using rule 97 (argumentos -> ID tipo_dato COMA argumentos .)


state 235

    (93) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ . programa LLAVE_DER
    (94) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ . programa RETURN ID LLAVE_DER
    (95) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ . RETURN ID LLAVE_DER
    (1) programa -> . expression
    (2) programa -> . impresion
    (3) programa -> . sentencia
    (4) programa -> . asignacion
    (5) programa -> . longvariable
    (6) programa -> . boolcadena
    (7) programa -> . companum
    (8) programa -> . compaid
    (9) programa -> . sentenciafor
    (10) programa -> . arreglo
    (11) programa -> . slice
    (12) programa -> . capslice
    (13) programa -> . switch
    (14) programa -> . map
    (15) programa -> . asignar_valor_map
    (16) programa -> . eliminar_valor_map
    (17) programa -> . obtener_valor_map
    (18) programa -> . funcion
    (19) programa -> . cadenabool
    (20) programa -> . enterocadena
    (21) programa -> . cadenaentero
    (22) programa -> . flotantecadena
    (23) programa -> . cadenaflotante
    (24) programa -> . seman_operacion
    (25) programa -> . incremento
    (51) expression -> . expression MAS term
    (52) expression -> . expression MENOS term
    (53) expression -> . term
    (26) impresion -> . FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (27) impresion -> . FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER
    (28) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (29) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER
    (30) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ CADENA PARENT_DER
    (58) sentencia -> . IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER
    (35) asignacion -> . ID ASIGNACION factor
    (36) asignacion -> . VAR ID tipo_dato ASIGNACION factor
    (37) asignacion -> . VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor
    (31) longvariable -> . ID PARENT_IZQ CADENA PARENT_DER
    (32) longvariable -> . ID PARENT_IZQ ID PARENT_DER
    (116) boolcadena -> . STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER
    (33) companum -> . NUMERO comparacion NUMERO
    (34) compaid -> . ID comparacion ID
    (38) sentenciafor -> . FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
    (42) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato
    (43) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (48) slice -> . ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (49) slice -> . ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO PARENT_DER
    (50) capslice -> . ID PARENT_IZQ ID PARENT_DER
    (70) switch -> . SWITCH ID LLAVE_IZQ cases LLAVE_DER
    (76) map -> . VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (77) map -> . ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER
    (78) map -> . ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (90) asignar_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor
    (91) eliminar_valor_map -> . DELETE PARENT_IZQ ID COMA valor PARENT_DER
    (92) obtener_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER
    (93) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (94) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (95) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ RETURN ID LLAVE_DER
    (117) cadenabool -> . STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER
    (120) enterocadena -> . STRCONV PUNTO FORMATINT PARENT_IZQ NUMERO COMA NUMERO PARENT_DER
    (121) cadenaentero -> . STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER
    (118) flotantecadena -> . STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER
    (119) cadenaflotante -> . STRCONV PUNTO PARSEFLOAT PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (99) seman_operacion -> . NUMERO MAS NUMERO
    (100) seman_operacion -> . NUMERO MENOS NUMERO
    (101) seman_operacion -> . NUMERO MULTIPLICADOR NUMERO
    (102) seman_operacion -> . NUMERO DIVISOR NUMERO
    (103) seman_operacion -> . NUMERO MOD_DIVISION NUMERO
    (104) seman_operacion -> . FLOAT MAS NUMERO
    (105) seman_operacion -> . FLOAT MENOS NUMERO
    (106) seman_operacion -> . FLOAT MULTIPLICADOR NUMERO
    (107) seman_operacion -> . FLOAT DIVISOR NUMERO
    (108) seman_operacion -> . NUMERO MAS FLOAT
    (109) seman_operacion -> . NUMERO MENOS FLOAT
    (110) seman_operacion -> . NUMERO MULTIPLICADOR FLOAT
    (111) seman_operacion -> . NUMERO DIVISOR FLOAT
    (112) seman_operacion -> . FLOAT MAS FLOAT
    (113) seman_operacion -> . FLOAT MENOS FLOAT
    (114) seman_operacion -> . FLOAT MULTIPLICADOR FLOAT
    (115) seman_operacion -> . FLOAT DIVISOR FLOAT
    (39) incremento -> . ID INCREMENTO
    (40) incremento -> . ID ASIGNACION ID
    (41) incremento -> . ID DECREMENTO
    (54) term -> . term MULTIPLICADOR factor
    (55) term -> . term DIVISOR factor
    (56) term -> . term MOD_DIVISION factor
    (57) term -> . factor
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    RETURN          shift and go to state 255
    FMT             shift and go to state 28
    IF              shift and go to state 32
    ID              shift and go to state 34
    VAR             shift and go to state 35
    STRCONV         shift and go to state 36
    NUMERO          shift and go to state 31
    FOR             shift and go to state 37
    SWITCH          shift and go to state 38
    DELETE          shift and go to state 39
    FUNC            shift and go to state 40
    FLOAT           shift and go to state 41
    CADENA          shift and go to state 30
    PARENT_IZQ      shift and go to state 29

    programa                       shift and go to state 254
    expression                     shift and go to state 2
    impresion                      shift and go to state 3
    sentencia                      shift and go to state 4
    asignacion                     shift and go to state 5
    longvariable                   shift and go to state 6
    boolcadena                     shift and go to state 7
    companum                       shift and go to state 8
    compaid                        shift and go to state 9
    sentenciafor                   shift and go to state 10
    arreglo                        shift and go to state 11
    slice                          shift and go to state 12
    capslice                       shift and go to state 13
    switch                         shift and go to state 14
    map                            shift and go to state 15
    asignar_valor_map              shift and go to state 16
    eliminar_valor_map             shift and go to state 17
    obtener_valor_map              shift and go to state 18
    funcion                        shift and go to state 19
    cadenabool                     shift and go to state 20
    enterocadena                   shift and go to state 21
    cadenaentero                   shift and go to state 22
    flotantecadena                 shift and go to state 23
    cadenaflotante                 shift and go to state 24
    seman_operacion                shift and go to state 25
    incremento                     shift and go to state 26
    term                           shift and go to state 27
    factor                         shift and go to state 33

state 236

    (26) impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER .

    $end            reduce using rule 26 (impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    LLAVE_DER       reduce using rule 26 (impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    DEFAULT         reduce using rule 26 (impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    CASE            reduce using rule 26 (impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    RETURN          reduce using rule 26 (impresion -> FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)


state 237

    (28) impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER .

    $end            reduce using rule 28 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    LLAVE_DER       reduce using rule 28 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    DEFAULT         reduce using rule 28 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    CASE            reduce using rule 28 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    RETURN          reduce using rule 28 (impresion -> FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)


state 238

    (43) arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores . LLAVE_DER

    LLAVE_DER       shift and go to state 256


state 239

    (46) valores -> factor .
    (47) valores -> factor . COMA valores

    LLAVE_DER       reduce using rule 46 (valores -> factor .)
    COMA            shift and go to state 257


state 240

    (85) valores -> clave_valor .
    (86) valores -> clave_valor . COMA valores

    LLAVE_DER       reduce using rule 85 (valores -> clave_valor .)
    COMA            shift and go to state 258


state 241

    (65) factor -> NUMERO .
    (89) valor -> NUMERO .

    COMA            reduce using rule 65 (factor -> NUMERO .)
    LLAVE_DER       reduce using rule 65 (factor -> NUMERO .)
    DOS_PUNTOS      reduce using rule 89 (valor -> NUMERO .)


state 242

    (67) factor -> CADENA .
    (88) valor -> CADENA .

    COMA            reduce using rule 67 (factor -> CADENA .)
    LLAVE_DER       reduce using rule 67 (factor -> CADENA .)
    DOS_PUNTOS      reduce using rule 88 (valor -> CADENA .)


state 243

    (87) clave_valor -> valor . DOS_PUNTOS valor

    DOS_PUNTOS      shift and go to state 259


state 244

    (48) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA . NUMERO PARENT_DER
    (49) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA . NUMERO COMA NUMERO PARENT_DER

    NUMERO          shift and go to state 260


state 245

    (77) map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER . tipo_dato PARENT_DER
    (79) tipo_dato -> . INT
    (80) tipo_dato -> . STRING
    (81) tipo_dato -> . INT64
    (82) tipo_dato -> . FLOAT32
    (83) tipo_dato -> . FLOAT64
    (84) tipo_dato -> . INT32

    INT             shift and go to state 114
    STRING          shift and go to state 115
    INT64           shift and go to state 116
    FLOAT32         shift and go to state 117
    FLOAT64         shift and go to state 118
    INT32           shift and go to state 119

    tipo_dato                      shift and go to state 261

state 246

    (78) map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ . valores LLAVE_DER
    (46) valores -> . factor
    (47) valores -> . factor COMA valores
    (85) valores -> . clave_valor
    (86) valores -> . clave_valor COMA valores
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER
    (87) clave_valor -> . valor DOS_PUNTOS valor
    (88) valor -> . CADENA
    (89) valor -> . NUMERO

    NUMERO          shift and go to state 241
    ID              shift and go to state 50
    CADENA          shift and go to state 242
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    valores                        shift and go to state 262
    factor                         shift and go to state 239
    clave_valor                    shift and go to state 240
    valor                          shift and go to state 243

state 247

    (37) asignacion -> VAR ID COMA ID tipo_dato ASIGNACION factor COMA . factor
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    NUMERO          shift and go to state 49
    ID              shift and go to state 50
    CADENA          shift and go to state 30
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    factor                         shift and go to state 263

state 248

    (76) map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ . valores LLAVE_DER
    (46) valores -> . factor
    (47) valores -> . factor COMA valores
    (85) valores -> . clave_valor
    (86) valores -> . clave_valor COMA valores
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER
    (87) clave_valor -> . valor DOS_PUNTOS valor
    (88) valor -> . CADENA
    (89) valor -> . NUMERO

    NUMERO          shift and go to state 241
    ID              shift and go to state 50
    CADENA          shift and go to state 242
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    valores                        shift and go to state 264
    factor                         shift and go to state 239
    clave_valor                    shift and go to state 240
    valor                          shift and go to state 243

state 249

    (120) enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ NUMERO COMA NUMERO PARENT_DER .

    $end            reduce using rule 120 (enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ NUMERO COMA NUMERO PARENT_DER .)
    LLAVE_DER       reduce using rule 120 (enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ NUMERO COMA NUMERO PARENT_DER .)
    DEFAULT         reduce using rule 120 (enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ NUMERO COMA NUMERO PARENT_DER .)
    CASE            reduce using rule 120 (enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ NUMERO COMA NUMERO PARENT_DER .)
    RETURN          reduce using rule 120 (enterocadena -> STRCONV PUNTO FORMATINT PARENT_IZQ NUMERO COMA NUMERO PARENT_DER .)


state 250

    (121) cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA . NUMERO PARENT_DER

    NUMERO          shift and go to state 265


state 251

    (118) flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA . NUMERO PARENT_DER

    NUMERO          shift and go to state 266


state 252

    (119) cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ CADENA COMA NUMERO PARENT_DER .

    $end            reduce using rule 119 (cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    LLAVE_DER       reduce using rule 119 (cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    DEFAULT         reduce using rule 119 (cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    CASE            reduce using rule 119 (cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)
    RETURN          reduce using rule 119 (cadenaflotante -> STRCONV PUNTO PARSEFLOAT PARENT_IZQ CADENA COMA NUMERO PARENT_DER .)


state 253

    (38) sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor . FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER

    FIN_SENTENCIA   shift and go to state 267


state 254

    (93) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa . LLAVE_DER
    (94) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa . RETURN ID LLAVE_DER

    LLAVE_DER       shift and go to state 268
    RETURN          shift and go to state 269


state 255

    (95) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ RETURN . ID LLAVE_DER

    ID              shift and go to state 270


state 256

    (43) arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .

    $end            reduce using rule 43 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    LLAVE_DER       reduce using rule 43 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    DEFAULT         reduce using rule 43 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    CASE            reduce using rule 43 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    RETURN          reduce using rule 43 (arreglo -> ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)


state 257

    (47) valores -> factor COMA . valores
    (46) valores -> . factor
    (47) valores -> . factor COMA valores
    (85) valores -> . clave_valor
    (86) valores -> . clave_valor COMA valores
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER
    (87) clave_valor -> . valor DOS_PUNTOS valor
    (88) valor -> . CADENA
    (89) valor -> . NUMERO

    NUMERO          shift and go to state 241
    ID              shift and go to state 50
    CADENA          shift and go to state 242
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    factor                         shift and go to state 239
    valores                        shift and go to state 271
    clave_valor                    shift and go to state 240
    valor                          shift and go to state 243

state 258

    (86) valores -> clave_valor COMA . valores
    (46) valores -> . factor
    (47) valores -> . factor COMA valores
    (85) valores -> . clave_valor
    (86) valores -> . clave_valor COMA valores
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER
    (87) clave_valor -> . valor DOS_PUNTOS valor
    (88) valor -> . CADENA
    (89) valor -> . NUMERO

    NUMERO          shift and go to state 241
    ID              shift and go to state 50
    CADENA          shift and go to state 242
    FLOAT           shift and go to state 51
    PARENT_IZQ      shift and go to state 29

    clave_valor                    shift and go to state 240
    valores                        shift and go to state 272
    factor                         shift and go to state 239
    valor                          shift and go to state 243

state 259

    (87) clave_valor -> valor DOS_PUNTOS . valor
    (88) valor -> . CADENA
    (89) valor -> . NUMERO

    CADENA          shift and go to state 109
    NUMERO          shift and go to state 110

    valor                          shift and go to state 273

state 260

    (48) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO . PARENT_DER
    (49) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO . COMA NUMERO PARENT_DER

    PARENT_DER      shift and go to state 275
    COMA            shift and go to state 274


state 261

    (77) map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato . PARENT_DER

    PARENT_DER      shift and go to state 276


state 262

    (78) map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores . LLAVE_DER

    LLAVE_DER       shift and go to state 277


state 263

    (37) asignacion -> VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor .

    $end            reduce using rule 37 (asignacion -> VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor .)
    LLAVE_DER       reduce using rule 37 (asignacion -> VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor .)
    DEFAULT         reduce using rule 37 (asignacion -> VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor .)
    CASE            reduce using rule 37 (asignacion -> VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor .)
    RETURN          reduce using rule 37 (asignacion -> VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor .)


state 264

    (76) map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores . LLAVE_DER

    LLAVE_DER       shift and go to state 278


state 265

    (121) cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO . PARENT_DER

    PARENT_DER      shift and go to state 279


state 266

    (118) flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO . PARENT_DER

    PARENT_DER      shift and go to state 280


state 267

    (38) sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA . incremento LLAVE_IZQ programa LLAVE_DER
    (39) incremento -> . ID INCREMENTO
    (40) incremento -> . ID ASIGNACION ID
    (41) incremento -> . ID DECREMENTO

    ID              shift and go to state 281

    incremento                     shift and go to state 282

state 268

    (93) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER .

    $end            reduce using rule 93 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER .)
    LLAVE_DER       reduce using rule 93 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER .)
    DEFAULT         reduce using rule 93 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER .)
    CASE            reduce using rule 93 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER .)
    RETURN          reduce using rule 93 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER .)


state 269

    (94) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN . ID LLAVE_DER

    ID              shift and go to state 283


state 270

    (95) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ RETURN ID . LLAVE_DER

    LLAVE_DER       shift and go to state 284


state 271

    (47) valores -> factor COMA valores .

    LLAVE_DER       reduce using rule 47 (valores -> factor COMA valores .)


state 272

    (86) valores -> clave_valor COMA valores .

    LLAVE_DER       reduce using rule 86 (valores -> clave_valor COMA valores .)


state 273

    (87) clave_valor -> valor DOS_PUNTOS valor .

    COMA            reduce using rule 87 (clave_valor -> valor DOS_PUNTOS valor .)
    LLAVE_DER       reduce using rule 87 (clave_valor -> valor DOS_PUNTOS valor .)


state 274

    (49) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA . NUMERO PARENT_DER

    NUMERO          shift and go to state 285


state 275

    (48) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER .

    $end            reduce using rule 48 (slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER .)
    LLAVE_DER       reduce using rule 48 (slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER .)
    DEFAULT         reduce using rule 48 (slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER .)
    CASE            reduce using rule 48 (slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER .)
    RETURN          reduce using rule 48 (slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER .)


state 276

    (77) map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER .

    $end            reduce using rule 77 (map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER .)
    LLAVE_DER       reduce using rule 77 (map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER .)
    DEFAULT         reduce using rule 77 (map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER .)
    CASE            reduce using rule 77 (map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER .)
    RETURN          reduce using rule 77 (map -> ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER .)


state 277

    (78) map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .

    $end            reduce using rule 78 (map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    LLAVE_DER       reduce using rule 78 (map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    DEFAULT         reduce using rule 78 (map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    CASE            reduce using rule 78 (map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    RETURN          reduce using rule 78 (map -> ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)


state 278

    (76) map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .

    $end            reduce using rule 76 (map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    LLAVE_DER       reduce using rule 76 (map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    DEFAULT         reduce using rule 76 (map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    CASE            reduce using rule 76 (map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)
    RETURN          reduce using rule 76 (map -> VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER .)


state 279

    (121) cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER .

    $end            reduce using rule 121 (cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER .)
    LLAVE_DER       reduce using rule 121 (cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER .)
    DEFAULT         reduce using rule 121 (cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER .)
    CASE            reduce using rule 121 (cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER .)
    RETURN          reduce using rule 121 (cadenaentero -> STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER .)


state 280

    (118) flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER .

    $end            reduce using rule 118 (flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER .)
    LLAVE_DER       reduce using rule 118 (flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER .)
    DEFAULT         reduce using rule 118 (flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER .)
    CASE            reduce using rule 118 (flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER .)
    RETURN          reduce using rule 118 (flotantecadena -> STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER .)


state 281

    (39) incremento -> ID . INCREMENTO
    (40) incremento -> ID . ASIGNACION ID
    (41) incremento -> ID . DECREMENTO

    INCREMENTO      shift and go to state 69
    ASIGNACION      shift and go to state 286
    DECREMENTO      shift and go to state 70


state 282

    (38) sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento . LLAVE_IZQ programa LLAVE_DER

    LLAVE_IZQ       shift and go to state 287


state 283

    (94) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID . LLAVE_DER

    LLAVE_DER       shift and go to state 288


state 284

    (95) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ RETURN ID LLAVE_DER .

    $end            reduce using rule 95 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ RETURN ID LLAVE_DER .)
    LLAVE_DER       reduce using rule 95 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ RETURN ID LLAVE_DER .)
    DEFAULT         reduce using rule 95 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ RETURN ID LLAVE_DER .)
    CASE            reduce using rule 95 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ RETURN ID LLAVE_DER .)
    RETURN          reduce using rule 95 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ RETURN ID LLAVE_DER .)


state 285

    (49) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO . PARENT_DER

    PARENT_DER      shift and go to state 289


state 286

    (40) incremento -> ID ASIGNACION . ID

    ID              shift and go to state 290


state 287

    (38) sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ . programa LLAVE_DER
    (1) programa -> . expression
    (2) programa -> . impresion
    (3) programa -> . sentencia
    (4) programa -> . asignacion
    (5) programa -> . longvariable
    (6) programa -> . boolcadena
    (7) programa -> . companum
    (8) programa -> . compaid
    (9) programa -> . sentenciafor
    (10) programa -> . arreglo
    (11) programa -> . slice
    (12) programa -> . capslice
    (13) programa -> . switch
    (14) programa -> . map
    (15) programa -> . asignar_valor_map
    (16) programa -> . eliminar_valor_map
    (17) programa -> . obtener_valor_map
    (18) programa -> . funcion
    (19) programa -> . cadenabool
    (20) programa -> . enterocadena
    (21) programa -> . cadenaentero
    (22) programa -> . flotantecadena
    (23) programa -> . cadenaflotante
    (24) programa -> . seman_operacion
    (25) programa -> . incremento
    (51) expression -> . expression MAS term
    (52) expression -> . expression MENOS term
    (53) expression -> . term
    (26) impresion -> . FMT PUNTO PRINTF PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (27) impresion -> . FMT PUNTO PRINTF PARENT_IZQ empty PARENT_DER
    (28) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (29) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ empty PARENT_DER
    (30) impresion -> . FMT PUNTO PRINTLN PARENT_IZQ CADENA PARENT_DER
    (58) sentencia -> . IF factor comparacion factor LLAVE_IZQ programa LLAVE_DER
    (35) asignacion -> . ID ASIGNACION factor
    (36) asignacion -> . VAR ID tipo_dato ASIGNACION factor
    (37) asignacion -> . VAR ID COMA ID tipo_dato ASIGNACION factor COMA factor
    (31) longvariable -> . ID PARENT_IZQ CADENA PARENT_DER
    (32) longvariable -> . ID PARENT_IZQ ID PARENT_DER
    (116) boolcadena -> . STRCONV PUNTO FORMATBOOL PARENT_IZQ BOOLEAN PARENT_DER
    (33) companum -> . NUMERO comparacion NUMERO
    (34) compaid -> . ID comparacion ID
    (38) sentenciafor -> . FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER
    (42) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato
    (43) arreglo -> . ID ASIGNACION CORCHETE_IZQ cantidad CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (48) slice -> . ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO PARENT_DER
    (49) slice -> . ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO PARENT_DER
    (50) capslice -> . ID PARENT_IZQ ID PARENT_DER
    (70) switch -> . SWITCH ID LLAVE_IZQ cases LLAVE_DER
    (76) map -> . VAR ID MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (77) map -> . ID ASIGNACION MAKE PARENT_IZQ MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato PARENT_DER
    (78) map -> . ID ASIGNACION MAP CORCHETE_IZQ tipo_dato CORCHETE_DER tipo_dato LLAVE_IZQ valores LLAVE_DER
    (90) asignar_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER ASIGNACION valor
    (91) eliminar_valor_map -> . DELETE PARENT_IZQ ID COMA valor PARENT_DER
    (92) obtener_valor_map -> . ID CORCHETE_IZQ valor CORCHETE_DER
    (93) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa LLAVE_DER
    (94) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER
    (95) funcion -> . FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ RETURN ID LLAVE_DER
    (117) cadenabool -> . STRCONV PUNTO PARSEBOOL PARENT_IZQ CADENA PARENT_DER
    (120) enterocadena -> . STRCONV PUNTO FORMATINT PARENT_IZQ NUMERO COMA NUMERO PARENT_DER
    (121) cadenaentero -> . STRCONV PUNTO PARSEINT PARENT_IZQ CADENA COMA NUMERO COMA NUMERO PARENT_DER
    (118) flotantecadena -> . STRCONV PUNTO FORMATFLOAT PARENT_IZQ FLOAT COMA CADENA COMA NUMERO PARENT_DER
    (119) cadenaflotante -> . STRCONV PUNTO PARSEFLOAT PARENT_IZQ CADENA COMA NUMERO PARENT_DER
    (99) seman_operacion -> . NUMERO MAS NUMERO
    (100) seman_operacion -> . NUMERO MENOS NUMERO
    (101) seman_operacion -> . NUMERO MULTIPLICADOR NUMERO
    (102) seman_operacion -> . NUMERO DIVISOR NUMERO
    (103) seman_operacion -> . NUMERO MOD_DIVISION NUMERO
    (104) seman_operacion -> . FLOAT MAS NUMERO
    (105) seman_operacion -> . FLOAT MENOS NUMERO
    (106) seman_operacion -> . FLOAT MULTIPLICADOR NUMERO
    (107) seman_operacion -> . FLOAT DIVISOR NUMERO
    (108) seman_operacion -> . NUMERO MAS FLOAT
    (109) seman_operacion -> . NUMERO MENOS FLOAT
    (110) seman_operacion -> . NUMERO MULTIPLICADOR FLOAT
    (111) seman_operacion -> . NUMERO DIVISOR FLOAT
    (112) seman_operacion -> . FLOAT MAS FLOAT
    (113) seman_operacion -> . FLOAT MENOS FLOAT
    (114) seman_operacion -> . FLOAT MULTIPLICADOR FLOAT
    (115) seman_operacion -> . FLOAT DIVISOR FLOAT
    (39) incremento -> . ID INCREMENTO
    (40) incremento -> . ID ASIGNACION ID
    (41) incremento -> . ID DECREMENTO
    (54) term -> . term MULTIPLICADOR factor
    (55) term -> . term DIVISOR factor
    (56) term -> . term MOD_DIVISION factor
    (57) term -> . factor
    (65) factor -> . NUMERO
    (66) factor -> . ID
    (67) factor -> . CADENA
    (68) factor -> . FLOAT
    (69) factor -> . PARENT_IZQ expression PARENT_DER

    FMT             shift and go to state 28
    IF              shift and go to state 32
    ID              shift and go to state 34
    VAR             shift and go to state 35
    STRCONV         shift and go to state 36
    NUMERO          shift and go to state 31
    FOR             shift and go to state 37
    SWITCH          shift and go to state 38
    DELETE          shift and go to state 39
    FUNC            shift and go to state 40
    FLOAT           shift and go to state 41
    CADENA          shift and go to state 30
    PARENT_IZQ      shift and go to state 29

    factor                         shift and go to state 33
    incremento                     shift and go to state 26
    programa                       shift and go to state 291
    expression                     shift and go to state 2
    impresion                      shift and go to state 3
    sentencia                      shift and go to state 4
    asignacion                     shift and go to state 5
    longvariable                   shift and go to state 6
    boolcadena                     shift and go to state 7
    companum                       shift and go to state 8
    compaid                        shift and go to state 9
    sentenciafor                   shift and go to state 10
    arreglo                        shift and go to state 11
    slice                          shift and go to state 12
    capslice                       shift and go to state 13
    switch                         shift and go to state 14
    map                            shift and go to state 15
    asignar_valor_map              shift and go to state 16
    eliminar_valor_map             shift and go to state 17
    obtener_valor_map              shift and go to state 18
    funcion                        shift and go to state 19
    cadenabool                     shift and go to state 20
    enterocadena                   shift and go to state 21
    cadenaentero                   shift and go to state 22
    flotantecadena                 shift and go to state 23
    cadenaflotante                 shift and go to state 24
    seman_operacion                shift and go to state 25
    term                           shift and go to state 27

state 288

    (94) funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER .

    $end            reduce using rule 94 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER .)
    LLAVE_DER       reduce using rule 94 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER .)
    DEFAULT         reduce using rule 94 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER .)
    CASE            reduce using rule 94 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER .)
    RETURN          reduce using rule 94 (funcion -> FUNC ID PARENT_IZQ argumentos PARENT_DER tipo_dato LLAVE_IZQ programa RETURN ID LLAVE_DER .)


state 289

    (49) slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO PARENT_DER .

    $end            reduce using rule 49 (slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO PARENT_DER .)
    LLAVE_DER       reduce using rule 49 (slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO PARENT_DER .)
    DEFAULT         reduce using rule 49 (slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO PARENT_DER .)
    CASE            reduce using rule 49 (slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO PARENT_DER .)
    RETURN          reduce using rule 49 (slice -> ID ASIGNACION MAKE PARENT_IZQ CORCHETE_IZQ CORCHETE_DER tipo_dato COMA NUMERO COMA NUMERO PARENT_DER .)


state 290

    (40) incremento -> ID ASIGNACION ID .

    LLAVE_IZQ       reduce using rule 40 (incremento -> ID ASIGNACION ID .)


state 291

    (38) sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa . LLAVE_DER

    LLAVE_DER       shift and go to state 292


state 292

    (38) sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER .

    $end            reduce using rule 38 (sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER .)
    LLAVE_DER       reduce using rule 38 (sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER .)
    DEFAULT         reduce using rule 38 (sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER .)
    CASE            reduce using rule 38 (sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER .)
    RETURN          reduce using rule 38 (sentenciafor -> FOR ID ASIGNACION factor FIN_SENTENCIA ID comparacion factor FIN_SENTENCIA incremento LLAVE_IZQ programa LLAVE_DER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MULTIPLICADOR in state 31 resolved as shift
WARNING: shift/reduce conflict for DIVISOR in state 31 resolved as shift
WARNING: shift/reduce conflict for MOD_DIVISION in state 31 resolved as shift
WARNING: shift/reduce conflict for MAS in state 31 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 31 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICADOR in state 41 resolved as shift
WARNING: shift/reduce conflict for DIVISOR in state 41 resolved as shift
WARNING: shift/reduce conflict for MAS in state 41 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 41 resolved as shift
WARNING: reduce/reduce conflict in state 100 resolved using rule (incremento -> ID ASIGNACION ID)
WARNING: rejected rule (factor -> ID) in state 100
WARNING: reduce/reduce conflict in state 146 resolved using rule (longvariable -> ID PARENT_IZQ ID PARENT_DER)
WARNING: rejected rule (capslice -> ID PARENT_IZQ ID PARENT_DER) in state 146
WARNING: Rule (capslice -> ID PARENT_IZQ ID PARENT_DER) is never reduced
